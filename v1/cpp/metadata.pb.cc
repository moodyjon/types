// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#include "metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace legacy_pb {
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , author_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , license_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , thumbnail_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , preview_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , licenseurl_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fee_(nullptr)
  , version_(0)

  , language_(0)

  , nsfw_(false){}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace legacy_pb
static ::_pb::Metadata file_level_metadata_metadata_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_metadata_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_metadata_2eproto = nullptr;

const uint32_t TableStruct_metadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, version_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, language_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, title_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, description_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, author_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, license_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, nsfw_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, fee_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, thumbnail_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, preview_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Metadata, licenseurl_),
  8,
  9,
  0,
  1,
  2,
  3,
  10,
  7,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::legacy_pb::Metadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::legacy_pb::_Metadata_default_instance_._instance,
};

const char descriptor_table_protodef_metadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016metadata.proto\022\tlegacy_pb\032\tfee.proto\"\374"
  "\016\n\010Metadata\022,\n\007version\030\001 \002(\0162\033.legacy_pb"
  ".Metadata.Version\022.\n\010language\030\002 \002(\0162\034.le"
  "gacy_pb.Metadata.Language\022\r\n\005title\030\003 \002(\t"
  "\022\023\n\013description\030\004 \002(\t\022\016\n\006author\030\005 \002(\t\022\017\n"
  "\007license\030\006 \002(\t\022\014\n\004nsfw\030\007 \002(\010\022\033\n\003fee\030\010 \001("
  "\0132\016.legacy_pb.Fee\022\021\n\tthumbnail\030\t \001(\t\022\017\n\007"
  "preview\030\n \001(\t\022\022\n\nlicenseUrl\030\013 \001(\t\"N\n\007Ver"
  "sion\022\023\n\017UNKNOWN_VERSION\020\000\022\n\n\006_0_0_1\020\001\022\n\n"
  "\006_0_0_2\020\002\022\n\n\006_0_0_3\020\003\022\n\n\006_0_1_0\020\004\"\231\014\n\010La"
  "nguage\022\024\n\020UNKNOWN_LANGUAGE\020\000\022\006\n\002en\020\001\022\006\n\002"
  "aa\020\002\022\006\n\002ab\020\003\022\006\n\002ae\020\004\022\006\n\002af\020\005\022\006\n\002ak\020\006\022\006\n\002"
  "am\020\007\022\006\n\002an\020\010\022\006\n\002ar\020\t\022\006\n\002as\020\n\022\006\n\002av\020\013\022\006\n\002"
  "ay\020\014\022\006\n\002az\020\r\022\006\n\002ba\020\016\022\006\n\002be\020\017\022\006\n\002bg\020\020\022\006\n\002"
  "bh\020\021\022\006\n\002bi\020\022\022\006\n\002bm\020\023\022\006\n\002bn\020\024\022\006\n\002bo\020\025\022\006\n\002"
  "br\020\026\022\006\n\002bs\020\027\022\006\n\002ca\020\030\022\006\n\002ce\020\031\022\006\n\002ch\020\032\022\006\n\002"
  "co\020\033\022\006\n\002cr\020\034\022\006\n\002cs\020\035\022\006\n\002cu\020\036\022\006\n\002cv\020\037\022\006\n\002"
  "cy\020 \022\006\n\002da\020!\022\006\n\002de\020\"\022\006\n\002dv\020#\022\006\n\002dz\020$\022\006\n\002"
  "ee\020%\022\006\n\002el\020&\022\006\n\002eo\020\'\022\006\n\002es\020(\022\006\n\002et\020)\022\006\n\002"
  "eu\020*\022\006\n\002fa\020+\022\006\n\002ff\020,\022\006\n\002fi\020-\022\006\n\002fj\020.\022\006\n\002"
  "fo\020/\022\006\n\002fr\0200\022\006\n\002fy\0201\022\006\n\002ga\0202\022\006\n\002gd\0203\022\006\n\002"
  "gl\0204\022\006\n\002gn\0205\022\006\n\002gu\0206\022\006\n\002gv\0207\022\006\n\002ha\0208\022\006\n\002"
  "he\0209\022\006\n\002hi\020:\022\006\n\002ho\020;\022\006\n\002hr\020<\022\006\n\002ht\020=\022\006\n\002"
  "hu\020>\022\006\n\002hy\020\?\022\006\n\002hz\020@\022\006\n\002ia\020A\022\006\n\002id\020B\022\006\n\002"
  "ie\020C\022\006\n\002ig\020D\022\006\n\002ii\020E\022\006\n\002ik\020F\022\006\n\002io\020G\022\006\n\002"
  "is\020H\022\006\n\002it\020I\022\006\n\002iu\020J\022\006\n\002ja\020K\022\006\n\002jv\020L\022\006\n\002"
  "ka\020M\022\006\n\002kg\020N\022\006\n\002ki\020O\022\006\n\002kj\020P\022\006\n\002kk\020Q\022\006\n\002"
  "kl\020R\022\006\n\002km\020S\022\006\n\002kn\020T\022\006\n\002ko\020U\022\006\n\002kr\020V\022\006\n\002"
  "ks\020W\022\006\n\002ku\020X\022\006\n\002kv\020Y\022\006\n\002kw\020Z\022\006\n\002ky\020[\022\006\n\002"
  "la\020\\\022\006\n\002lb\020]\022\006\n\002lg\020^\022\006\n\002li\020_\022\006\n\002ln\020`\022\006\n\002"
  "lo\020a\022\006\n\002lt\020b\022\006\n\002lu\020c\022\006\n\002lv\020d\022\006\n\002mg\020e\022\006\n\002"
  "mh\020f\022\006\n\002mi\020g\022\006\n\002mk\020h\022\006\n\002ml\020i\022\006\n\002mn\020j\022\006\n\002"
  "mr\020k\022\006\n\002ms\020l\022\006\n\002mt\020m\022\006\n\002my\020n\022\006\n\002na\020o\022\006\n\002"
  "nb\020p\022\006\n\002nd\020q\022\006\n\002ne\020r\022\006\n\002ng\020s\022\006\n\002nl\020t\022\006\n\002"
  "nn\020u\022\006\n\002no\020v\022\006\n\002nr\020w\022\006\n\002nv\020x\022\006\n\002ny\020y\022\006\n\002"
  "oc\020z\022\006\n\002oj\020{\022\006\n\002om\020|\022\006\n\002or\020}\022\006\n\002os\020~\022\006\n\002"
  "pa\020\177\022\007\n\002pi\020\200\001\022\007\n\002pl\020\201\001\022\007\n\002ps\020\202\001\022\007\n\002pt\020\203\001"
  "\022\007\n\002qu\020\204\001\022\007\n\002rm\020\205\001\022\007\n\002rn\020\206\001\022\007\n\002ro\020\207\001\022\007\n\002"
  "ru\020\210\001\022\007\n\002rw\020\211\001\022\007\n\002sa\020\212\001\022\007\n\002sc\020\213\001\022\007\n\002sd\020\214"
  "\001\022\007\n\002se\020\215\001\022\007\n\002sg\020\216\001\022\007\n\002si\020\217\001\022\007\n\002sk\020\220\001\022\007\n"
  "\002sl\020\221\001\022\007\n\002sm\020\222\001\022\007\n\002sn\020\223\001\022\007\n\002so\020\224\001\022\007\n\002sq\020"
  "\225\001\022\007\n\002sr\020\226\001\022\007\n\002ss\020\227\001\022\007\n\002st\020\230\001\022\007\n\002su\020\231\001\022\007"
  "\n\002sv\020\232\001\022\007\n\002sw\020\233\001\022\007\n\002ta\020\234\001\022\007\n\002te\020\235\001\022\007\n\002tg"
  "\020\236\001\022\007\n\002th\020\237\001\022\007\n\002ti\020\240\001\022\007\n\002tk\020\241\001\022\007\n\002tl\020\242\001\022"
  "\007\n\002tn\020\243\001\022\007\n\002to\020\244\001\022\007\n\002tr\020\245\001\022\007\n\002ts\020\246\001\022\007\n\002t"
  "t\020\247\001\022\007\n\002tw\020\250\001\022\007\n\002ty\020\251\001\022\007\n\002ug\020\252\001\022\007\n\002uk\020\253\001"
  "\022\007\n\002ur\020\254\001\022\007\n\002uz\020\255\001\022\007\n\002ve\020\256\001\022\007\n\002vi\020\257\001\022\007\n\002"
  "vo\020\260\001\022\007\n\002wa\020\261\001\022\007\n\002wo\020\262\001\022\007\n\002xh\020\263\001\022\007\n\002yi\020\264"
  "\001\022\007\n\002yo\020\265\001\022\007\n\002za\020\266\001\022\007\n\002zh\020\267\001\022\007\n\002zu\020\270\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_metadata_2eproto_deps[1] = {
  &::descriptor_table_fee_2eproto,
};
static ::_pbi::once_flag descriptor_table_metadata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metadata_2eproto = {
    false, false, 1957, descriptor_table_protodef_metadata_2eproto,
    "metadata.proto",
    &descriptor_table_metadata_2eproto_once, descriptor_table_metadata_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_metadata_2eproto::offsets,
    file_level_metadata_metadata_2eproto, file_level_enum_descriptors_metadata_2eproto,
    file_level_service_descriptors_metadata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metadata_2eproto_getter() {
  return &descriptor_table_metadata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metadata_2eproto(&descriptor_table_metadata_2eproto);
namespace legacy_pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metadata_Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_2eproto);
  return file_level_enum_descriptors_metadata_2eproto[0];
}
bool Metadata_Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Metadata_Version Metadata::UNKNOWN_VERSION;
constexpr Metadata_Version Metadata::_0_0_1;
constexpr Metadata_Version Metadata::_0_0_2;
constexpr Metadata_Version Metadata::_0_0_3;
constexpr Metadata_Version Metadata::_0_1_0;
constexpr Metadata_Version Metadata::Version_MIN;
constexpr Metadata_Version Metadata::Version_MAX;
constexpr int Metadata::Version_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metadata_Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_2eproto);
  return file_level_enum_descriptors_metadata_2eproto[1];
}
bool Metadata_Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Metadata_Language Metadata::UNKNOWN_LANGUAGE;
constexpr Metadata_Language Metadata::en;
constexpr Metadata_Language Metadata::aa;
constexpr Metadata_Language Metadata::ab;
constexpr Metadata_Language Metadata::ae;
constexpr Metadata_Language Metadata::af;
constexpr Metadata_Language Metadata::ak;
constexpr Metadata_Language Metadata::am;
constexpr Metadata_Language Metadata::an;
constexpr Metadata_Language Metadata::ar;
constexpr Metadata_Language Metadata::as;
constexpr Metadata_Language Metadata::av;
constexpr Metadata_Language Metadata::ay;
constexpr Metadata_Language Metadata::az;
constexpr Metadata_Language Metadata::ba;
constexpr Metadata_Language Metadata::be;
constexpr Metadata_Language Metadata::bg;
constexpr Metadata_Language Metadata::bh;
constexpr Metadata_Language Metadata::bi;
constexpr Metadata_Language Metadata::bm;
constexpr Metadata_Language Metadata::bn;
constexpr Metadata_Language Metadata::bo;
constexpr Metadata_Language Metadata::br;
constexpr Metadata_Language Metadata::bs;
constexpr Metadata_Language Metadata::ca;
constexpr Metadata_Language Metadata::ce;
constexpr Metadata_Language Metadata::ch;
constexpr Metadata_Language Metadata::co;
constexpr Metadata_Language Metadata::cr;
constexpr Metadata_Language Metadata::cs;
constexpr Metadata_Language Metadata::cu;
constexpr Metadata_Language Metadata::cv;
constexpr Metadata_Language Metadata::cy;
constexpr Metadata_Language Metadata::da;
constexpr Metadata_Language Metadata::de;
constexpr Metadata_Language Metadata::dv;
constexpr Metadata_Language Metadata::dz;
constexpr Metadata_Language Metadata::ee;
constexpr Metadata_Language Metadata::el;
constexpr Metadata_Language Metadata::eo;
constexpr Metadata_Language Metadata::es;
constexpr Metadata_Language Metadata::et;
constexpr Metadata_Language Metadata::eu;
constexpr Metadata_Language Metadata::fa;
constexpr Metadata_Language Metadata::ff;
constexpr Metadata_Language Metadata::fi;
constexpr Metadata_Language Metadata::fj;
constexpr Metadata_Language Metadata::fo;
constexpr Metadata_Language Metadata::fr;
constexpr Metadata_Language Metadata::fy;
constexpr Metadata_Language Metadata::ga;
constexpr Metadata_Language Metadata::gd;
constexpr Metadata_Language Metadata::gl;
constexpr Metadata_Language Metadata::gn;
constexpr Metadata_Language Metadata::gu;
constexpr Metadata_Language Metadata::gv;
constexpr Metadata_Language Metadata::ha;
constexpr Metadata_Language Metadata::he;
constexpr Metadata_Language Metadata::hi;
constexpr Metadata_Language Metadata::ho;
constexpr Metadata_Language Metadata::hr;
constexpr Metadata_Language Metadata::ht;
constexpr Metadata_Language Metadata::hu;
constexpr Metadata_Language Metadata::hy;
constexpr Metadata_Language Metadata::hz;
constexpr Metadata_Language Metadata::ia;
constexpr Metadata_Language Metadata::id;
constexpr Metadata_Language Metadata::ie;
constexpr Metadata_Language Metadata::ig;
constexpr Metadata_Language Metadata::ii;
constexpr Metadata_Language Metadata::ik;
constexpr Metadata_Language Metadata::io;
constexpr Metadata_Language Metadata::is;
constexpr Metadata_Language Metadata::it;
constexpr Metadata_Language Metadata::iu;
constexpr Metadata_Language Metadata::ja;
constexpr Metadata_Language Metadata::jv;
constexpr Metadata_Language Metadata::ka;
constexpr Metadata_Language Metadata::kg;
constexpr Metadata_Language Metadata::ki;
constexpr Metadata_Language Metadata::kj;
constexpr Metadata_Language Metadata::kk;
constexpr Metadata_Language Metadata::kl;
constexpr Metadata_Language Metadata::km;
constexpr Metadata_Language Metadata::kn;
constexpr Metadata_Language Metadata::ko;
constexpr Metadata_Language Metadata::kr;
constexpr Metadata_Language Metadata::ks;
constexpr Metadata_Language Metadata::ku;
constexpr Metadata_Language Metadata::kv;
constexpr Metadata_Language Metadata::kw;
constexpr Metadata_Language Metadata::ky;
constexpr Metadata_Language Metadata::la;
constexpr Metadata_Language Metadata::lb;
constexpr Metadata_Language Metadata::lg;
constexpr Metadata_Language Metadata::li;
constexpr Metadata_Language Metadata::ln;
constexpr Metadata_Language Metadata::lo;
constexpr Metadata_Language Metadata::lt;
constexpr Metadata_Language Metadata::lu;
constexpr Metadata_Language Metadata::lv;
constexpr Metadata_Language Metadata::mg;
constexpr Metadata_Language Metadata::mh;
constexpr Metadata_Language Metadata::mi;
constexpr Metadata_Language Metadata::mk;
constexpr Metadata_Language Metadata::ml;
constexpr Metadata_Language Metadata::mn;
constexpr Metadata_Language Metadata::mr;
constexpr Metadata_Language Metadata::ms;
constexpr Metadata_Language Metadata::mt;
constexpr Metadata_Language Metadata::my;
constexpr Metadata_Language Metadata::na;
constexpr Metadata_Language Metadata::nb;
constexpr Metadata_Language Metadata::nd;
constexpr Metadata_Language Metadata::ne;
constexpr Metadata_Language Metadata::ng;
constexpr Metadata_Language Metadata::nl;
constexpr Metadata_Language Metadata::nn;
constexpr Metadata_Language Metadata::no;
constexpr Metadata_Language Metadata::nr;
constexpr Metadata_Language Metadata::nv;
constexpr Metadata_Language Metadata::ny;
constexpr Metadata_Language Metadata::oc;
constexpr Metadata_Language Metadata::oj;
constexpr Metadata_Language Metadata::om;
constexpr Metadata_Language Metadata::or_;
constexpr Metadata_Language Metadata::os;
constexpr Metadata_Language Metadata::pa;
constexpr Metadata_Language Metadata::pi;
constexpr Metadata_Language Metadata::pl;
constexpr Metadata_Language Metadata::ps;
constexpr Metadata_Language Metadata::pt;
constexpr Metadata_Language Metadata::qu;
constexpr Metadata_Language Metadata::rm;
constexpr Metadata_Language Metadata::rn;
constexpr Metadata_Language Metadata::ro;
constexpr Metadata_Language Metadata::ru;
constexpr Metadata_Language Metadata::rw;
constexpr Metadata_Language Metadata::sa;
constexpr Metadata_Language Metadata::sc;
constexpr Metadata_Language Metadata::sd;
constexpr Metadata_Language Metadata::se;
constexpr Metadata_Language Metadata::sg;
constexpr Metadata_Language Metadata::si;
constexpr Metadata_Language Metadata::sk;
constexpr Metadata_Language Metadata::sl;
constexpr Metadata_Language Metadata::sm;
constexpr Metadata_Language Metadata::sn;
constexpr Metadata_Language Metadata::so;
constexpr Metadata_Language Metadata::sq;
constexpr Metadata_Language Metadata::sr;
constexpr Metadata_Language Metadata::ss;
constexpr Metadata_Language Metadata::st;
constexpr Metadata_Language Metadata::su;
constexpr Metadata_Language Metadata::sv;
constexpr Metadata_Language Metadata::sw;
constexpr Metadata_Language Metadata::ta;
constexpr Metadata_Language Metadata::te;
constexpr Metadata_Language Metadata::tg;
constexpr Metadata_Language Metadata::th;
constexpr Metadata_Language Metadata::ti;
constexpr Metadata_Language Metadata::tk;
constexpr Metadata_Language Metadata::tl;
constexpr Metadata_Language Metadata::tn;
constexpr Metadata_Language Metadata::to;
constexpr Metadata_Language Metadata::tr;
constexpr Metadata_Language Metadata::ts;
constexpr Metadata_Language Metadata::tt;
constexpr Metadata_Language Metadata::tw;
constexpr Metadata_Language Metadata::ty;
constexpr Metadata_Language Metadata::ug;
constexpr Metadata_Language Metadata::uk;
constexpr Metadata_Language Metadata::ur;
constexpr Metadata_Language Metadata::uz;
constexpr Metadata_Language Metadata::ve;
constexpr Metadata_Language Metadata::vi;
constexpr Metadata_Language Metadata::vo;
constexpr Metadata_Language Metadata::wa;
constexpr Metadata_Language Metadata::wo;
constexpr Metadata_Language Metadata::xh;
constexpr Metadata_Language Metadata::yi;
constexpr Metadata_Language Metadata::yo;
constexpr Metadata_Language Metadata::za;
constexpr Metadata_Language Metadata::zh;
constexpr Metadata_Language Metadata::zu;
constexpr Metadata_Language Metadata::Language_MIN;
constexpr Metadata_Language Metadata::Language_MAX;
constexpr int Metadata::Language_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<Metadata>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nsfw(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::legacy_pb::Fee& fee(const Metadata* msg);
  static void set_has_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_licenseurl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000070f) ^ 0x0000070f) != 0;
  }
};

const ::legacy_pb::Fee&
Metadata::_Internal::fee(const Metadata* msg) {
  return *msg->fee_;
}
void Metadata::clear_fee() {
  if (fee_ != nullptr) fee_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:legacy_pb.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_author()) {
    author_.Set(from._internal_author(), 
      GetArenaForAllocation());
  }
  license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_license()) {
    license_.Set(from._internal_license(), 
      GetArenaForAllocation());
  }
  thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail()) {
    thumbnail_.Set(from._internal_thumbnail(), 
      GetArenaForAllocation());
  }
  preview_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    preview_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preview()) {
    preview_.Set(from._internal_preview(), 
      GetArenaForAllocation());
  }
  licenseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    licenseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_licenseurl()) {
    licenseurl_.Set(from._internal_licenseurl(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_fee()) {
    fee_ = new ::legacy_pb::Fee(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&nsfw_) -
    reinterpret_cast<char*>(&version_)) + sizeof(nsfw_));
  // @@protoc_insertion_point(copy_constructor:legacy_pb.Metadata)
}

inline void Metadata::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
author_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  author_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
preview_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  preview_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
licenseurl_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  licenseurl_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fee_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nsfw_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(nsfw_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:legacy_pb.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  description_.Destroy();
  author_.Destroy();
  license_.Destroy();
  thumbnail_.Destroy();
  preview_.Destroy();
  licenseurl_.Destroy();
  if (this != internal_default_instance()) delete fee_;
}

void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:legacy_pb.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      author_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      license_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      preview_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      licenseurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(fee_ != nullptr);
      fee_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nsfw_) -
        reinterpret_cast<char*>(&version_)) + sizeof(nsfw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .legacy_pb.Metadata.Version version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::legacy_pb::Metadata_Version_IsValid(val))) {
            _internal_set_version(static_cast<::legacy_pb::Metadata_Version>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .legacy_pb.Metadata.Language language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::legacy_pb::Metadata_Language_IsValid(val))) {
            _internal_set_language(static_cast<::legacy_pb::Metadata_Language>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "legacy_pb.Metadata.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "legacy_pb.Metadata.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_author();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "legacy_pb.Metadata.author");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string license = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "legacy_pb.Metadata.license");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool nsfw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_nsfw(&has_bits);
          nsfw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .legacy_pb.Fee fee = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "legacy_pb.Metadata.thumbnail");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string preview = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_preview();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "legacy_pb.Metadata.preview");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string licenseUrl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_licenseurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "legacy_pb.Metadata.licenseUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:legacy_pb.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .legacy_pb.Metadata.Version version = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_version(), target);
  }

  // required .legacy_pb.Metadata.Language language = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_language(), target);
  }

  // required string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "legacy_pb.Metadata.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // required string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "legacy_pb.Metadata.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // required string author = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "legacy_pb.Metadata.author");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_author(), target);
  }

  // required string license = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "legacy_pb.Metadata.license");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_license(), target);
  }

  // required bool nsfw = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_nsfw(), target);
  }

  // optional .legacy_pb.Fee fee = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fee(this),
        _Internal::fee(this).GetCachedSize(), target, stream);
  }

  // optional string thumbnail = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail().data(), static_cast<int>(this->_internal_thumbnail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "legacy_pb.Metadata.thumbnail");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_thumbnail(), target);
  }

  // optional string preview = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preview().data(), static_cast<int>(this->_internal_preview().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "legacy_pb.Metadata.preview");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_preview(), target);
  }

  // optional string licenseUrl = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_licenseurl().data(), static_cast<int>(this->_internal_licenseurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "legacy_pb.Metadata.licenseUrl");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_licenseurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:legacy_pb.Metadata)
  return target;
}

size_t Metadata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:legacy_pb.Metadata)
  size_t total_size = 0;

  if (_internal_has_title()) {
    // required string title = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (_internal_has_description()) {
    // required string description = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_author()) {
    // required string author = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  if (_internal_has_license()) {
    // required string license = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  if (_internal_has_version()) {
    // required .legacy_pb.Metadata.Version version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  if (_internal_has_language()) {
    // required .legacy_pb.Metadata.Language language = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  if (_internal_has_nsfw()) {
    // required bool nsfw = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:legacy_pb.Metadata)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000070f) ^ 0x0000070f) == 0) {  // All required fields are present.
    // required string title = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());

    // required string description = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required string author = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());

    // required string license = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());

    // required .legacy_pb.Metadata.Version version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());

    // required .legacy_pb.Metadata.Language language = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());

    // required bool nsfw = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional string thumbnail = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail());
    }

    // optional string preview = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preview());
    }

    // optional string licenseUrl = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_licenseurl());
    }

    // optional .legacy_pb.Fee fee = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fee_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:legacy_pb.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_author(from._internal_author());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_license(from._internal_license());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_thumbnail(from._internal_thumbnail());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_preview(from._internal_preview());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_licenseurl(from._internal_licenseurl());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_fee()->::legacy_pb::Fee::MergeFrom(from._internal_fee());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000200u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000400u) {
      nsfw_ = from.nsfw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:legacy_pb.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_fee()) {
    if (!fee_->IsInitialized()) return false;
  }
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &author_, lhs_arena,
      &other->author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &license_, lhs_arena,
      &other->license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &thumbnail_, lhs_arena,
      &other->thumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &preview_, lhs_arena,
      &other->preview_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &licenseurl_, lhs_arena,
      &other->licenseurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, nsfw_)
      + sizeof(Metadata::nsfw_)
      - PROTOBUF_FIELD_OFFSET(Metadata, fee_)>(
          reinterpret_cast<char*>(&fee_),
          reinterpret_cast<char*>(&other->fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metadata_2eproto_getter, &descriptor_table_metadata_2eproto_once,
      file_level_metadata_metadata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace legacy_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::legacy_pb::Metadata*
Arena::CreateMaybeMessage< ::legacy_pb::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::legacy_pb::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
