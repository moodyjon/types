// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: legacy_claim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_legacy_5fclaim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_legacy_5fclaim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "stream.pb.h"
#include "certificate.pb.h"
#include "signature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_legacy_5fclaim_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_legacy_5fclaim_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_legacy_5fclaim_2eproto;
namespace legacy_pb {
class Claim;
struct ClaimDefaultTypeInternal;
extern ClaimDefaultTypeInternal _Claim_default_instance_;
}  // namespace legacy_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::legacy_pb::Claim* Arena::CreateMaybeMessage<::legacy_pb::Claim>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace legacy_pb {

enum Claim_Version : int {
  Claim_Version_UNKNOWN_VERSION = 0,
  Claim_Version__0_0_1 = 1
};
bool Claim_Version_IsValid(int value);
constexpr Claim_Version Claim_Version_Version_MIN = Claim_Version_UNKNOWN_VERSION;
constexpr Claim_Version Claim_Version_Version_MAX = Claim_Version__0_0_1;
constexpr int Claim_Version_Version_ARRAYSIZE = Claim_Version_Version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Claim_Version_descriptor();
template<typename T>
inline const std::string& Claim_Version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Claim_Version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Claim_Version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Claim_Version_descriptor(), enum_t_value);
}
inline bool Claim_Version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Claim_Version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Claim_Version>(
    Claim_Version_descriptor(), name, value);
}
enum Claim_ClaimType : int {
  Claim_ClaimType_UNKNOWN_CLAIM_TYPE = 0,
  Claim_ClaimType_streamType = 1,
  Claim_ClaimType_certificateType = 2
};
bool Claim_ClaimType_IsValid(int value);
constexpr Claim_ClaimType Claim_ClaimType_ClaimType_MIN = Claim_ClaimType_UNKNOWN_CLAIM_TYPE;
constexpr Claim_ClaimType Claim_ClaimType_ClaimType_MAX = Claim_ClaimType_certificateType;
constexpr int Claim_ClaimType_ClaimType_ARRAYSIZE = Claim_ClaimType_ClaimType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Claim_ClaimType_descriptor();
template<typename T>
inline const std::string& Claim_ClaimType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Claim_ClaimType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Claim_ClaimType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Claim_ClaimType_descriptor(), enum_t_value);
}
inline bool Claim_ClaimType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Claim_ClaimType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Claim_ClaimType>(
    Claim_ClaimType_descriptor(), name, value);
}
// ===================================================================

class Claim final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:legacy_pb.Claim) */ {
 public:
  inline Claim() : Claim(nullptr) {}
  ~Claim() override;
  explicit PROTOBUF_CONSTEXPR Claim(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Claim(const Claim& from);
  Claim(Claim&& from) noexcept
    : Claim() {
    *this = ::std::move(from);
  }

  inline Claim& operator=(const Claim& from) {
    CopyFrom(from);
    return *this;
  }
  inline Claim& operator=(Claim&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Claim& default_instance() {
    return *internal_default_instance();
  }
  static inline const Claim* internal_default_instance() {
    return reinterpret_cast<const Claim*>(
               &_Claim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Claim& a, Claim& b) {
    a.Swap(&b);
  }
  inline void Swap(Claim* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Claim* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Claim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Claim>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Claim& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Claim& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Claim* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "legacy_pb.Claim";
  }
  protected:
  explicit Claim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Claim_Version Version;
  static constexpr Version UNKNOWN_VERSION =
    Claim_Version_UNKNOWN_VERSION;
  static constexpr Version _0_0_1 =
    Claim_Version__0_0_1;
  static inline bool Version_IsValid(int value) {
    return Claim_Version_IsValid(value);
  }
  static constexpr Version Version_MIN =
    Claim_Version_Version_MIN;
  static constexpr Version Version_MAX =
    Claim_Version_Version_MAX;
  static constexpr int Version_ARRAYSIZE =
    Claim_Version_Version_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Version_descriptor() {
    return Claim_Version_descriptor();
  }
  template<typename T>
  static inline const std::string& Version_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Version>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Version_Name.");
    return Claim_Version_Name(enum_t_value);
  }
  static inline bool Version_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Version* value) {
    return Claim_Version_Parse(name, value);
  }

  typedef Claim_ClaimType ClaimType;
  static constexpr ClaimType UNKNOWN_CLAIM_TYPE =
    Claim_ClaimType_UNKNOWN_CLAIM_TYPE;
  static constexpr ClaimType streamType =
    Claim_ClaimType_streamType;
  static constexpr ClaimType certificateType =
    Claim_ClaimType_certificateType;
  static inline bool ClaimType_IsValid(int value) {
    return Claim_ClaimType_IsValid(value);
  }
  static constexpr ClaimType ClaimType_MIN =
    Claim_ClaimType_ClaimType_MIN;
  static constexpr ClaimType ClaimType_MAX =
    Claim_ClaimType_ClaimType_MAX;
  static constexpr int ClaimType_ARRAYSIZE =
    Claim_ClaimType_ClaimType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ClaimType_descriptor() {
    return Claim_ClaimType_descriptor();
  }
  template<typename T>
  static inline const std::string& ClaimType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClaimType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClaimType_Name.");
    return Claim_ClaimType_Name(enum_t_value);
  }
  static inline bool ClaimType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ClaimType* value) {
    return Claim_ClaimType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 3,
    kCertificateFieldNumber = 4,
    kPublisherSignatureFieldNumber = 5,
    kVersionFieldNumber = 1,
    kClaimTypeFieldNumber = 2,
  };
  // optional .legacy_pb.Stream stream = 3;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::legacy_pb::Stream& stream() const;
  PROTOBUF_NODISCARD ::legacy_pb::Stream* release_stream();
  ::legacy_pb::Stream* mutable_stream();
  void set_allocated_stream(::legacy_pb::Stream* stream);
  private:
  const ::legacy_pb::Stream& _internal_stream() const;
  ::legacy_pb::Stream* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::legacy_pb::Stream* stream);
  ::legacy_pb::Stream* unsafe_arena_release_stream();

  // optional .legacy_pb.Certificate certificate = 4;
  bool has_certificate() const;
  private:
  bool _internal_has_certificate() const;
  public:
  void clear_certificate();
  const ::legacy_pb::Certificate& certificate() const;
  PROTOBUF_NODISCARD ::legacy_pb::Certificate* release_certificate();
  ::legacy_pb::Certificate* mutable_certificate();
  void set_allocated_certificate(::legacy_pb::Certificate* certificate);
  private:
  const ::legacy_pb::Certificate& _internal_certificate() const;
  ::legacy_pb::Certificate* _internal_mutable_certificate();
  public:
  void unsafe_arena_set_allocated_certificate(
      ::legacy_pb::Certificate* certificate);
  ::legacy_pb::Certificate* unsafe_arena_release_certificate();

  // optional .legacy_pb.Signature publisherSignature = 5;
  bool has_publishersignature() const;
  private:
  bool _internal_has_publishersignature() const;
  public:
  void clear_publishersignature();
  const ::legacy_pb::Signature& publishersignature() const;
  PROTOBUF_NODISCARD ::legacy_pb::Signature* release_publishersignature();
  ::legacy_pb::Signature* mutable_publishersignature();
  void set_allocated_publishersignature(::legacy_pb::Signature* publishersignature);
  private:
  const ::legacy_pb::Signature& _internal_publishersignature() const;
  ::legacy_pb::Signature* _internal_mutable_publishersignature();
  public:
  void unsafe_arena_set_allocated_publishersignature(
      ::legacy_pb::Signature* publishersignature);
  ::legacy_pb::Signature* unsafe_arena_release_publishersignature();

  // required .legacy_pb.Claim.Version version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::legacy_pb::Claim_Version version() const;
  void set_version(::legacy_pb::Claim_Version value);
  private:
  ::legacy_pb::Claim_Version _internal_version() const;
  void _internal_set_version(::legacy_pb::Claim_Version value);
  public:

  // required .legacy_pb.Claim.ClaimType claimType = 2;
  bool has_claimtype() const;
  private:
  bool _internal_has_claimtype() const;
  public:
  void clear_claimtype();
  ::legacy_pb::Claim_ClaimType claimtype() const;
  void set_claimtype(::legacy_pb::Claim_ClaimType value);
  private:
  ::legacy_pb::Claim_ClaimType _internal_claimtype() const;
  void _internal_set_claimtype(::legacy_pb::Claim_ClaimType value);
  public:

  // @@protoc_insertion_point(class_scope:legacy_pb.Claim)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::legacy_pb::Stream* stream_;
  ::legacy_pb::Certificate* certificate_;
  ::legacy_pb::Signature* publishersignature_;
  int version_;
  int claimtype_;
  friend struct ::TableStruct_legacy_5fclaim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Claim

// required .legacy_pb.Claim.Version version = 1;
inline bool Claim::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Claim::has_version() const {
  return _internal_has_version();
}
inline void Claim::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::legacy_pb::Claim_Version Claim::_internal_version() const {
  return static_cast< ::legacy_pb::Claim_Version >(version_);
}
inline ::legacy_pb::Claim_Version Claim::version() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.version)
  return _internal_version();
}
inline void Claim::_internal_set_version(::legacy_pb::Claim_Version value) {
  assert(::legacy_pb::Claim_Version_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
}
inline void Claim::set_version(::legacy_pb::Claim_Version value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Claim.version)
}

// required .legacy_pb.Claim.ClaimType claimType = 2;
inline bool Claim::_internal_has_claimtype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Claim::has_claimtype() const {
  return _internal_has_claimtype();
}
inline void Claim::clear_claimtype() {
  claimtype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::legacy_pb::Claim_ClaimType Claim::_internal_claimtype() const {
  return static_cast< ::legacy_pb::Claim_ClaimType >(claimtype_);
}
inline ::legacy_pb::Claim_ClaimType Claim::claimtype() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.claimType)
  return _internal_claimtype();
}
inline void Claim::_internal_set_claimtype(::legacy_pb::Claim_ClaimType value) {
  assert(::legacy_pb::Claim_ClaimType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  claimtype_ = value;
}
inline void Claim::set_claimtype(::legacy_pb::Claim_ClaimType value) {
  _internal_set_claimtype(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Claim.claimType)
}

// optional .legacy_pb.Stream stream = 3;
inline bool Claim::_internal_has_stream() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stream_ != nullptr);
  return value;
}
inline bool Claim::has_stream() const {
  return _internal_has_stream();
}
inline const ::legacy_pb::Stream& Claim::_internal_stream() const {
  const ::legacy_pb::Stream* p = stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::legacy_pb::Stream&>(
      ::legacy_pb::_Stream_default_instance_);
}
inline const ::legacy_pb::Stream& Claim::stream() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.stream)
  return _internal_stream();
}
inline void Claim::unsafe_arena_set_allocated_stream(
    ::legacy_pb::Stream* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  stream_ = stream;
  if (stream) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:legacy_pb.Claim.stream)
}
inline ::legacy_pb::Stream* Claim::release_stream() {
  _has_bits_[0] &= ~0x00000001u;
  ::legacy_pb::Stream* temp = stream_;
  stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::legacy_pb::Stream* Claim::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:legacy_pb.Claim.stream)
  _has_bits_[0] &= ~0x00000001u;
  ::legacy_pb::Stream* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::legacy_pb::Stream* Claim::_internal_mutable_stream() {
  _has_bits_[0] |= 0x00000001u;
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::legacy_pb::Stream>(GetArenaForAllocation());
    stream_ = p;
  }
  return stream_;
}
inline ::legacy_pb::Stream* Claim::mutable_stream() {
  ::legacy_pb::Stream* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Claim.stream)
  return _msg;
}
inline void Claim::set_allocated_stream(::legacy_pb::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream));
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Claim.stream)
}

// optional .legacy_pb.Certificate certificate = 4;
inline bool Claim::_internal_has_certificate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || certificate_ != nullptr);
  return value;
}
inline bool Claim::has_certificate() const {
  return _internal_has_certificate();
}
inline const ::legacy_pb::Certificate& Claim::_internal_certificate() const {
  const ::legacy_pb::Certificate* p = certificate_;
  return p != nullptr ? *p : reinterpret_cast<const ::legacy_pb::Certificate&>(
      ::legacy_pb::_Certificate_default_instance_);
}
inline const ::legacy_pb::Certificate& Claim::certificate() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.certificate)
  return _internal_certificate();
}
inline void Claim::unsafe_arena_set_allocated_certificate(
    ::legacy_pb::Certificate* certificate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(certificate_);
  }
  certificate_ = certificate;
  if (certificate) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:legacy_pb.Claim.certificate)
}
inline ::legacy_pb::Certificate* Claim::release_certificate() {
  _has_bits_[0] &= ~0x00000002u;
  ::legacy_pb::Certificate* temp = certificate_;
  certificate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::legacy_pb::Certificate* Claim::unsafe_arena_release_certificate() {
  // @@protoc_insertion_point(field_release:legacy_pb.Claim.certificate)
  _has_bits_[0] &= ~0x00000002u;
  ::legacy_pb::Certificate* temp = certificate_;
  certificate_ = nullptr;
  return temp;
}
inline ::legacy_pb::Certificate* Claim::_internal_mutable_certificate() {
  _has_bits_[0] |= 0x00000002u;
  if (certificate_ == nullptr) {
    auto* p = CreateMaybeMessage<::legacy_pb::Certificate>(GetArenaForAllocation());
    certificate_ = p;
  }
  return certificate_;
}
inline ::legacy_pb::Certificate* Claim::mutable_certificate() {
  ::legacy_pb::Certificate* _msg = _internal_mutable_certificate();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Claim.certificate)
  return _msg;
}
inline void Claim::set_allocated_certificate(::legacy_pb::Certificate* certificate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(certificate_);
  }
  if (certificate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(certificate));
    if (message_arena != submessage_arena) {
      certificate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, certificate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  certificate_ = certificate;
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Claim.certificate)
}

// optional .legacy_pb.Signature publisherSignature = 5;
inline bool Claim::_internal_has_publishersignature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || publishersignature_ != nullptr);
  return value;
}
inline bool Claim::has_publishersignature() const {
  return _internal_has_publishersignature();
}
inline const ::legacy_pb::Signature& Claim::_internal_publishersignature() const {
  const ::legacy_pb::Signature* p = publishersignature_;
  return p != nullptr ? *p : reinterpret_cast<const ::legacy_pb::Signature&>(
      ::legacy_pb::_Signature_default_instance_);
}
inline const ::legacy_pb::Signature& Claim::publishersignature() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Claim.publisherSignature)
  return _internal_publishersignature();
}
inline void Claim::unsafe_arena_set_allocated_publishersignature(
    ::legacy_pb::Signature* publishersignature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publishersignature_);
  }
  publishersignature_ = publishersignature;
  if (publishersignature) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:legacy_pb.Claim.publisherSignature)
}
inline ::legacy_pb::Signature* Claim::release_publishersignature() {
  _has_bits_[0] &= ~0x00000004u;
  ::legacy_pb::Signature* temp = publishersignature_;
  publishersignature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::legacy_pb::Signature* Claim::unsafe_arena_release_publishersignature() {
  // @@protoc_insertion_point(field_release:legacy_pb.Claim.publisherSignature)
  _has_bits_[0] &= ~0x00000004u;
  ::legacy_pb::Signature* temp = publishersignature_;
  publishersignature_ = nullptr;
  return temp;
}
inline ::legacy_pb::Signature* Claim::_internal_mutable_publishersignature() {
  _has_bits_[0] |= 0x00000004u;
  if (publishersignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::legacy_pb::Signature>(GetArenaForAllocation());
    publishersignature_ = p;
  }
  return publishersignature_;
}
inline ::legacy_pb::Signature* Claim::mutable_publishersignature() {
  ::legacy_pb::Signature* _msg = _internal_mutable_publishersignature();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Claim.publisherSignature)
  return _msg;
}
inline void Claim::set_allocated_publishersignature(::legacy_pb::Signature* publishersignature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(publishersignature_);
  }
  if (publishersignature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publishersignature));
    if (message_arena != submessage_arena) {
      publishersignature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publishersignature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  publishersignature_ = publishersignature;
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Claim.publisherSignature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace legacy_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::legacy_pb::Claim_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Claim_Version>() {
  return ::legacy_pb::Claim_Version_descriptor();
}
template <> struct is_proto_enum< ::legacy_pb::Claim_ClaimType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Claim_ClaimType>() {
  return ::legacy_pb::Claim_ClaimType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_legacy_5fclaim_2eproto
