// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: certificate.proto

#include "certificate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace legacy_pb {
PROTOBUF_CONSTEXPR Certificate::Certificate(
    ::_pbi::ConstantInitialized)
  : publickey_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(0)

  , keytype_(0)
{}
struct CertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertificateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertificateDefaultTypeInternal() {}
  union {
    Certificate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertificateDefaultTypeInternal _Certificate_default_instance_;
}  // namespace legacy_pb
static ::_pb::Metadata file_level_metadata_certificate_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_certificate_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_certificate_2eproto = nullptr;

const uint32_t TableStruct_certificate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Certificate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Certificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Certificate, version_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Certificate, keytype_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Certificate, publickey_),
  1,
  2,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::legacy_pb::Certificate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::legacy_pb::_Certificate_default_instance_._instance,
};

const char descriptor_table_protodef_certificate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021certificate.proto\022\tlegacy_pb\"\242\001\n\013Certi"
  "ficate\022/\n\007version\030\001 \002(\0162\036.legacy_pb.Cert"
  "ificate.Version\022#\n\007keyType\030\002 \002(\0162\022.legac"
  "y_pb.KeyType\022\021\n\tpublicKey\030\004 \002(\014\"*\n\007Versi"
  "on\022\023\n\017UNKNOWN_VERSION\020\000\022\n\n\006_0_0_1\020\001*Q\n\007K"
  "eyType\022\033\n\027UNKNOWN_PUBLIC_KEY_TYPE\020\000\022\014\n\010N"
  "IST256p\020\001\022\014\n\010NIST384p\020\002\022\r\n\tSECP256k1\020\003"
  ;
static ::_pbi::once_flag descriptor_table_certificate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_certificate_2eproto = {
    false, false, 278, descriptor_table_protodef_certificate_2eproto,
    "certificate.proto",
    &descriptor_table_certificate_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_certificate_2eproto::offsets,
    file_level_metadata_certificate_2eproto, file_level_enum_descriptors_certificate_2eproto,
    file_level_service_descriptors_certificate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_certificate_2eproto_getter() {
  return &descriptor_table_certificate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_certificate_2eproto(&descriptor_table_certificate_2eproto);
namespace legacy_pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Certificate_Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_certificate_2eproto);
  return file_level_enum_descriptors_certificate_2eproto[0];
}
bool Certificate_Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Certificate_Version Certificate::UNKNOWN_VERSION;
constexpr Certificate_Version Certificate::_0_0_1;
constexpr Certificate_Version Certificate::Version_MIN;
constexpr Certificate_Version Certificate::Version_MAX;
constexpr int Certificate::Version_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_certificate_2eproto);
  return file_level_enum_descriptors_certificate_2eproto[1];
}
bool KeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Certificate::_Internal {
 public:
  using HasBits = decltype(std::declval<Certificate>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keytype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_publickey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Certificate::Certificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:legacy_pb.Certificate)
}
Certificate::Certificate(const Certificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publickey()) {
    publickey_.Set(from._internal_publickey(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&keytype_) -
    reinterpret_cast<char*>(&version_)) + sizeof(keytype_));
  // @@protoc_insertion_point(copy_constructor:legacy_pb.Certificate)
}

inline void Certificate::SharedCtor() {
publickey_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  publickey_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keytype_) -
    reinterpret_cast<char*>(&version_)) + sizeof(keytype_));
}

Certificate::~Certificate() {
  // @@protoc_insertion_point(destructor:legacy_pb.Certificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Certificate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  publickey_.Destroy();
}

void Certificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Certificate::Clear() {
// @@protoc_insertion_point(message_clear_start:legacy_pb.Certificate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    publickey_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keytype_) -
        reinterpret_cast<char*>(&version_)) + sizeof(keytype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Certificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .legacy_pb.Certificate.Version version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::legacy_pb::Certificate_Version_IsValid(val))) {
            _internal_set_version(static_cast<::legacy_pb::Certificate_Version>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .legacy_pb.KeyType keyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::legacy_pb::KeyType_IsValid(val))) {
            _internal_set_keytype(static_cast<::legacy_pb::KeyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bytes publicKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Certificate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:legacy_pb.Certificate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .legacy_pb.Certificate.Version version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_version(), target);
  }

  // required .legacy_pb.KeyType keyType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_keytype(), target);
  }

  // required bytes publicKey = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_publickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:legacy_pb.Certificate)
  return target;
}

size_t Certificate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:legacy_pb.Certificate)
  size_t total_size = 0;

  if (_internal_has_publickey()) {
    // required bytes publicKey = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  if (_internal_has_version()) {
    // required .legacy_pb.Certificate.Version version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  if (_internal_has_keytype()) {
    // required .legacy_pb.KeyType keyType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_keytype());
  }

  return total_size;
}
size_t Certificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:legacy_pb.Certificate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes publicKey = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());

    // required .legacy_pb.Certificate.Version version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());

    // required .legacy_pb.KeyType keyType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_keytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Certificate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Certificate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Certificate::GetClassData() const { return &_class_data_; }

void Certificate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Certificate *>(to)->MergeFrom(
      static_cast<const Certificate &>(from));
}


void Certificate::MergeFrom(const Certificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:legacy_pb.Certificate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_publickey(from._internal_publickey());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      keytype_ = from.keytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Certificate::CopyFrom(const Certificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:legacy_pb.Certificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certificate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Certificate::InternalSwap(Certificate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &publickey_, lhs_arena,
      &other->publickey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Certificate, keytype_)
      + sizeof(Certificate::keytype_)
      - PROTOBUF_FIELD_OFFSET(Certificate, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Certificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_certificate_2eproto_getter, &descriptor_table_certificate_2eproto_once,
      file_level_metadata_certificate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace legacy_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::legacy_pb::Certificate*
Arena::CreateMaybeMessage< ::legacy_pb::Certificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::legacy_pb::Certificate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
