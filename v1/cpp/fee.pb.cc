// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fee.proto

#include "fee.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace legacy_pb {
PROTOBUF_CONSTEXPR Fee::Fee(
    ::_pbi::ConstantInitialized)
  : address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(0)

  , currency_(0)

  , amount_(0){}
struct FeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeeDefaultTypeInternal() {}
  union {
    Fee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeeDefaultTypeInternal _Fee_default_instance_;
}  // namespace legacy_pb
static ::_pb::Metadata file_level_metadata_fee_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_fee_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fee_2eproto = nullptr;

const uint32_t TableStruct_fee_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Fee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Fee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Fee, version_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Fee, currency_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Fee, address_),
  PROTOBUF_FIELD_OFFSET(::legacy_pb::Fee, amount_),
  1,
  2,
  0,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::legacy_pb::Fee)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::legacy_pb::_Fee_default_instance_._instance,
};

const char descriptor_table_protodef_fee_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tfee.proto\022\tlegacy_pb\"\343\001\n\003Fee\022\'\n\007versio"
  "n\030\001 \002(\0162\026.legacy_pb.Fee.Version\022)\n\010curre"
  "ncy\030\002 \002(\0162\027.legacy_pb.Fee.Currency\022\017\n\007ad"
  "dress\030\003 \002(\014\022\016\n\006amount\030\004 \002(\002\"*\n\007Version\022\023"
  "\n\017UNKNOWN_VERSION\020\000\022\n\n\006_0_0_1\020\001\";\n\010Curre"
  "ncy\022\024\n\020UNKNOWN_CURRENCY\020\000\022\007\n\003LBC\020\001\022\007\n\003BT"
  "C\020\002\022\007\n\003USD\020\003"
  ;
static ::_pbi::once_flag descriptor_table_fee_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fee_2eproto = {
    false, false, 252, descriptor_table_protodef_fee_2eproto,
    "fee.proto",
    &descriptor_table_fee_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_fee_2eproto::offsets,
    file_level_metadata_fee_2eproto, file_level_enum_descriptors_fee_2eproto,
    file_level_service_descriptors_fee_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fee_2eproto_getter() {
  return &descriptor_table_fee_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fee_2eproto(&descriptor_table_fee_2eproto);
namespace legacy_pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Fee_Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fee_2eproto);
  return file_level_enum_descriptors_fee_2eproto[0];
}
bool Fee_Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Fee_Version Fee::UNKNOWN_VERSION;
constexpr Fee_Version Fee::_0_0_1;
constexpr Fee_Version Fee::Version_MIN;
constexpr Fee_Version Fee::Version_MAX;
constexpr int Fee::Version_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Fee_Currency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fee_2eproto);
  return file_level_enum_descriptors_fee_2eproto[1];
}
bool Fee_Currency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Fee_Currency Fee::UNKNOWN_CURRENCY;
constexpr Fee_Currency Fee::LBC;
constexpr Fee_Currency Fee::BTC;
constexpr Fee_Currency Fee::USD;
constexpr Fee_Currency Fee::Currency_MIN;
constexpr Fee_Currency Fee::Currency_MAX;
constexpr int Fee::Currency_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Fee::_Internal {
 public:
  using HasBits = decltype(std::declval<Fee>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Fee::Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:legacy_pb.Fee)
}
Fee::Fee(const Fee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    address_.Set(from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&version_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:legacy_pb.Fee)
}

inline void Fee::SharedCtor() {
address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&version_)) + sizeof(amount_));
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:legacy_pb.Fee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.Destroy();
}

void Fee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:legacy_pb.Fee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&version_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .legacy_pb.Fee.Version version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::legacy_pb::Fee_Version_IsValid(val))) {
            _internal_set_version(static_cast<::legacy_pb::Fee_Version>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .legacy_pb.Fee.Currency currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::legacy_pb::Fee_Currency_IsValid(val))) {
            _internal_set_currency(static_cast<::legacy_pb::Fee_Currency>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bytes address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:legacy_pb.Fee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .legacy_pb.Fee.Version version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_version(), target);
  }

  // required .legacy_pb.Fee.Currency currency = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_currency(), target);
  }

  // required bytes address = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_address(), target);
  }

  // required float amount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:legacy_pb.Fee)
  return target;
}

size_t Fee::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:legacy_pb.Fee)
  size_t total_size = 0;

  if (_internal_has_address()) {
    // required bytes address = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (_internal_has_version()) {
    // required .legacy_pb.Fee.Version version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  if (_internal_has_currency()) {
    // required .legacy_pb.Fee.Currency currency = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_currency());
  }

  if (_internal_has_amount()) {
    // required float amount = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:legacy_pb.Fee)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes address = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());

    // required .legacy_pb.Fee.Version version = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());

    // required .legacy_pb.Fee.Currency currency = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_currency());

    // required float amount = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fee::GetClassData() const { return &_class_data_; }

void Fee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fee *>(to)->MergeFrom(
      static_cast<const Fee &>(from));
}


void Fee::MergeFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:legacy_pb.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:legacy_pb.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Fee::InternalSwap(Fee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fee, amount_)
      + sizeof(Fee::amount_)
      - PROTOBUF_FIELD_OFFSET(Fee, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fee_2eproto_getter, &descriptor_table_fee_2eproto_once,
      file_level_metadata_fee_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace legacy_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::legacy_pb::Fee*
Arena::CreateMaybeMessage< ::legacy_pb::Fee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::legacy_pb::Fee >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
