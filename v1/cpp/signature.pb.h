// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_signature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_signature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "certificate.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_signature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_signature_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_signature_2eproto;
namespace legacy_pb {
class Signature;
struct SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
}  // namespace legacy_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::legacy_pb::Signature* Arena::CreateMaybeMessage<::legacy_pb::Signature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace legacy_pb {

enum Signature_Version : int {
  Signature_Version_UNKNOWN_VERSION = 0,
  Signature_Version__0_0_1 = 1
};
bool Signature_Version_IsValid(int value);
constexpr Signature_Version Signature_Version_Version_MIN = Signature_Version_UNKNOWN_VERSION;
constexpr Signature_Version Signature_Version_Version_MAX = Signature_Version__0_0_1;
constexpr int Signature_Version_Version_ARRAYSIZE = Signature_Version_Version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signature_Version_descriptor();
template<typename T>
inline const std::string& Signature_Version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Signature_Version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Signature_Version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Signature_Version_descriptor(), enum_t_value);
}
inline bool Signature_Version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Signature_Version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Signature_Version>(
    Signature_Version_descriptor(), name, value);
}
// ===================================================================

class Signature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:legacy_pb.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  ~Signature() override;
  explicit PROTOBUF_CONSTEXPR Signature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Signature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "legacy_pb.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Signature_Version Version;
  static constexpr Version UNKNOWN_VERSION =
    Signature_Version_UNKNOWN_VERSION;
  static constexpr Version _0_0_1 =
    Signature_Version__0_0_1;
  static inline bool Version_IsValid(int value) {
    return Signature_Version_IsValid(value);
  }
  static constexpr Version Version_MIN =
    Signature_Version_Version_MIN;
  static constexpr Version Version_MAX =
    Signature_Version_Version_MAX;
  static constexpr int Version_ARRAYSIZE =
    Signature_Version_Version_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Version_descriptor() {
    return Signature_Version_descriptor();
  }
  template<typename T>
  static inline const std::string& Version_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Version>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Version_Name.");
    return Signature_Version_Name(enum_t_value);
  }
  static inline bool Version_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Version* value) {
    return Signature_Version_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 3,
    kCertificateIdFieldNumber = 4,
    kVersionFieldNumber = 1,
    kSignatureTypeFieldNumber = 2,
  };
  // required bytes signature = 3;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // required bytes certificateId = 4;
  bool has_certificateid() const;
  private:
  bool _internal_has_certificateid() const;
  public:
  void clear_certificateid();
  const std::string& certificateid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_certificateid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_certificateid();
  PROTOBUF_NODISCARD std::string* release_certificateid();
  void set_allocated_certificateid(std::string* certificateid);
  private:
  const std::string& _internal_certificateid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_certificateid(const std::string& value);
  std::string* _internal_mutable_certificateid();
  public:

  // required .legacy_pb.Signature.Version version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::legacy_pb::Signature_Version version() const;
  void set_version(::legacy_pb::Signature_Version value);
  private:
  ::legacy_pb::Signature_Version _internal_version() const;
  void _internal_set_version(::legacy_pb::Signature_Version value);
  public:

  // required .legacy_pb.KeyType signatureType = 2;
  bool has_signaturetype() const;
  private:
  bool _internal_has_signaturetype() const;
  public:
  void clear_signaturetype();
  ::legacy_pb::KeyType signaturetype() const;
  void set_signaturetype(::legacy_pb::KeyType value);
  private:
  ::legacy_pb::KeyType _internal_signaturetype() const;
  void _internal_set_signaturetype(::legacy_pb::KeyType value);
  public:

  // @@protoc_insertion_point(class_scope:legacy_pb.Signature)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certificateid_;
  int version_;
  int signaturetype_;
  friend struct ::TableStruct_signature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signature

// required .legacy_pb.Signature.Version version = 1;
inline bool Signature::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Signature::has_version() const {
  return _internal_has_version();
}
inline void Signature::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::legacy_pb::Signature_Version Signature::_internal_version() const {
  return static_cast< ::legacy_pb::Signature_Version >(version_);
}
inline ::legacy_pb::Signature_Version Signature::version() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Signature.version)
  return _internal_version();
}
inline void Signature::_internal_set_version(::legacy_pb::Signature_Version value) {
  assert(::legacy_pb::Signature_Version_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void Signature::set_version(::legacy_pb::Signature_Version value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Signature.version)
}

// required .legacy_pb.KeyType signatureType = 2;
inline bool Signature::_internal_has_signaturetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Signature::has_signaturetype() const {
  return _internal_has_signaturetype();
}
inline void Signature::clear_signaturetype() {
  signaturetype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::legacy_pb::KeyType Signature::_internal_signaturetype() const {
  return static_cast< ::legacy_pb::KeyType >(signaturetype_);
}
inline ::legacy_pb::KeyType Signature::signaturetype() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Signature.signatureType)
  return _internal_signaturetype();
}
inline void Signature::_internal_set_signaturetype(::legacy_pb::KeyType value) {
  assert(::legacy_pb::KeyType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  signaturetype_ = value;
}
inline void Signature::set_signaturetype(::legacy_pb::KeyType value) {
  _internal_set_signaturetype(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Signature.signatureType)
}

// required bytes signature = 3;
inline bool Signature::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Signature::has_signature() const {
  return _internal_has_signature();
}
inline void Signature::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Signature.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Signature.signature)
}
inline std::string* Signature::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Signature.signature)
  return _s;
}
inline const std::string& Signature::_internal_signature() const {
  return signature_.Get();
}
inline void Signature::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  return signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:legacy_pb.Signature.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault()) {
    signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault()) {
    signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Signature.signature)
}

// required bytes certificateId = 4;
inline bool Signature::_internal_has_certificateid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Signature::has_certificateid() const {
  return _internal_has_certificateid();
}
inline void Signature::clear_certificateid() {
  certificateid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Signature::certificateid() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Signature.certificateId)
  return _internal_certificateid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_certificateid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 certificateid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Signature.certificateId)
}
inline std::string* Signature::mutable_certificateid() {
  std::string* _s = _internal_mutable_certificateid();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Signature.certificateId)
  return _s;
}
inline const std::string& Signature::_internal_certificateid() const {
  return certificateid_.Get();
}
inline void Signature::_internal_set_certificateid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  certificateid_.Set(value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_certificateid() {
  _has_bits_[0] |= 0x00000002u;
  return certificateid_.Mutable(GetArenaForAllocation());
}
inline std::string* Signature::release_certificateid() {
  // @@protoc_insertion_point(field_release:legacy_pb.Signature.certificateId)
  if (!_internal_has_certificateid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = certificateid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (certificateid_.IsDefault()) {
    certificateid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Signature::set_allocated_certificateid(std::string* certificateid) {
  if (certificateid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  certificateid_.SetAllocated(certificateid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (certificateid_.IsDefault()) {
    certificateid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Signature.certificateId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace legacy_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::legacy_pb::Signature_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Signature_Version>() {
  return ::legacy_pb::Signature_Version_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_signature_2eproto
