// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fee_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fee_2eproto;
namespace legacy_pb {
class Fee;
struct FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
}  // namespace legacy_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::legacy_pb::Fee* Arena::CreateMaybeMessage<::legacy_pb::Fee>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace legacy_pb {

enum Fee_Version : int {
  Fee_Version_UNKNOWN_VERSION = 0,
  Fee_Version__0_0_1 = 1
};
bool Fee_Version_IsValid(int value);
constexpr Fee_Version Fee_Version_Version_MIN = Fee_Version_UNKNOWN_VERSION;
constexpr Fee_Version Fee_Version_Version_MAX = Fee_Version__0_0_1;
constexpr int Fee_Version_Version_ARRAYSIZE = Fee_Version_Version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Fee_Version_descriptor();
template<typename T>
inline const std::string& Fee_Version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Fee_Version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Fee_Version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Fee_Version_descriptor(), enum_t_value);
}
inline bool Fee_Version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Fee_Version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Fee_Version>(
    Fee_Version_descriptor(), name, value);
}
enum Fee_Currency : int {
  Fee_Currency_UNKNOWN_CURRENCY = 0,
  Fee_Currency_LBC = 1,
  Fee_Currency_BTC = 2,
  Fee_Currency_USD = 3
};
bool Fee_Currency_IsValid(int value);
constexpr Fee_Currency Fee_Currency_Currency_MIN = Fee_Currency_UNKNOWN_CURRENCY;
constexpr Fee_Currency Fee_Currency_Currency_MAX = Fee_Currency_USD;
constexpr int Fee_Currency_Currency_ARRAYSIZE = Fee_Currency_Currency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Fee_Currency_descriptor();
template<typename T>
inline const std::string& Fee_Currency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Fee_Currency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Fee_Currency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Fee_Currency_descriptor(), enum_t_value);
}
inline bool Fee_Currency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Fee_Currency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Fee_Currency>(
    Fee_Currency_descriptor(), name, value);
}
// ===================================================================

class Fee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:legacy_pb.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  ~Fee() override;
  explicit PROTOBUF_CONSTEXPR Fee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }
  inline void Swap(Fee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fee& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "legacy_pb.Fee";
  }
  protected:
  explicit Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Fee_Version Version;
  static constexpr Version UNKNOWN_VERSION =
    Fee_Version_UNKNOWN_VERSION;
  static constexpr Version _0_0_1 =
    Fee_Version__0_0_1;
  static inline bool Version_IsValid(int value) {
    return Fee_Version_IsValid(value);
  }
  static constexpr Version Version_MIN =
    Fee_Version_Version_MIN;
  static constexpr Version Version_MAX =
    Fee_Version_Version_MAX;
  static constexpr int Version_ARRAYSIZE =
    Fee_Version_Version_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Version_descriptor() {
    return Fee_Version_descriptor();
  }
  template<typename T>
  static inline const std::string& Version_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Version>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Version_Name.");
    return Fee_Version_Name(enum_t_value);
  }
  static inline bool Version_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Version* value) {
    return Fee_Version_Parse(name, value);
  }

  typedef Fee_Currency Currency;
  static constexpr Currency UNKNOWN_CURRENCY =
    Fee_Currency_UNKNOWN_CURRENCY;
  static constexpr Currency LBC =
    Fee_Currency_LBC;
  static constexpr Currency BTC =
    Fee_Currency_BTC;
  static constexpr Currency USD =
    Fee_Currency_USD;
  static inline bool Currency_IsValid(int value) {
    return Fee_Currency_IsValid(value);
  }
  static constexpr Currency Currency_MIN =
    Fee_Currency_Currency_MIN;
  static constexpr Currency Currency_MAX =
    Fee_Currency_Currency_MAX;
  static constexpr int Currency_ARRAYSIZE =
    Fee_Currency_Currency_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Currency_descriptor() {
    return Fee_Currency_descriptor();
  }
  template<typename T>
  static inline const std::string& Currency_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Currency>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Currency_Name.");
    return Fee_Currency_Name(enum_t_value);
  }
  static inline bool Currency_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Currency* value) {
    return Fee_Currency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kVersionFieldNumber = 1,
    kCurrencyFieldNumber = 2,
    kAmountFieldNumber = 4,
  };
  // required bytes address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required .legacy_pb.Fee.Version version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::legacy_pb::Fee_Version version() const;
  void set_version(::legacy_pb::Fee_Version value);
  private:
  ::legacy_pb::Fee_Version _internal_version() const;
  void _internal_set_version(::legacy_pb::Fee_Version value);
  public:

  // required .legacy_pb.Fee.Currency currency = 2;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  ::legacy_pb::Fee_Currency currency() const;
  void set_currency(::legacy_pb::Fee_Currency value);
  private:
  ::legacy_pb::Fee_Currency _internal_currency() const;
  void _internal_set_currency(::legacy_pb::Fee_Currency value);
  public:

  // required float amount = 4;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:legacy_pb.Fee)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  int version_;
  int currency_;
  float amount_;
  friend struct ::TableStruct_fee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fee

// required .legacy_pb.Fee.Version version = 1;
inline bool Fee::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Fee::has_version() const {
  return _internal_has_version();
}
inline void Fee::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::legacy_pb::Fee_Version Fee::_internal_version() const {
  return static_cast< ::legacy_pb::Fee_Version >(version_);
}
inline ::legacy_pb::Fee_Version Fee::version() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Fee.version)
  return _internal_version();
}
inline void Fee::_internal_set_version(::legacy_pb::Fee_Version value) {
  assert(::legacy_pb::Fee_Version_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void Fee::set_version(::legacy_pb::Fee_Version value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Fee.version)
}

// required .legacy_pb.Fee.Currency currency = 2;
inline bool Fee::_internal_has_currency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Fee::has_currency() const {
  return _internal_has_currency();
}
inline void Fee::clear_currency() {
  currency_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::legacy_pb::Fee_Currency Fee::_internal_currency() const {
  return static_cast< ::legacy_pb::Fee_Currency >(currency_);
}
inline ::legacy_pb::Fee_Currency Fee::currency() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Fee.currency)
  return _internal_currency();
}
inline void Fee::_internal_set_currency(::legacy_pb::Fee_Currency value) {
  assert(::legacy_pb::Fee_Currency_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  currency_ = value;
}
inline void Fee::set_currency(::legacy_pb::Fee_Currency value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Fee.currency)
}

// required bytes address = 3;
inline bool Fee::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fee::has_address() const {
  return _internal_has_address();
}
inline void Fee::clear_address() {
  address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Fee::address() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Fee.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fee::set_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 address_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Fee.address)
}
inline std::string* Fee::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Fee.address)
  return _s;
}
inline const std::string& Fee::_internal_address() const {
  return address_.Get();
}
inline void Fee::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(value, GetArenaForAllocation());
}
inline std::string* Fee::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.Mutable(GetArenaForAllocation());
}
inline std::string* Fee::release_address() {
  // @@protoc_insertion_point(field_release:legacy_pb.Fee.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault()) {
    address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Fee::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault()) {
    address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Fee.address)
}

// required float amount = 4;
inline bool Fee::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Fee::has_amount() const {
  return _internal_has_amount();
}
inline void Fee::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Fee::_internal_amount() const {
  return amount_;
}
inline float Fee::amount() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Fee.amount)
  return _internal_amount();
}
inline void Fee::_internal_set_amount(float value) {
  _has_bits_[0] |= 0x00000008u;
  amount_ = value;
}
inline void Fee::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Fee.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace legacy_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::legacy_pb::Fee_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Fee_Version>() {
  return ::legacy_pb::Fee_Version_descriptor();
}
template <> struct is_proto_enum< ::legacy_pb::Fee_Currency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Fee_Currency>() {
  return ::legacy_pb::Fee_Currency_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fee_2eproto
