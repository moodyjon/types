// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fee.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metadata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metadata_2eproto;
namespace legacy_pb {
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace legacy_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::legacy_pb::Metadata* Arena::CreateMaybeMessage<::legacy_pb::Metadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace legacy_pb {

enum Metadata_Version : int {
  Metadata_Version_UNKNOWN_VERSION = 0,
  Metadata_Version__0_0_1 = 1,
  Metadata_Version__0_0_2 = 2,
  Metadata_Version__0_0_3 = 3,
  Metadata_Version__0_1_0 = 4
};
bool Metadata_Version_IsValid(int value);
constexpr Metadata_Version Metadata_Version_Version_MIN = Metadata_Version_UNKNOWN_VERSION;
constexpr Metadata_Version Metadata_Version_Version_MAX = Metadata_Version__0_1_0;
constexpr int Metadata_Version_Version_ARRAYSIZE = Metadata_Version_Version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metadata_Version_descriptor();
template<typename T>
inline const std::string& Metadata_Version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Metadata_Version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Metadata_Version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Metadata_Version_descriptor(), enum_t_value);
}
inline bool Metadata_Version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Metadata_Version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Metadata_Version>(
    Metadata_Version_descriptor(), name, value);
}
enum Metadata_Language : int {
  Metadata_Language_UNKNOWN_LANGUAGE = 0,
  Metadata_Language_en = 1,
  Metadata_Language_aa = 2,
  Metadata_Language_ab = 3,
  Metadata_Language_ae = 4,
  Metadata_Language_af = 5,
  Metadata_Language_ak = 6,
  Metadata_Language_am = 7,
  Metadata_Language_an = 8,
  Metadata_Language_ar = 9,
  Metadata_Language_as = 10,
  Metadata_Language_av = 11,
  Metadata_Language_ay = 12,
  Metadata_Language_az = 13,
  Metadata_Language_ba = 14,
  Metadata_Language_be = 15,
  Metadata_Language_bg = 16,
  Metadata_Language_bh = 17,
  Metadata_Language_bi = 18,
  Metadata_Language_bm = 19,
  Metadata_Language_bn = 20,
  Metadata_Language_bo = 21,
  Metadata_Language_br = 22,
  Metadata_Language_bs = 23,
  Metadata_Language_ca = 24,
  Metadata_Language_ce = 25,
  Metadata_Language_ch = 26,
  Metadata_Language_co = 27,
  Metadata_Language_cr = 28,
  Metadata_Language_cs = 29,
  Metadata_Language_cu = 30,
  Metadata_Language_cv = 31,
  Metadata_Language_cy = 32,
  Metadata_Language_da = 33,
  Metadata_Language_de = 34,
  Metadata_Language_dv = 35,
  Metadata_Language_dz = 36,
  Metadata_Language_ee = 37,
  Metadata_Language_el = 38,
  Metadata_Language_eo = 39,
  Metadata_Language_es = 40,
  Metadata_Language_et = 41,
  Metadata_Language_eu = 42,
  Metadata_Language_fa = 43,
  Metadata_Language_ff = 44,
  Metadata_Language_fi = 45,
  Metadata_Language_fj = 46,
  Metadata_Language_fo = 47,
  Metadata_Language_fr = 48,
  Metadata_Language_fy = 49,
  Metadata_Language_ga = 50,
  Metadata_Language_gd = 51,
  Metadata_Language_gl = 52,
  Metadata_Language_gn = 53,
  Metadata_Language_gu = 54,
  Metadata_Language_gv = 55,
  Metadata_Language_ha = 56,
  Metadata_Language_he = 57,
  Metadata_Language_hi = 58,
  Metadata_Language_ho = 59,
  Metadata_Language_hr = 60,
  Metadata_Language_ht = 61,
  Metadata_Language_hu = 62,
  Metadata_Language_hy = 63,
  Metadata_Language_hz = 64,
  Metadata_Language_ia = 65,
  Metadata_Language_id = 66,
  Metadata_Language_ie = 67,
  Metadata_Language_ig = 68,
  Metadata_Language_ii = 69,
  Metadata_Language_ik = 70,
  Metadata_Language_io = 71,
  Metadata_Language_is = 72,
  Metadata_Language_it = 73,
  Metadata_Language_iu = 74,
  Metadata_Language_ja = 75,
  Metadata_Language_jv = 76,
  Metadata_Language_ka = 77,
  Metadata_Language_kg = 78,
  Metadata_Language_ki = 79,
  Metadata_Language_kj = 80,
  Metadata_Language_kk = 81,
  Metadata_Language_kl = 82,
  Metadata_Language_km = 83,
  Metadata_Language_kn = 84,
  Metadata_Language_ko = 85,
  Metadata_Language_kr = 86,
  Metadata_Language_ks = 87,
  Metadata_Language_ku = 88,
  Metadata_Language_kv = 89,
  Metadata_Language_kw = 90,
  Metadata_Language_ky = 91,
  Metadata_Language_la = 92,
  Metadata_Language_lb = 93,
  Metadata_Language_lg = 94,
  Metadata_Language_li = 95,
  Metadata_Language_ln = 96,
  Metadata_Language_lo = 97,
  Metadata_Language_lt = 98,
  Metadata_Language_lu = 99,
  Metadata_Language_lv = 100,
  Metadata_Language_mg = 101,
  Metadata_Language_mh = 102,
  Metadata_Language_mi = 103,
  Metadata_Language_mk = 104,
  Metadata_Language_ml = 105,
  Metadata_Language_mn = 106,
  Metadata_Language_mr = 107,
  Metadata_Language_ms = 108,
  Metadata_Language_mt = 109,
  Metadata_Language_my = 110,
  Metadata_Language_na = 111,
  Metadata_Language_nb = 112,
  Metadata_Language_nd = 113,
  Metadata_Language_ne = 114,
  Metadata_Language_ng = 115,
  Metadata_Language_nl = 116,
  Metadata_Language_nn = 117,
  Metadata_Language_no = 118,
  Metadata_Language_nr = 119,
  Metadata_Language_nv = 120,
  Metadata_Language_ny = 121,
  Metadata_Language_oc = 122,
  Metadata_Language_oj = 123,
  Metadata_Language_om = 124,
  Metadata_Language_or_ = 125,
  Metadata_Language_os = 126,
  Metadata_Language_pa = 127,
  Metadata_Language_pi = 128,
  Metadata_Language_pl = 129,
  Metadata_Language_ps = 130,
  Metadata_Language_pt = 131,
  Metadata_Language_qu = 132,
  Metadata_Language_rm = 133,
  Metadata_Language_rn = 134,
  Metadata_Language_ro = 135,
  Metadata_Language_ru = 136,
  Metadata_Language_rw = 137,
  Metadata_Language_sa = 138,
  Metadata_Language_sc = 139,
  Metadata_Language_sd = 140,
  Metadata_Language_se = 141,
  Metadata_Language_sg = 142,
  Metadata_Language_si = 143,
  Metadata_Language_sk = 144,
  Metadata_Language_sl = 145,
  Metadata_Language_sm = 146,
  Metadata_Language_sn = 147,
  Metadata_Language_so = 148,
  Metadata_Language_sq = 149,
  Metadata_Language_sr = 150,
  Metadata_Language_ss = 151,
  Metadata_Language_st = 152,
  Metadata_Language_su = 153,
  Metadata_Language_sv = 154,
  Metadata_Language_sw = 155,
  Metadata_Language_ta = 156,
  Metadata_Language_te = 157,
  Metadata_Language_tg = 158,
  Metadata_Language_th = 159,
  Metadata_Language_ti = 160,
  Metadata_Language_tk = 161,
  Metadata_Language_tl = 162,
  Metadata_Language_tn = 163,
  Metadata_Language_to = 164,
  Metadata_Language_tr = 165,
  Metadata_Language_ts = 166,
  Metadata_Language_tt = 167,
  Metadata_Language_tw = 168,
  Metadata_Language_ty = 169,
  Metadata_Language_ug = 170,
  Metadata_Language_uk = 171,
  Metadata_Language_ur = 172,
  Metadata_Language_uz = 173,
  Metadata_Language_ve = 174,
  Metadata_Language_vi = 175,
  Metadata_Language_vo = 176,
  Metadata_Language_wa = 177,
  Metadata_Language_wo = 178,
  Metadata_Language_xh = 179,
  Metadata_Language_yi = 180,
  Metadata_Language_yo = 181,
  Metadata_Language_za = 182,
  Metadata_Language_zh = 183,
  Metadata_Language_zu = 184
};
bool Metadata_Language_IsValid(int value);
constexpr Metadata_Language Metadata_Language_Language_MIN = Metadata_Language_UNKNOWN_LANGUAGE;
constexpr Metadata_Language Metadata_Language_Language_MAX = Metadata_Language_zu;
constexpr int Metadata_Language_Language_ARRAYSIZE = Metadata_Language_Language_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metadata_Language_descriptor();
template<typename T>
inline const std::string& Metadata_Language_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Metadata_Language>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Metadata_Language_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Metadata_Language_descriptor(), enum_t_value);
}
inline bool Metadata_Language_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Metadata_Language* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Metadata_Language>(
    Metadata_Language_descriptor(), name, value);
}
// ===================================================================

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:legacy_pb.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "legacy_pb.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Metadata_Version Version;
  static constexpr Version UNKNOWN_VERSION =
    Metadata_Version_UNKNOWN_VERSION;
  static constexpr Version _0_0_1 =
    Metadata_Version__0_0_1;
  static constexpr Version _0_0_2 =
    Metadata_Version__0_0_2;
  static constexpr Version _0_0_3 =
    Metadata_Version__0_0_3;
  static constexpr Version _0_1_0 =
    Metadata_Version__0_1_0;
  static inline bool Version_IsValid(int value) {
    return Metadata_Version_IsValid(value);
  }
  static constexpr Version Version_MIN =
    Metadata_Version_Version_MIN;
  static constexpr Version Version_MAX =
    Metadata_Version_Version_MAX;
  static constexpr int Version_ARRAYSIZE =
    Metadata_Version_Version_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Version_descriptor() {
    return Metadata_Version_descriptor();
  }
  template<typename T>
  static inline const std::string& Version_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Version>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Version_Name.");
    return Metadata_Version_Name(enum_t_value);
  }
  static inline bool Version_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Version* value) {
    return Metadata_Version_Parse(name, value);
  }

  typedef Metadata_Language Language;
  static constexpr Language UNKNOWN_LANGUAGE =
    Metadata_Language_UNKNOWN_LANGUAGE;
  static constexpr Language en =
    Metadata_Language_en;
  static constexpr Language aa =
    Metadata_Language_aa;
  static constexpr Language ab =
    Metadata_Language_ab;
  static constexpr Language ae =
    Metadata_Language_ae;
  static constexpr Language af =
    Metadata_Language_af;
  static constexpr Language ak =
    Metadata_Language_ak;
  static constexpr Language am =
    Metadata_Language_am;
  static constexpr Language an =
    Metadata_Language_an;
  static constexpr Language ar =
    Metadata_Language_ar;
  static constexpr Language as =
    Metadata_Language_as;
  static constexpr Language av =
    Metadata_Language_av;
  static constexpr Language ay =
    Metadata_Language_ay;
  static constexpr Language az =
    Metadata_Language_az;
  static constexpr Language ba =
    Metadata_Language_ba;
  static constexpr Language be =
    Metadata_Language_be;
  static constexpr Language bg =
    Metadata_Language_bg;
  static constexpr Language bh =
    Metadata_Language_bh;
  static constexpr Language bi =
    Metadata_Language_bi;
  static constexpr Language bm =
    Metadata_Language_bm;
  static constexpr Language bn =
    Metadata_Language_bn;
  static constexpr Language bo =
    Metadata_Language_bo;
  static constexpr Language br =
    Metadata_Language_br;
  static constexpr Language bs =
    Metadata_Language_bs;
  static constexpr Language ca =
    Metadata_Language_ca;
  static constexpr Language ce =
    Metadata_Language_ce;
  static constexpr Language ch =
    Metadata_Language_ch;
  static constexpr Language co =
    Metadata_Language_co;
  static constexpr Language cr =
    Metadata_Language_cr;
  static constexpr Language cs =
    Metadata_Language_cs;
  static constexpr Language cu =
    Metadata_Language_cu;
  static constexpr Language cv =
    Metadata_Language_cv;
  static constexpr Language cy =
    Metadata_Language_cy;
  static constexpr Language da =
    Metadata_Language_da;
  static constexpr Language de =
    Metadata_Language_de;
  static constexpr Language dv =
    Metadata_Language_dv;
  static constexpr Language dz =
    Metadata_Language_dz;
  static constexpr Language ee =
    Metadata_Language_ee;
  static constexpr Language el =
    Metadata_Language_el;
  static constexpr Language eo =
    Metadata_Language_eo;
  static constexpr Language es =
    Metadata_Language_es;
  static constexpr Language et =
    Metadata_Language_et;
  static constexpr Language eu =
    Metadata_Language_eu;
  static constexpr Language fa =
    Metadata_Language_fa;
  static constexpr Language ff =
    Metadata_Language_ff;
  static constexpr Language fi =
    Metadata_Language_fi;
  static constexpr Language fj =
    Metadata_Language_fj;
  static constexpr Language fo =
    Metadata_Language_fo;
  static constexpr Language fr =
    Metadata_Language_fr;
  static constexpr Language fy =
    Metadata_Language_fy;
  static constexpr Language ga =
    Metadata_Language_ga;
  static constexpr Language gd =
    Metadata_Language_gd;
  static constexpr Language gl =
    Metadata_Language_gl;
  static constexpr Language gn =
    Metadata_Language_gn;
  static constexpr Language gu =
    Metadata_Language_gu;
  static constexpr Language gv =
    Metadata_Language_gv;
  static constexpr Language ha =
    Metadata_Language_ha;
  static constexpr Language he =
    Metadata_Language_he;
  static constexpr Language hi =
    Metadata_Language_hi;
  static constexpr Language ho =
    Metadata_Language_ho;
  static constexpr Language hr =
    Metadata_Language_hr;
  static constexpr Language ht =
    Metadata_Language_ht;
  static constexpr Language hu =
    Metadata_Language_hu;
  static constexpr Language hy =
    Metadata_Language_hy;
  static constexpr Language hz =
    Metadata_Language_hz;
  static constexpr Language ia =
    Metadata_Language_ia;
  static constexpr Language id =
    Metadata_Language_id;
  static constexpr Language ie =
    Metadata_Language_ie;
  static constexpr Language ig =
    Metadata_Language_ig;
  static constexpr Language ii =
    Metadata_Language_ii;
  static constexpr Language ik =
    Metadata_Language_ik;
  static constexpr Language io =
    Metadata_Language_io;
  static constexpr Language is =
    Metadata_Language_is;
  static constexpr Language it =
    Metadata_Language_it;
  static constexpr Language iu =
    Metadata_Language_iu;
  static constexpr Language ja =
    Metadata_Language_ja;
  static constexpr Language jv =
    Metadata_Language_jv;
  static constexpr Language ka =
    Metadata_Language_ka;
  static constexpr Language kg =
    Metadata_Language_kg;
  static constexpr Language ki =
    Metadata_Language_ki;
  static constexpr Language kj =
    Metadata_Language_kj;
  static constexpr Language kk =
    Metadata_Language_kk;
  static constexpr Language kl =
    Metadata_Language_kl;
  static constexpr Language km =
    Metadata_Language_km;
  static constexpr Language kn =
    Metadata_Language_kn;
  static constexpr Language ko =
    Metadata_Language_ko;
  static constexpr Language kr =
    Metadata_Language_kr;
  static constexpr Language ks =
    Metadata_Language_ks;
  static constexpr Language ku =
    Metadata_Language_ku;
  static constexpr Language kv =
    Metadata_Language_kv;
  static constexpr Language kw =
    Metadata_Language_kw;
  static constexpr Language ky =
    Metadata_Language_ky;
  static constexpr Language la =
    Metadata_Language_la;
  static constexpr Language lb =
    Metadata_Language_lb;
  static constexpr Language lg =
    Metadata_Language_lg;
  static constexpr Language li =
    Metadata_Language_li;
  static constexpr Language ln =
    Metadata_Language_ln;
  static constexpr Language lo =
    Metadata_Language_lo;
  static constexpr Language lt =
    Metadata_Language_lt;
  static constexpr Language lu =
    Metadata_Language_lu;
  static constexpr Language lv =
    Metadata_Language_lv;
  static constexpr Language mg =
    Metadata_Language_mg;
  static constexpr Language mh =
    Metadata_Language_mh;
  static constexpr Language mi =
    Metadata_Language_mi;
  static constexpr Language mk =
    Metadata_Language_mk;
  static constexpr Language ml =
    Metadata_Language_ml;
  static constexpr Language mn =
    Metadata_Language_mn;
  static constexpr Language mr =
    Metadata_Language_mr;
  static constexpr Language ms =
    Metadata_Language_ms;
  static constexpr Language mt =
    Metadata_Language_mt;
  static constexpr Language my =
    Metadata_Language_my;
  static constexpr Language na =
    Metadata_Language_na;
  static constexpr Language nb =
    Metadata_Language_nb;
  static constexpr Language nd =
    Metadata_Language_nd;
  static constexpr Language ne =
    Metadata_Language_ne;
  static constexpr Language ng =
    Metadata_Language_ng;
  static constexpr Language nl =
    Metadata_Language_nl;
  static constexpr Language nn =
    Metadata_Language_nn;
  static constexpr Language no =
    Metadata_Language_no;
  static constexpr Language nr =
    Metadata_Language_nr;
  static constexpr Language nv =
    Metadata_Language_nv;
  static constexpr Language ny =
    Metadata_Language_ny;
  static constexpr Language oc =
    Metadata_Language_oc;
  static constexpr Language oj =
    Metadata_Language_oj;
  static constexpr Language om =
    Metadata_Language_om;
  static constexpr Language or_ =
    Metadata_Language_or_;
  static constexpr Language os =
    Metadata_Language_os;
  static constexpr Language pa =
    Metadata_Language_pa;
  static constexpr Language pi =
    Metadata_Language_pi;
  static constexpr Language pl =
    Metadata_Language_pl;
  static constexpr Language ps =
    Metadata_Language_ps;
  static constexpr Language pt =
    Metadata_Language_pt;
  static constexpr Language qu =
    Metadata_Language_qu;
  static constexpr Language rm =
    Metadata_Language_rm;
  static constexpr Language rn =
    Metadata_Language_rn;
  static constexpr Language ro =
    Metadata_Language_ro;
  static constexpr Language ru =
    Metadata_Language_ru;
  static constexpr Language rw =
    Metadata_Language_rw;
  static constexpr Language sa =
    Metadata_Language_sa;
  static constexpr Language sc =
    Metadata_Language_sc;
  static constexpr Language sd =
    Metadata_Language_sd;
  static constexpr Language se =
    Metadata_Language_se;
  static constexpr Language sg =
    Metadata_Language_sg;
  static constexpr Language si =
    Metadata_Language_si;
  static constexpr Language sk =
    Metadata_Language_sk;
  static constexpr Language sl =
    Metadata_Language_sl;
  static constexpr Language sm =
    Metadata_Language_sm;
  static constexpr Language sn =
    Metadata_Language_sn;
  static constexpr Language so =
    Metadata_Language_so;
  static constexpr Language sq =
    Metadata_Language_sq;
  static constexpr Language sr =
    Metadata_Language_sr;
  static constexpr Language ss =
    Metadata_Language_ss;
  static constexpr Language st =
    Metadata_Language_st;
  static constexpr Language su =
    Metadata_Language_su;
  static constexpr Language sv =
    Metadata_Language_sv;
  static constexpr Language sw =
    Metadata_Language_sw;
  static constexpr Language ta =
    Metadata_Language_ta;
  static constexpr Language te =
    Metadata_Language_te;
  static constexpr Language tg =
    Metadata_Language_tg;
  static constexpr Language th =
    Metadata_Language_th;
  static constexpr Language ti =
    Metadata_Language_ti;
  static constexpr Language tk =
    Metadata_Language_tk;
  static constexpr Language tl =
    Metadata_Language_tl;
  static constexpr Language tn =
    Metadata_Language_tn;
  static constexpr Language to =
    Metadata_Language_to;
  static constexpr Language tr =
    Metadata_Language_tr;
  static constexpr Language ts =
    Metadata_Language_ts;
  static constexpr Language tt =
    Metadata_Language_tt;
  static constexpr Language tw =
    Metadata_Language_tw;
  static constexpr Language ty =
    Metadata_Language_ty;
  static constexpr Language ug =
    Metadata_Language_ug;
  static constexpr Language uk =
    Metadata_Language_uk;
  static constexpr Language ur =
    Metadata_Language_ur;
  static constexpr Language uz =
    Metadata_Language_uz;
  static constexpr Language ve =
    Metadata_Language_ve;
  static constexpr Language vi =
    Metadata_Language_vi;
  static constexpr Language vo =
    Metadata_Language_vo;
  static constexpr Language wa =
    Metadata_Language_wa;
  static constexpr Language wo =
    Metadata_Language_wo;
  static constexpr Language xh =
    Metadata_Language_xh;
  static constexpr Language yi =
    Metadata_Language_yi;
  static constexpr Language yo =
    Metadata_Language_yo;
  static constexpr Language za =
    Metadata_Language_za;
  static constexpr Language zh =
    Metadata_Language_zh;
  static constexpr Language zu =
    Metadata_Language_zu;
  static inline bool Language_IsValid(int value) {
    return Metadata_Language_IsValid(value);
  }
  static constexpr Language Language_MIN =
    Metadata_Language_Language_MIN;
  static constexpr Language Language_MAX =
    Metadata_Language_Language_MAX;
  static constexpr int Language_ARRAYSIZE =
    Metadata_Language_Language_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Language_descriptor() {
    return Metadata_Language_descriptor();
  }
  template<typename T>
  static inline const std::string& Language_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Language>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Language_Name.");
    return Metadata_Language_Name(enum_t_value);
  }
  static inline bool Language_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Language* value) {
    return Metadata_Language_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kAuthorFieldNumber = 5,
    kLicenseFieldNumber = 6,
    kThumbnailFieldNumber = 9,
    kPreviewFieldNumber = 10,
    kLicenseUrlFieldNumber = 11,
    kFeeFieldNumber = 8,
    kVersionFieldNumber = 1,
    kLanguageFieldNumber = 2,
    kNsfwFieldNumber = 7,
  };
  // required string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // required string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required string author = 5;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // required string license = 6;
  bool has_license() const;
  private:
  bool _internal_has_license() const;
  public:
  void clear_license();
  const std::string& license() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_license(ArgT0&& arg0, ArgT... args);
  std::string* mutable_license();
  PROTOBUF_NODISCARD std::string* release_license();
  void set_allocated_license(std::string* license);
  private:
  const std::string& _internal_license() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license(const std::string& value);
  std::string* _internal_mutable_license();
  public:

  // optional string thumbnail = 9;
  bool has_thumbnail() const;
  private:
  bool _internal_has_thumbnail() const;
  public:
  void clear_thumbnail();
  const std::string& thumbnail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail();
  PROTOBUF_NODISCARD std::string* release_thumbnail();
  void set_allocated_thumbnail(std::string* thumbnail);
  private:
  const std::string& _internal_thumbnail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail(const std::string& value);
  std::string* _internal_mutable_thumbnail();
  public:

  // optional string preview = 10;
  bool has_preview() const;
  private:
  bool _internal_has_preview() const;
  public:
  void clear_preview();
  const std::string& preview() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preview(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preview();
  PROTOBUF_NODISCARD std::string* release_preview();
  void set_allocated_preview(std::string* preview);
  private:
  const std::string& _internal_preview() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preview(const std::string& value);
  std::string* _internal_mutable_preview();
  public:

  // optional string licenseUrl = 11;
  bool has_licenseurl() const;
  private:
  bool _internal_has_licenseurl() const;
  public:
  void clear_licenseurl();
  const std::string& licenseurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_licenseurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_licenseurl();
  PROTOBUF_NODISCARD std::string* release_licenseurl();
  void set_allocated_licenseurl(std::string* licenseurl);
  private:
  const std::string& _internal_licenseurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_licenseurl(const std::string& value);
  std::string* _internal_mutable_licenseurl();
  public:

  // optional .legacy_pb.Fee fee = 8;
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::legacy_pb::Fee& fee() const;
  PROTOBUF_NODISCARD ::legacy_pb::Fee* release_fee();
  ::legacy_pb::Fee* mutable_fee();
  void set_allocated_fee(::legacy_pb::Fee* fee);
  private:
  const ::legacy_pb::Fee& _internal_fee() const;
  ::legacy_pb::Fee* _internal_mutable_fee();
  public:
  void unsafe_arena_set_allocated_fee(
      ::legacy_pb::Fee* fee);
  ::legacy_pb::Fee* unsafe_arena_release_fee();

  // required .legacy_pb.Metadata.Version version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::legacy_pb::Metadata_Version version() const;
  void set_version(::legacy_pb::Metadata_Version value);
  private:
  ::legacy_pb::Metadata_Version _internal_version() const;
  void _internal_set_version(::legacy_pb::Metadata_Version value);
  public:

  // required .legacy_pb.Metadata.Language language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::legacy_pb::Metadata_Language language() const;
  void set_language(::legacy_pb::Metadata_Language value);
  private:
  ::legacy_pb::Metadata_Language _internal_language() const;
  void _internal_set_language(::legacy_pb::Metadata_Language value);
  public:

  // required bool nsfw = 7;
  bool has_nsfw() const;
  private:
  bool _internal_has_nsfw() const;
  public:
  void clear_nsfw();
  bool nsfw() const;
  void set_nsfw(bool value);
  private:
  bool _internal_nsfw() const;
  void _internal_set_nsfw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:legacy_pb.Metadata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preview_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr licenseurl_;
  ::legacy_pb::Fee* fee_;
  int version_;
  int language_;
  bool nsfw_;
  friend struct ::TableStruct_metadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Metadata

// required .legacy_pb.Metadata.Version version = 1;
inline bool Metadata::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Metadata::has_version() const {
  return _internal_has_version();
}
inline void Metadata::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::legacy_pb::Metadata_Version Metadata::_internal_version() const {
  return static_cast< ::legacy_pb::Metadata_Version >(version_);
}
inline ::legacy_pb::Metadata_Version Metadata::version() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.version)
  return _internal_version();
}
inline void Metadata::_internal_set_version(::legacy_pb::Metadata_Version value) {
  assert(::legacy_pb::Metadata_Version_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  version_ = value;
}
inline void Metadata::set_version(::legacy_pb::Metadata_Version value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.version)
}

// required .legacy_pb.Metadata.Language language = 2;
inline bool Metadata::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Metadata::has_language() const {
  return _internal_has_language();
}
inline void Metadata::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::legacy_pb::Metadata_Language Metadata::_internal_language() const {
  return static_cast< ::legacy_pb::Metadata_Language >(language_);
}
inline ::legacy_pb::Metadata_Language Metadata::language() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.language)
  return _internal_language();
}
inline void Metadata::_internal_set_language(::legacy_pb::Metadata_Language value) {
  assert(::legacy_pb::Metadata_Language_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  language_ = value;
}
inline void Metadata::set_language(::legacy_pb::Metadata_Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.language)
}

// required string title = 3;
inline bool Metadata::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metadata::has_title() const {
  return _internal_has_title();
}
inline void Metadata::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metadata::title() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.title)
}
inline std::string* Metadata::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.title)
  return _s;
}
inline const std::string& Metadata::_internal_title() const {
  return title_.Get();
}
inline void Metadata::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_title() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.title)
}

// required string description = 4;
inline bool Metadata::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metadata::has_description() const {
  return _internal_has_description();
}
inline void Metadata::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Metadata::description() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.description)
}
inline std::string* Metadata::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.description)
  return _s;
}
inline const std::string& Metadata::_internal_description() const {
  return description_.Get();
}
inline void Metadata::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_description() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.description)
}

// required string author = 5;
inline bool Metadata::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Metadata::has_author() const {
  return _internal_has_author();
}
inline void Metadata::clear_author() {
  author_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Metadata::author() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_author(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.author)
}
inline std::string* Metadata::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.author)
  return _s;
}
inline const std::string& Metadata::_internal_author() const {
  return author_.Get();
}
inline void Metadata::_internal_set_author(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  author_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000004u;
  return author_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_author() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = author_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault()) {
    author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault()) {
    author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.author)
}

// required string license = 6;
inline bool Metadata::_internal_has_license() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Metadata::has_license() const {
  return _internal_has_license();
}
inline void Metadata::clear_license() {
  license_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Metadata::license() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.license)
  return _internal_license();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_license(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 license_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.license)
}
inline std::string* Metadata::mutable_license() {
  std::string* _s = _internal_mutable_license();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.license)
  return _s;
}
inline const std::string& Metadata::_internal_license() const {
  return license_.Get();
}
inline void Metadata::_internal_set_license(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  license_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_license() {
  _has_bits_[0] |= 0x00000008u;
  return license_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_license() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.license)
  if (!_internal_has_license()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = license_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (license_.IsDefault()) {
    license_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_license(std::string* license) {
  if (license != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  license_.SetAllocated(license, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (license_.IsDefault()) {
    license_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.license)
}

// required bool nsfw = 7;
inline bool Metadata::_internal_has_nsfw() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Metadata::has_nsfw() const {
  return _internal_has_nsfw();
}
inline void Metadata::clear_nsfw() {
  nsfw_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Metadata::_internal_nsfw() const {
  return nsfw_;
}
inline bool Metadata::nsfw() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.nsfw)
  return _internal_nsfw();
}
inline void Metadata::_internal_set_nsfw(bool value) {
  _has_bits_[0] |= 0x00000400u;
  nsfw_ = value;
}
inline void Metadata::set_nsfw(bool value) {
  _internal_set_nsfw(value);
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.nsfw)
}

// optional .legacy_pb.Fee fee = 8;
inline bool Metadata::_internal_has_fee() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || fee_ != nullptr);
  return value;
}
inline bool Metadata::has_fee() const {
  return _internal_has_fee();
}
inline const ::legacy_pb::Fee& Metadata::_internal_fee() const {
  const ::legacy_pb::Fee* p = fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::legacy_pb::Fee&>(
      ::legacy_pb::_Fee_default_instance_);
}
inline const ::legacy_pb::Fee& Metadata::fee() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.fee)
  return _internal_fee();
}
inline void Metadata::unsafe_arena_set_allocated_fee(
    ::legacy_pb::Fee* fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  fee_ = fee;
  if (fee) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:legacy_pb.Metadata.fee)
}
inline ::legacy_pb::Fee* Metadata::release_fee() {
  _has_bits_[0] &= ~0x00000080u;
  ::legacy_pb::Fee* temp = fee_;
  fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::legacy_pb::Fee* Metadata::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.fee)
  _has_bits_[0] &= ~0x00000080u;
  ::legacy_pb::Fee* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::legacy_pb::Fee* Metadata::_internal_mutable_fee() {
  _has_bits_[0] |= 0x00000080u;
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::legacy_pb::Fee>(GetArenaForAllocation());
    fee_ = p;
  }
  return fee_;
}
inline ::legacy_pb::Fee* Metadata::mutable_fee() {
  ::legacy_pb::Fee* _msg = _internal_mutable_fee();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.fee)
  return _msg;
}
inline void Metadata::set_allocated_fee(::legacy_pb::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee));
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.fee)
}

// optional string thumbnail = 9;
inline bool Metadata::_internal_has_thumbnail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Metadata::has_thumbnail() const {
  return _internal_has_thumbnail();
}
inline void Metadata::clear_thumbnail() {
  thumbnail_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Metadata::thumbnail() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.thumbnail)
  return _internal_thumbnail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_thumbnail(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 thumbnail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.thumbnail)
}
inline std::string* Metadata::mutable_thumbnail() {
  std::string* _s = _internal_mutable_thumbnail();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.thumbnail)
  return _s;
}
inline const std::string& Metadata::_internal_thumbnail() const {
  return thumbnail_.Get();
}
inline void Metadata::_internal_set_thumbnail(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  thumbnail_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_thumbnail() {
  _has_bits_[0] |= 0x00000010u;
  return thumbnail_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_thumbnail() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.thumbnail)
  if (!_internal_has_thumbnail()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = thumbnail_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_.IsDefault()) {
    thumbnail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_thumbnail(std::string* thumbnail) {
  if (thumbnail != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  thumbnail_.SetAllocated(thumbnail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_.IsDefault()) {
    thumbnail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.thumbnail)
}

// optional string preview = 10;
inline bool Metadata::_internal_has_preview() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Metadata::has_preview() const {
  return _internal_has_preview();
}
inline void Metadata::clear_preview() {
  preview_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Metadata::preview() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.preview)
  return _internal_preview();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_preview(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 preview_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.preview)
}
inline std::string* Metadata::mutable_preview() {
  std::string* _s = _internal_mutable_preview();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.preview)
  return _s;
}
inline const std::string& Metadata::_internal_preview() const {
  return preview_.Get();
}
inline void Metadata::_internal_set_preview(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  preview_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_preview() {
  _has_bits_[0] |= 0x00000020u;
  return preview_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_preview() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.preview)
  if (!_internal_has_preview()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = preview_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_.IsDefault()) {
    preview_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_preview(std::string* preview) {
  if (preview != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  preview_.SetAllocated(preview, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_.IsDefault()) {
    preview_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.preview)
}

// optional string licenseUrl = 11;
inline bool Metadata::_internal_has_licenseurl() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Metadata::has_licenseurl() const {
  return _internal_has_licenseurl();
}
inline void Metadata::clear_licenseurl() {
  licenseurl_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Metadata::licenseurl() const {
  // @@protoc_insertion_point(field_get:legacy_pb.Metadata.licenseUrl)
  return _internal_licenseurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_licenseurl(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 licenseurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:legacy_pb.Metadata.licenseUrl)
}
inline std::string* Metadata::mutable_licenseurl() {
  std::string* _s = _internal_mutable_licenseurl();
  // @@protoc_insertion_point(field_mutable:legacy_pb.Metadata.licenseUrl)
  return _s;
}
inline const std::string& Metadata::_internal_licenseurl() const {
  return licenseurl_.Get();
}
inline void Metadata::_internal_set_licenseurl(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  licenseurl_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_licenseurl() {
  _has_bits_[0] |= 0x00000040u;
  return licenseurl_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_licenseurl() {
  // @@protoc_insertion_point(field_release:legacy_pb.Metadata.licenseUrl)
  if (!_internal_has_licenseurl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = licenseurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (licenseurl_.IsDefault()) {
    licenseurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_licenseurl(std::string* licenseurl) {
  if (licenseurl != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  licenseurl_.SetAllocated(licenseurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (licenseurl_.IsDefault()) {
    licenseurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:legacy_pb.Metadata.licenseUrl)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace legacy_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::legacy_pb::Metadata_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Metadata_Version>() {
  return ::legacy_pb::Metadata_Version_descriptor();
}
template <> struct is_proto_enum< ::legacy_pb::Metadata_Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::legacy_pb::Metadata_Language>() {
  return ::legacy_pb::Metadata_Language_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto
