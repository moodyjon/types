// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: legacy_claim.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Claim_Version int32

const (
	Claim_UNKNOWN_VERSION Claim_Version = 0
	Claim__0_0_1          Claim_Version = 1
)

// Enum value maps for Claim_Version.
var (
	Claim_Version_name = map[int32]string{
		0: "UNKNOWN_VERSION",
		1: "_0_0_1",
	}
	Claim_Version_value = map[string]int32{
		"UNKNOWN_VERSION": 0,
		"_0_0_1":          1,
	}
)

func (x Claim_Version) Enum() *Claim_Version {
	p := new(Claim_Version)
	*p = x
	return p
}

func (x Claim_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Claim_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_legacy_claim_proto_enumTypes[0].Descriptor()
}

func (Claim_Version) Type() protoreflect.EnumType {
	return &file_legacy_claim_proto_enumTypes[0]
}

func (x Claim_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Claim_Version) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Claim_Version(num)
	return nil
}

// Deprecated: Use Claim_Version.Descriptor instead.
func (Claim_Version) EnumDescriptor() ([]byte, []int) {
	return file_legacy_claim_proto_rawDescGZIP(), []int{0, 0}
}

type Claim_ClaimType int32

const (
	Claim_UNKNOWN_CLAIM_TYPE Claim_ClaimType = 0
	Claim_streamType         Claim_ClaimType = 1
	Claim_certificateType    Claim_ClaimType = 2
)

// Enum value maps for Claim_ClaimType.
var (
	Claim_ClaimType_name = map[int32]string{
		0: "UNKNOWN_CLAIM_TYPE",
		1: "streamType",
		2: "certificateType",
	}
	Claim_ClaimType_value = map[string]int32{
		"UNKNOWN_CLAIM_TYPE": 0,
		"streamType":         1,
		"certificateType":    2,
	}
)

func (x Claim_ClaimType) Enum() *Claim_ClaimType {
	p := new(Claim_ClaimType)
	*p = x
	return p
}

func (x Claim_ClaimType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Claim_ClaimType) Descriptor() protoreflect.EnumDescriptor {
	return file_legacy_claim_proto_enumTypes[1].Descriptor()
}

func (Claim_ClaimType) Type() protoreflect.EnumType {
	return &file_legacy_claim_proto_enumTypes[1]
}

func (x Claim_ClaimType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Claim_ClaimType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Claim_ClaimType(num)
	return nil
}

// Deprecated: Use Claim_ClaimType.Descriptor instead.
func (Claim_ClaimType) EnumDescriptor() ([]byte, []int) {
	return file_legacy_claim_proto_rawDescGZIP(), []int{0, 1}
}

type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            *Claim_Version   `protobuf:"varint,1,req,name=version,enum=legacy_pb.Claim_Version" json:"version"`
	ClaimType          *Claim_ClaimType `protobuf:"varint,2,req,name=claimType,enum=legacy_pb.Claim_ClaimType" json:"claimType"`
	Stream             *Stream          `protobuf:"bytes,3,opt,name=stream" json:"stream"`
	Certificate        *Certificate     `protobuf:"bytes,4,opt,name=certificate" json:"certificate"`
	PublisherSignature *Signature       `protobuf:"bytes,5,opt,name=publisherSignature" json:"publisherSignature"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_legacy_claim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_legacy_claim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_legacy_claim_proto_rawDescGZIP(), []int{0}
}

func (x *Claim) GetVersion() Claim_Version {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Claim_UNKNOWN_VERSION
}

func (x *Claim) GetClaimType() Claim_ClaimType {
	if x != nil && x.ClaimType != nil {
		return *x.ClaimType
	}
	return Claim_UNKNOWN_CLAIM_TYPE
}

func (x *Claim) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *Claim) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Claim) GetPublisherSignature() *Signature {
	if x != nil {
		return x.PublisherSignature
	}
	return nil
}

var File_legacy_claim_proto protoreflect.FileDescriptor

var file_legacy_claim_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x1a,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x96, 0x03, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x32, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x2a, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x01,
	0x22, 0x48, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02,
}

var (
	file_legacy_claim_proto_rawDescOnce sync.Once
	file_legacy_claim_proto_rawDescData = file_legacy_claim_proto_rawDesc
)

func file_legacy_claim_proto_rawDescGZIP() []byte {
	file_legacy_claim_proto_rawDescOnce.Do(func() {
		file_legacy_claim_proto_rawDescData = protoimpl.X.CompressGZIP(file_legacy_claim_proto_rawDescData)
	})
	return file_legacy_claim_proto_rawDescData
}

var file_legacy_claim_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_legacy_claim_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_legacy_claim_proto_goTypes = []interface{}{
	(Claim_Version)(0),   // 0: legacy_pb.Claim.Version
	(Claim_ClaimType)(0), // 1: legacy_pb.Claim.ClaimType
	(*Claim)(nil),        // 2: legacy_pb.Claim
	(*Stream)(nil),       // 3: legacy_pb.Stream
	(*Certificate)(nil),  // 4: legacy_pb.Certificate
	(*Signature)(nil),    // 5: legacy_pb.Signature
}
var file_legacy_claim_proto_depIdxs = []int32{
	0, // 0: legacy_pb.Claim.version:type_name -> legacy_pb.Claim.Version
	1, // 1: legacy_pb.Claim.claimType:type_name -> legacy_pb.Claim.ClaimType
	3, // 2: legacy_pb.Claim.stream:type_name -> legacy_pb.Stream
	4, // 3: legacy_pb.Claim.certificate:type_name -> legacy_pb.Certificate
	5, // 4: legacy_pb.Claim.publisherSignature:type_name -> legacy_pb.Signature
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_legacy_claim_proto_init() }
func file_legacy_claim_proto_init() {
	if File_legacy_claim_proto != nil {
		return
	}
	file_stream_proto_init()
	file_certificate_proto_init()
	file_signature_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_legacy_claim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_legacy_claim_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_legacy_claim_proto_goTypes,
		DependencyIndexes: file_legacy_claim_proto_depIdxs,
		EnumInfos:         file_legacy_claim_proto_enumTypes,
		MessageInfos:      file_legacy_claim_proto_msgTypes,
	}.Build()
	File_legacy_claim_proto = out.File
	file_legacy_claim_proto_rawDesc = nil
	file_legacy_claim_proto_goTypes = nil
	file_legacy_claim_proto_depIdxs = nil
}
