// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: support.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_support_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_support_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_support_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_support_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_support_2eproto;
namespace pb {
class Support;
struct SupportDefaultTypeInternal;
extern SupportDefaultTypeInternal _Support_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Support* Arena::CreateMaybeMessage<::pb::Support>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Support final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Support) */ {
 public:
  inline Support() : Support(nullptr) {}
  ~Support() override;
  explicit PROTOBUF_CONSTEXPR Support(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Support(const Support& from);
  Support(Support&& from) noexcept
    : Support() {
    *this = ::std::move(from);
  }

  inline Support& operator=(const Support& from) {
    CopyFrom(from);
    return *this;
  }
  inline Support& operator=(Support&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Support& default_instance() {
    return *internal_default_instance();
  }
  static inline const Support* internal_default_instance() {
    return reinterpret_cast<const Support*>(
               &_Support_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Support& a, Support& b) {
    a.Swap(&b);
  }
  inline void Swap(Support* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Support* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Support* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Support>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Support& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Support& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Support* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Support";
  }
  protected:
  explicit Support(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmojiFieldNumber = 1,
    kCommentFieldNumber = 2,
  };
  // string emoji = 1;
  void clear_emoji();
  const std::string& emoji() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_emoji(ArgT0&& arg0, ArgT... args);
  std::string* mutable_emoji();
  PROTOBUF_NODISCARD std::string* release_emoji();
  void set_allocated_emoji(std::string* emoji);
  private:
  const std::string& _internal_emoji() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emoji(const std::string& value);
  std::string* _internal_mutable_emoji();
  public:

  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // @@protoc_insertion_point(class_scope:pb.Support)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emoji_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_support_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Support

// string emoji = 1;
inline void Support::clear_emoji() {
  emoji_.ClearToEmpty();
}
inline const std::string& Support::emoji() const {
  // @@protoc_insertion_point(field_get:pb.Support.emoji)
  return _internal_emoji();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Support::set_emoji(ArgT0&& arg0, ArgT... args) {
 
 emoji_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Support.emoji)
}
inline std::string* Support::mutable_emoji() {
  std::string* _s = _internal_mutable_emoji();
  // @@protoc_insertion_point(field_mutable:pb.Support.emoji)
  return _s;
}
inline const std::string& Support::_internal_emoji() const {
  return emoji_.Get();
}
inline void Support::_internal_set_emoji(const std::string& value) {
  
  emoji_.Set(value, GetArenaForAllocation());
}
inline std::string* Support::_internal_mutable_emoji() {
  
  return emoji_.Mutable(GetArenaForAllocation());
}
inline std::string* Support::release_emoji() {
  // @@protoc_insertion_point(field_release:pb.Support.emoji)
  return emoji_.Release();
}
inline void Support::set_allocated_emoji(std::string* emoji) {
  if (emoji != nullptr) {
    
  } else {
    
  }
  emoji_.SetAllocated(emoji, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (emoji_.IsDefault()) {
    emoji_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Support.emoji)
}

// string comment = 2;
inline void Support::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& Support::comment() const {
  // @@protoc_insertion_point(field_get:pb.Support.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Support::set_comment(ArgT0&& arg0, ArgT... args) {
 
 comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Support.comment)
}
inline std::string* Support::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:pb.Support.comment)
  return _s;
}
inline const std::string& Support::_internal_comment() const {
  return comment_.Get();
}
inline void Support::_internal_set_comment(const std::string& value) {
  
  comment_.Set(value, GetArenaForAllocation());
}
inline std::string* Support::_internal_mutable_comment() {
  
  return comment_.Mutable(GetArenaForAllocation());
}
inline std::string* Support::release_comment() {
  // @@protoc_insertion_point(field_release:pb.Support.comment)
  return comment_.Release();
}
inline void Support::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comment_.IsDefault()) {
    comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Support.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_support_2eproto
