// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_extension_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_extension_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_extension_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_extension_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extension_2eproto;
namespace pb {
class Extension;
struct ExtensionDefaultTypeInternal;
extern ExtensionDefaultTypeInternal _Extension_default_instance_;
class StringMap;
struct StringMapDefaultTypeInternal;
extern StringMapDefaultTypeInternal _StringMap_default_instance_;
class StringMap_FieldsEntry_DoNotUse;
struct StringMap_FieldsEntry_DoNotUseDefaultTypeInternal;
extern StringMap_FieldsEntry_DoNotUseDefaultTypeInternal _StringMap_FieldsEntry_DoNotUse_default_instance_;
class StringMap_Value;
struct StringMap_ValueDefaultTypeInternal;
extern StringMap_ValueDefaultTypeInternal _StringMap_Value_default_instance_;
class StringMap_Values;
struct StringMap_ValuesDefaultTypeInternal;
extern StringMap_ValuesDefaultTypeInternal _StringMap_Values_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Extension* Arena::CreateMaybeMessage<::pb::Extension>(Arena*);
template<> ::pb::StringMap* Arena::CreateMaybeMessage<::pb::StringMap>(Arena*);
template<> ::pb::StringMap_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::StringMap_FieldsEntry_DoNotUse>(Arena*);
template<> ::pb::StringMap_Value* Arena::CreateMaybeMessage<::pb::StringMap_Value>(Arena*);
template<> ::pb::StringMap_Values* Arena::CreateMaybeMessage<::pb::StringMap_Values>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class StringMap_Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.StringMap.Value) */ {
 public:
  inline StringMap_Value() : StringMap_Value(nullptr) {}
  ~StringMap_Value() override;
  explicit PROTOBUF_CONSTEXPR StringMap_Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringMap_Value(const StringMap_Value& from);
  StringMap_Value(StringMap_Value&& from) noexcept
    : StringMap_Value() {
    *this = ::std::move(from);
  }

  inline StringMap_Value& operator=(const StringMap_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMap_Value& operator=(StringMap_Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringMap_Value& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kStr = 1,
    kInt = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const StringMap_Value* internal_default_instance() {
    return reinterpret_cast<const StringMap_Value*>(
               &_StringMap_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringMap_Value& a, StringMap_Value& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMap_Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMap_Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringMap_Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringMap_Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringMap_Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringMap_Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMap_Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.StringMap.Value";
  }
  protected:
  explicit StringMap_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
    kIntFieldNumber = 2,
  };
  // string str = 1;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int64 int = 2;
  bool has_int_() const;
  private:
  bool _internal_has_int_() const;
  public:
  void clear_int_();
  int64_t int_() const;
  void set_int_(int64_t value);
  private:
  int64_t _internal_int_() const;
  void _internal_set_int_(int64_t value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:pb.StringMap.Value)
 private:
  class _Internal;
  void set_has_str();
  void set_has_int_();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    int64_t int__;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_extension_2eproto;
};
// -------------------------------------------------------------------

class StringMap_Values final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.StringMap.Values) */ {
 public:
  inline StringMap_Values() : StringMap_Values(nullptr) {}
  ~StringMap_Values() override;
  explicit PROTOBUF_CONSTEXPR StringMap_Values(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringMap_Values(const StringMap_Values& from);
  StringMap_Values(StringMap_Values&& from) noexcept
    : StringMap_Values() {
    *this = ::std::move(from);
  }

  inline StringMap_Values& operator=(const StringMap_Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMap_Values& operator=(StringMap_Values&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringMap_Values& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringMap_Values* internal_default_instance() {
    return reinterpret_cast<const StringMap_Values*>(
               &_StringMap_Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringMap_Values& a, StringMap_Values& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMap_Values* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMap_Values* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringMap_Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringMap_Values>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringMap_Values& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringMap_Values& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMap_Values* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.StringMap.Values";
  }
  protected:
  explicit StringMap_Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVsFieldNumber = 1,
  };
  // repeated .pb.StringMap.Value vs = 1;
  int vs_size() const;
  private:
  int _internal_vs_size() const;
  public:
  void clear_vs();
  ::pb::StringMap_Value* mutable_vs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::StringMap_Value >*
      mutable_vs();
  private:
  const ::pb::StringMap_Value& _internal_vs(int index) const;
  ::pb::StringMap_Value* _internal_add_vs();
  public:
  const ::pb::StringMap_Value& vs(int index) const;
  ::pb::StringMap_Value* add_vs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::StringMap_Value >&
      vs() const;

  // @@protoc_insertion_point(class_scope:pb.StringMap.Values)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::StringMap_Value > vs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extension_2eproto;
};
// -------------------------------------------------------------------

class StringMap_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringMap_FieldsEntry_DoNotUse, 
    std::string, ::pb::StringMap_Values,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringMap_FieldsEntry_DoNotUse, 
    std::string, ::pb::StringMap_Values,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StringMap_FieldsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StringMap_FieldsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StringMap_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StringMap_FieldsEntry_DoNotUse& other);
  static const StringMap_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StringMap_FieldsEntry_DoNotUse*>(&_StringMap_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.StringMap.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_extension_2eproto;
};

// -------------------------------------------------------------------

class StringMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.StringMap) */ {
 public:
  inline StringMap() : StringMap(nullptr) {}
  ~StringMap() override;
  explicit PROTOBUF_CONSTEXPR StringMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringMap(const StringMap& from);
  StringMap(StringMap&& from) noexcept
    : StringMap() {
    *this = ::std::move(from);
  }

  inline StringMap& operator=(const StringMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMap& operator=(StringMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringMap* internal_default_instance() {
    return reinterpret_cast<const StringMap*>(
               &_StringMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StringMap& a, StringMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.StringMap";
  }
  protected:
  explicit StringMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StringMap_Value Value;
  typedef StringMap_Values Values;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // map<string, .pb.StringMap.Values> fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:pb.StringMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StringMap_FieldsEntry_DoNotUse,
      std::string, ::pb::StringMap_Values,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extension_2eproto;
};
// -------------------------------------------------------------------

class Extension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Extension) */ {
 public:
  inline Extension() : Extension(nullptr) {}
  ~Extension() override;
  explicit PROTOBUF_CONSTEXPR Extension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extension(const Extension& from);
  Extension(Extension&& from) noexcept
    : Extension() {
    *this = ::std::move(from);
  }

  inline Extension& operator=(const Extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extension& operator=(Extension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extension& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kMap = 1,
    TYPE_NOT_SET = 0,
  };

  static inline const Extension* internal_default_instance() {
    return reinterpret_cast<const Extension*>(
               &_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Extension& a, Extension& b) {
    a.Swap(&b);
  }
  inline void Swap(Extension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Extension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Extension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Extension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Extension";
  }
  protected:
  explicit Extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // .pb.StringMap map = 1;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::pb::StringMap& map() const;
  PROTOBUF_NODISCARD ::pb::StringMap* release_map();
  ::pb::StringMap* mutable_map();
  void set_allocated_map(::pb::StringMap* map);
  private:
  const ::pb::StringMap& _internal_map() const;
  ::pb::StringMap* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::pb::StringMap* map);
  ::pb::StringMap* unsafe_arena_release_map();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:pb.Extension)
 private:
  class _Internal;
  void set_has_map();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::pb::StringMap* map_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_extension_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringMap_Value

// string str = 1;
inline bool StringMap_Value::_internal_has_str() const {
  return type_case() == kStr;
}
inline bool StringMap_Value::has_str() const {
  return _internal_has_str();
}
inline void StringMap_Value::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void StringMap_Value::clear_str() {
  if (_internal_has_str()) {
    type_.str_.Destroy();
    clear_has_type();
  }
}
inline const std::string& StringMap_Value::str() const {
  // @@protoc_insertion_point(field_get:pb.StringMap.Value.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline void StringMap_Value::set_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str()) {
    clear_type();
    set_has_str();
    type_.str_.InitDefault();
  }
  type_.str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.StringMap.Value.str)
}
inline std::string* StringMap_Value::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:pb.StringMap.Value.str)
  return _s;
}
inline const std::string& StringMap_Value::_internal_str() const {
  if (_internal_has_str()) {
    return type_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StringMap_Value::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_type();
    set_has_str();
    type_.str_.InitDefault();
  }
  type_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* StringMap_Value::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_type();
    set_has_str();
    type_.str_.InitDefault();
  }
  return type_.str_.Mutable(      GetArenaForAllocation());
}
inline std::string* StringMap_Value::release_str() {
  // @@protoc_insertion_point(field_release:pb.StringMap.Value.str)
  if (_internal_has_str()) {
    clear_has_type();
    return type_.str_.Release();
  } else {
    return nullptr;
  }
}
inline void StringMap_Value::set_allocated_str(std::string* str) {
  if (has_type()) {
    clear_type();
  }
  if (str != nullptr) {
    set_has_str();
    type_.str_.InitAllocated(str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.StringMap.Value.str)
}

// int64 int = 2;
inline bool StringMap_Value::_internal_has_int_() const {
  return type_case() == kInt;
}
inline bool StringMap_Value::has_int_() const {
  return _internal_has_int_();
}
inline void StringMap_Value::set_has_int_() {
  _oneof_case_[0] = kInt;
}
inline void StringMap_Value::clear_int_() {
  if (_internal_has_int_()) {
    type_.int__ = int64_t{0};
    clear_has_type();
  }
}
inline int64_t StringMap_Value::_internal_int_() const {
  if (_internal_has_int_()) {
    return type_.int__;
  }
  return int64_t{0};
}
inline void StringMap_Value::_internal_set_int_(int64_t value) {
  if (!_internal_has_int_()) {
    clear_type();
    set_has_int_();
  }
  type_.int__ = value;
}
inline int64_t StringMap_Value::int_() const {
  // @@protoc_insertion_point(field_get:pb.StringMap.Value.int)
  return _internal_int_();
}
inline void StringMap_Value::set_int_(int64_t value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:pb.StringMap.Value.int)
}

inline bool StringMap_Value::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void StringMap_Value::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline StringMap_Value::TypeCase StringMap_Value::type_case() const {
  return StringMap_Value::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringMap_Values

// repeated .pb.StringMap.Value vs = 1;
inline int StringMap_Values::_internal_vs_size() const {
  return vs_.size();
}
inline int StringMap_Values::vs_size() const {
  return _internal_vs_size();
}
inline void StringMap_Values::clear_vs() {
  vs_.Clear();
}
inline ::pb::StringMap_Value* StringMap_Values::mutable_vs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.StringMap.Values.vs)
  return vs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::StringMap_Value >*
StringMap_Values::mutable_vs() {
  // @@protoc_insertion_point(field_mutable_list:pb.StringMap.Values.vs)
  return &vs_;
}
inline const ::pb::StringMap_Value& StringMap_Values::_internal_vs(int index) const {
  return vs_.Get(index);
}
inline const ::pb::StringMap_Value& StringMap_Values::vs(int index) const {
  // @@protoc_insertion_point(field_get:pb.StringMap.Values.vs)
  return _internal_vs(index);
}
inline ::pb::StringMap_Value* StringMap_Values::_internal_add_vs() {
  return vs_.Add();
}
inline ::pb::StringMap_Value* StringMap_Values::add_vs() {
  ::pb::StringMap_Value* _add = _internal_add_vs();
  // @@protoc_insertion_point(field_add:pb.StringMap.Values.vs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::StringMap_Value >&
StringMap_Values::vs() const {
  // @@protoc_insertion_point(field_list:pb.StringMap.Values.vs)
  return vs_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StringMap

// map<string, .pb.StringMap.Values> fields = 1;
inline int StringMap::_internal_fields_size() const {
  return fields_.size();
}
inline int StringMap::fields_size() const {
  return _internal_fields_size();
}
inline void StringMap::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >&
StringMap::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >&
StringMap::fields() const {
  // @@protoc_insertion_point(field_map:pb.StringMap.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >*
StringMap::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::StringMap_Values >*
StringMap::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:pb.StringMap.fields)
  return _internal_mutable_fields();
}

// -------------------------------------------------------------------

// Extension

// .pb.StringMap map = 1;
inline bool Extension::_internal_has_map() const {
  return type_case() == kMap;
}
inline bool Extension::has_map() const {
  return _internal_has_map();
}
inline void Extension::set_has_map() {
  _oneof_case_[0] = kMap;
}
inline void Extension::clear_map() {
  if (_internal_has_map()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.map_;
    }
    clear_has_type();
  }
}
inline ::pb::StringMap* Extension::release_map() {
  // @@protoc_insertion_point(field_release:pb.Extension.map)
  if (_internal_has_map()) {
    clear_has_type();
    ::pb::StringMap* temp = type_.map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::StringMap& Extension::_internal_map() const {
  return _internal_has_map()
      ? *type_.map_
      : reinterpret_cast< ::pb::StringMap&>(::pb::_StringMap_default_instance_);
}
inline const ::pb::StringMap& Extension::map() const {
  // @@protoc_insertion_point(field_get:pb.Extension.map)
  return _internal_map();
}
inline ::pb::StringMap* Extension::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.Extension.map)
  if (_internal_has_map()) {
    clear_has_type();
    ::pb::StringMap* temp = type_.map_;
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Extension::unsafe_arena_set_allocated_map(::pb::StringMap* map) {
  clear_type();
  if (map) {
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Extension.map)
}
inline ::pb::StringMap* Extension::_internal_mutable_map() {
  if (!_internal_has_map()) {
    clear_type();
    set_has_map();
    type_.map_ = CreateMaybeMessage< ::pb::StringMap >(GetArenaForAllocation());
  }
  return type_.map_;
}
inline ::pb::StringMap* Extension::mutable_map() {
  ::pb::StringMap* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:pb.Extension.map)
  return _msg;
}

inline bool Extension::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Extension::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Extension::TypeCase Extension::type_case() const {
  return Extension::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_extension_2eproto
