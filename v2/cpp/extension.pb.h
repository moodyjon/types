// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_extension_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_extension_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_extension_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_extension_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extension_2eproto;
namespace pb {
class Extension;
struct ExtensionDefaultTypeInternal;
extern ExtensionDefaultTypeInternal _Extension_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Extension* Arena::CreateMaybeMessage<::pb::Extension>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Extension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Extension) */ {
 public:
  inline Extension() : Extension(nullptr) {}
  ~Extension() override;
  explicit PROTOBUF_CONSTEXPR Extension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extension(const Extension& from);
  Extension(Extension&& from) noexcept
    : Extension() {
    *this = ::std::move(from);
  }

  inline Extension& operator=(const Extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extension& operator=(Extension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extension& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kStruct = 1,
    TYPE_NOT_SET = 0,
  };

  static inline const Extension* internal_default_instance() {
    return reinterpret_cast<const Extension*>(
               &_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Extension& a, Extension& b) {
    a.Swap(&b);
  }
  inline void Swap(Extension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Extension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Extension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Extension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Extension";
  }
  protected:
  explicit Extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructFieldNumber = 1,
  };
  // .google.protobuf.Struct struct = 1;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::PROTOBUF_NAMESPACE_ID::Struct& struct_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_struct_();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_struct_();
  void set_allocated_struct_(::PROTOBUF_NAMESPACE_ID::Struct* struct_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_struct_() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::PROTOBUF_NAMESPACE_ID::Struct* struct_);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_struct_();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:pb.Extension)
 private:
  class _Internal;
  void set_has_struct_();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::Struct* struct__;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_extension_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Extension

// .google.protobuf.Struct struct = 1;
inline bool Extension::_internal_has_struct_() const {
  return type_case() == kStruct;
}
inline bool Extension::has_struct_() const {
  return _internal_has_struct_();
}
inline void Extension::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Extension::release_struct_() {
  // @@protoc_insertion_point(field_release:pb.Extension.struct)
  if (_internal_has_struct_()) {
    clear_has_type();
    ::PROTOBUF_NAMESPACE_ID::Struct* temp = type_.struct__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Extension::_internal_struct_() const {
  return _internal_has_struct_()
      ? *type_.struct__
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Struct&>(::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Extension::struct_() const {
  // @@protoc_insertion_point(field_get:pb.Extension.struct)
  return _internal_struct_();
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Extension::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.Extension.struct)
  if (_internal_has_struct_()) {
    clear_has_type();
    ::PROTOBUF_NAMESPACE_ID::Struct* temp = type_.struct__;
    type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Extension::unsafe_arena_set_allocated_struct_(::PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  clear_type();
  if (struct_) {
    set_has_struct_();
    type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Extension.struct)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Extension::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_type();
    set_has_struct_();
    type_.struct__ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Struct >(GetArenaForAllocation());
  }
  return type_.struct__;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Extension::mutable_struct_() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_struct_();
  // @@protoc_insertion_point(field_mutable:pb.Extension.struct)
  return _msg;
}

inline bool Extension::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Extension::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Extension::TypeCase Extension::type_case() const {
  return Extension::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_extension_2eproto
