// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: support.proto

#include "support.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
PROTOBUF_CONSTEXPR Support::Support(
    ::_pbi::ConstantInitialized)
  : emoji_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , comment_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SupportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportDefaultTypeInternal() {}
  union {
    Support _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportDefaultTypeInternal _Support_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_support_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_support_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_support_2eproto = nullptr;

const uint32_t TableStruct_support_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Support, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Support, emoji_),
  PROTOBUF_FIELD_OFFSET(::pb::Support, comment_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::Support)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::_Support_default_instance_._instance,
};

const char descriptor_table_protodef_support_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsupport.proto\022\002pb\")\n\007Support\022\r\n\005emoji\030"
  "\001 \001(\t\022\017\n\007comment\030\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_support_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_support_2eproto = {
    false, false, 70, descriptor_table_protodef_support_2eproto,
    "support.proto",
    &descriptor_table_support_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_support_2eproto::offsets,
    file_level_metadata_support_2eproto, file_level_enum_descriptors_support_2eproto,
    file_level_service_descriptors_support_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_support_2eproto_getter() {
  return &descriptor_table_support_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_support_2eproto(&descriptor_table_support_2eproto);
namespace pb {

// ===================================================================

class Support::_Internal {
 public:
};

Support::Support(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Support)
}
Support::Support(const Support& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  emoji_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    emoji_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_emoji().empty()) {
    emoji_.Set(from._internal_emoji(), 
      GetArenaForAllocation());
  }
  comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    comment_.Set(from._internal_comment(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.Support)
}

inline void Support::SharedCtor() {
emoji_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  emoji_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Support::~Support() {
  // @@protoc_insertion_point(destructor:pb.Support)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Support::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  emoji_.Destroy();
  comment_.Destroy();
}

void Support::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Support::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Support)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emoji_.ClearToEmpty();
  comment_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Support::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string emoji = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_emoji();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Support.emoji"));
        } else
          goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Support.comment"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Support::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Support)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string emoji = 1;
  if (!this->_internal_emoji().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji().data(), static_cast<int>(this->_internal_emoji().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Support.emoji");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_emoji(), target);
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Support.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Support)
  return target;
}

size_t Support::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Support)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string emoji = 1;
  if (!this->_internal_emoji().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji());
  }

  // string comment = 2;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Support::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Support::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Support::GetClassData() const { return &_class_data_; }

void Support::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Support *>(to)->MergeFrom(
      static_cast<const Support &>(from));
}


void Support::MergeFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Support)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_emoji().empty()) {
    _internal_set_emoji(from._internal_emoji());
  }
  if (!from._internal_comment().empty()) {
    _internal_set_comment(from._internal_comment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Support::CopyFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Support::IsInitialized() const {
  return true;
}

void Support::InternalSwap(Support* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &emoji_, lhs_arena,
      &other->emoji_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &comment_, lhs_arena,
      &other->comment_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Support::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_support_2eproto_getter, &descriptor_table_support_2eproto_once,
      file_level_metadata_support_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Support*
Arena::CreateMaybeMessage< ::pb::Support >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Support >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
