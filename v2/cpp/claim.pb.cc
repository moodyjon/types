// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claim.proto

#include "claim.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
PROTOBUF_CONSTEXPR Claim::Claim(
    ::_pbi::ConstantInitialized)
  : tags_()
  , languages_()
  , locations_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , thumbnail_(nullptr)
  , _oneof_case_{}{}
struct ClaimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClaimDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClaimDefaultTypeInternal() {}
  union {
    Claim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClaimDefaultTypeInternal _Claim_default_instance_;
PROTOBUF_CONSTEXPR Stream_ExtensionsEntry_DoNotUse::Stream_ExtensionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Stream_ExtensionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Stream_ExtensionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Stream_ExtensionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Stream_ExtensionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Stream_ExtensionsEntry_DoNotUseDefaultTypeInternal _Stream_ExtensionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Stream_Modifiable_ExtensionsEntry_DoNotUse::Stream_Modifiable_ExtensionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Stream_Modifiable_ExtensionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Stream_Modifiable_ExtensionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Stream_Modifiable_ExtensionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Stream_Modifiable_ExtensionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Stream_Modifiable_ExtensionsEntry_DoNotUseDefaultTypeInternal _Stream_Modifiable_ExtensionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Stream_Modifiable::Stream_Modifiable(
    ::_pbi::ConstantInitialized)
  : extensions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct Stream_ModifiableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Stream_ModifiableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Stream_ModifiableDefaultTypeInternal() {}
  union {
    Stream_Modifiable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Stream_ModifiableDefaultTypeInternal _Stream_Modifiable_default_instance_;
PROTOBUF_CONSTEXPR Stream::Stream(
    ::_pbi::ConstantInitialized)
  : extensions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , author_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , license_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , license_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_(nullptr)
  , fee_(nullptr)
  , release_time_(int64_t{0})
  , _oneof_case_{}{}
struct StreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDefaultTypeInternal() {}
  union {
    Stream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDefaultTypeInternal _Stream_default_instance_;
PROTOBUF_CONSTEXPR ModifyStream::ModifyStream(
    ::_pbi::ConstantInitialized)
  : deletions_(nullptr)
  , edits_(nullptr){}
struct ModifyStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyStreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyStreamDefaultTypeInternal() {}
  union {
    ModifyStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyStreamDefaultTypeInternal _ModifyStream_default_instance_;
PROTOBUF_CONSTEXPR Channel::Channel(
    ::_pbi::ConstantInitialized)
  : public_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , website_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cover_(nullptr)
  , featured_(nullptr){}
struct ChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDefaultTypeInternal() {}
  union {
    Channel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDefaultTypeInternal _Channel_default_instance_;
PROTOBUF_CONSTEXPR ClaimReference::ClaimReference(
    ::_pbi::ConstantInitialized)
  : claim_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClaimReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClaimReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClaimReferenceDefaultTypeInternal() {}
  union {
    ClaimReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClaimReferenceDefaultTypeInternal _ClaimReference_default_instance_;
PROTOBUF_CONSTEXPR ModifyingClaimReference::ModifyingClaimReference(
    ::_pbi::ConstantInitialized)
  : claim_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , _oneof_case_{}{}
struct ModifyingClaimReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyingClaimReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyingClaimReferenceDefaultTypeInternal() {}
  union {
    ModifyingClaimReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyingClaimReferenceDefaultTypeInternal _ModifyingClaimReference_default_instance_;
PROTOBUF_CONSTEXPR ClaimList::ClaimList(
    ::_pbi::ConstantInitialized)
  : claim_references_()
  , list_type_(0)
{}
struct ClaimListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClaimListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClaimListDefaultTypeInternal() {}
  union {
    ClaimList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClaimListDefaultTypeInternal _ClaimList_default_instance_;
PROTOBUF_CONSTEXPR Source::Source(
    ::_pbi::ConstantInitialized)
  : hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , media_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sd_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bt_infohash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , size_(uint64_t{0u}){}
struct SourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {
    Source _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceDefaultTypeInternal _Source_default_instance_;
PROTOBUF_CONSTEXPR Fee::Fee(
    ::_pbi::ConstantInitialized)
  : address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_(uint64_t{0u})
  , currency_(0)
{}
struct FeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeeDefaultTypeInternal() {}
  union {
    Fee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeeDefaultTypeInternal _Fee_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized)
  : width_(0u)
  , height_(0u){}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR Video::Video(
    ::_pbi::ConstantInitialized)
  : audio_(nullptr)
  , width_(0u)
  , height_(0u)
  , duration_(0u){}
struct VideoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoDefaultTypeInternal() {}
  union {
    Video _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoDefaultTypeInternal _Video_default_instance_;
PROTOBUF_CONSTEXPR Audio::Audio(
    ::_pbi::ConstantInitialized)
  : duration_(0u){}
struct AudioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioDefaultTypeInternal() {}
  union {
    Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioDefaultTypeInternal _Audio_default_instance_;
PROTOBUF_CONSTEXPR Software::Software(
    ::_pbi::ConstantInitialized)
  : os_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SoftwareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftwareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftwareDefaultTypeInternal() {}
  union {
    Software _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftwareDefaultTypeInternal _Software_default_instance_;
PROTOBUF_CONSTEXPR Language::Language(
    ::_pbi::ConstantInitialized)
  : language_(0)

  , script_(0)

  , region_(0)
{}
struct LanguageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LanguageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LanguageDefaultTypeInternal() {}
  union {
    Language _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LanguageDefaultTypeInternal _Language_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized)
  : state_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , city_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , country_(0)

  , latitude_(0)
  , longitude_(0){}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_claim_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_claim_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_claim_2eproto = nullptr;

const uint32_t TableStruct_claim_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Claim, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::Claim, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pb::Claim, title_),
  PROTOBUF_FIELD_OFFSET(::pb::Claim, description_),
  PROTOBUF_FIELD_OFFSET(::pb::Claim, thumbnail_),
  PROTOBUF_FIELD_OFFSET(::pb::Claim, tags_),
  PROTOBUF_FIELD_OFFSET(::pb::Claim, languages_),
  PROTOBUF_FIELD_OFFSET(::pb::Claim, locations_),
  PROTOBUF_FIELD_OFFSET(::pb::Claim, type_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream_ExtensionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream_ExtensionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Stream_ExtensionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream_ExtensionsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Stream_Modifiable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Stream_Modifiable, extensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::Stream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Stream, source_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream, author_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream, license_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream, license_url_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream, release_time_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream, fee_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pb::Stream, extensions_),
  PROTOBUF_FIELD_OFFSET(::pb::Stream, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ModifyStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::ModifyStream, deletions_),
  PROTOBUF_FIELD_OFFSET(::pb::ModifyStream, edits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Channel, public_key_),
  PROTOBUF_FIELD_OFFSET(::pb::Channel, email_),
  PROTOBUF_FIELD_OFFSET(::pb::Channel, website_url_),
  PROTOBUF_FIELD_OFFSET(::pb::Channel, cover_),
  PROTOBUF_FIELD_OFFSET(::pb::Channel, featured_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ClaimReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::ClaimReference, claim_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ModifyingClaimReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::ModifyingClaimReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::ModifyingClaimReference, claim_hash_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pb::ModifyingClaimReference, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ClaimList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::ClaimList, list_type_),
  PROTOBUF_FIELD_OFFSET(::pb::ClaimList, claim_references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Source, hash_),
  PROTOBUF_FIELD_OFFSET(::pb::Source, name_),
  PROTOBUF_FIELD_OFFSET(::pb::Source, size_),
  PROTOBUF_FIELD_OFFSET(::pb::Source, media_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Source, url_),
  PROTOBUF_FIELD_OFFSET(::pb::Source, sd_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::Source, bt_infohash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Fee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Fee, currency_),
  PROTOBUF_FIELD_OFFSET(::pb::Fee, address_),
  PROTOBUF_FIELD_OFFSET(::pb::Fee, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Image, width_),
  PROTOBUF_FIELD_OFFSET(::pb::Image, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Video, width_),
  PROTOBUF_FIELD_OFFSET(::pb::Video, height_),
  PROTOBUF_FIELD_OFFSET(::pb::Video, duration_),
  PROTOBUF_FIELD_OFFSET(::pb::Video, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Audio, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Software, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Software, os_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Language, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Language, language_),
  PROTOBUF_FIELD_OFFSET(::pb::Language, script_),
  PROTOBUF_FIELD_OFFSET(::pb::Language, region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Location, country_),
  PROTOBUF_FIELD_OFFSET(::pb::Location, state_),
  PROTOBUF_FIELD_OFFSET(::pb::Location, city_),
  PROTOBUF_FIELD_OFFSET(::pb::Location, code_),
  PROTOBUF_FIELD_OFFSET(::pb::Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::pb::Location, longitude_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::Claim)},
  { 17, 25, -1, sizeof(::pb::Stream_ExtensionsEntry_DoNotUse)},
  { 27, 35, -1, sizeof(::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse)},
  { 37, -1, -1, sizeof(::pb::Stream_Modifiable)},
  { 44, -1, -1, sizeof(::pb::Stream)},
  { 62, -1, -1, sizeof(::pb::ModifyStream)},
  { 70, -1, -1, sizeof(::pb::Channel)},
  { 81, -1, -1, sizeof(::pb::ClaimReference)},
  { 88, -1, -1, sizeof(::pb::ModifyingClaimReference)},
  { 97, -1, -1, sizeof(::pb::ClaimList)},
  { 105, -1, -1, sizeof(::pb::Source)},
  { 118, -1, -1, sizeof(::pb::Fee)},
  { 127, -1, -1, sizeof(::pb::Image)},
  { 135, -1, -1, sizeof(::pb::Video)},
  { 145, -1, -1, sizeof(::pb::Audio)},
  { 152, -1, -1, sizeof(::pb::Software)},
  { 159, -1, -1, sizeof(::pb::Language)},
  { 168, -1, -1, sizeof(::pb::Location)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::_Claim_default_instance_._instance,
  &::pb::_Stream_ExtensionsEntry_DoNotUse_default_instance_._instance,
  &::pb::_Stream_Modifiable_ExtensionsEntry_DoNotUse_default_instance_._instance,
  &::pb::_Stream_Modifiable_default_instance_._instance,
  &::pb::_Stream_default_instance_._instance,
  &::pb::_ModifyStream_default_instance_._instance,
  &::pb::_Channel_default_instance_._instance,
  &::pb::_ClaimReference_default_instance_._instance,
  &::pb::_ModifyingClaimReference_default_instance_._instance,
  &::pb::_ClaimList_default_instance_._instance,
  &::pb::_Source_default_instance_._instance,
  &::pb::_Fee_default_instance_._instance,
  &::pb::_Image_default_instance_._instance,
  &::pb::_Video_default_instance_._instance,
  &::pb::_Audio_default_instance_._instance,
  &::pb::_Software_default_instance_._instance,
  &::pb::_Language_default_instance_._instance,
  &::pb::_Location_default_instance_._instance,
};

const char descriptor_table_protodef_claim_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013claim.proto\022\002pb\032\031google/protobuf/any.p"
  "roto\"\264\002\n\005Claim\022\034\n\006stream\030\001 \001(\0132\n.pb.Stre"
  "amH\000\022\036\n\007channel\030\002 \001(\0132\013.pb.ChannelH\000\022#\n\n"
  "collection\030\003 \001(\0132\r.pb.ClaimListH\000\022-\n\006rep"
  "ost\030\004 \001(\0132\033.pb.ModifyingClaimReferenceH\000"
  "\022\r\n\005title\030\010 \001(\t\022\023\n\013description\030\t \001(\t\022\035\n\t"
  "thumbnail\030\n \001(\0132\n.pb.Source\022\014\n\004tags\030\013 \003("
  "\t\022\037\n\tlanguages\030\014 \003(\0132\014.pb.Language\022\037\n\tlo"
  "cations\030\r \003(\0132\014.pb.LocationB\006\n\004type\"\220\004\n\006"
  "Stream\022\032\n\006source\030\001 \001(\0132\n.pb.Source\022\016\n\006au"
  "thor\030\002 \001(\t\022\017\n\007license\030\003 \001(\t\022\023\n\013license_u"
  "rl\030\004 \001(\t\022\024\n\014release_time\030\005 \001(\003\022\024\n\003fee\030\006 "
  "\001(\0132\007.pb.Fee\022\032\n\005image\030\n \001(\0132\t.pb.ImageH\000"
  "\022\032\n\005video\030\013 \001(\0132\t.pb.VideoH\000\022\032\n\005audio\030\014 "
  "\001(\0132\t.pb.AudioH\000\022 \n\010software\030\r \001(\0132\014.pb."
  "SoftwareH\000\022.\n\nextensions\030\016 \003(\0132\032.pb.Stre"
  "am.ExtensionsEntry\032G\n\017ExtensionsEntry\022\013\n"
  "\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.google.proto"
  "buf.Any:\0028\001\032\220\001\n\nModifiable\0229\n\nextensions"
  "\030\001 \003(\0132%.pb.Stream.Modifiable.Extensions"
  "Entry\032G\n\017ExtensionsEntry\022\013\n\003key\030\001 \001(\t\022#\n"
  "\005value\030\002 \001(\0132\024.google.protobuf.Any:\0028\001B\006"
  "\n\004type\"^\n\014ModifyStream\022(\n\tdeletions\030\001 \001("
  "\0132\025.pb.Stream.Modifiable\022$\n\005edits\030\002 \001(\0132"
  "\025.pb.Stream.Modifiable\"}\n\007Channel\022\022\n\npub"
  "lic_key\030\001 \001(\014\022\r\n\005email\030\002 \001(\t\022\023\n\013website_"
  "url\030\003 \001(\t\022\031\n\005cover\030\004 \001(\0132\n.pb.Source\022\037\n\010"
  "featured\030\005 \001(\0132\r.pb.ClaimList\"$\n\016ClaimRe"
  "ference\022\022\n\nclaim_hash\030\001 \001(\014\"Y\n\027Modifying"
  "ClaimReference\022\022\n\nclaim_hash\030\001 \001(\014\022\"\n\006st"
  "ream\030\002 \001(\0132\020.pb.ModifyStreamH\000B\006\n\004type\"\220"
  "\001\n\tClaimList\022)\n\tlist_type\030\001 \001(\0162\026.pb.Cla"
  "imList.ListType\022,\n\020claim_references\030\002 \003("
  "\0132\022.pb.ClaimReference\"*\n\010ListType\022\016\n\nCOL"
  "LECTION\020\000\022\016\n\nDERIVATION\020\002\"y\n\006Source\022\014\n\004h"
  "ash\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\014\n\004size\030\003 \001(\004\022\022\n"
  "\nmedia_type\030\004 \001(\t\022\013\n\003url\030\005 \001(\t\022\017\n\007sd_has"
  "h\030\006 \001(\014\022\023\n\013bt_infohash\030\007 \001(\014\"\207\001\n\003Fee\022\"\n\010"
  "currency\030\001 \001(\0162\020.pb.Fee.Currency\022\017\n\007addr"
  "ess\030\002 \001(\014\022\016\n\006amount\030\003 \001(\004\";\n\010Currency\022\024\n"
  "\020UNKNOWN_CURRENCY\020\000\022\007\n\003LBC\020\001\022\007\n\003BTC\020\002\022\007\n"
  "\003USD\020\003\"&\n\005Image\022\r\n\005width\030\001 \001(\r\022\016\n\006height"
  "\030\002 \001(\r\"R\n\005Video\022\r\n\005width\030\001 \001(\r\022\016\n\006height"
  "\030\002 \001(\r\022\020\n\010duration\030\003 \001(\r\022\030\n\005audio\030\017 \001(\0132"
  "\t.pb.Audio\"\031\n\005Audio\022\020\n\010duration\030\001 \001(\r\"l\n"
  "\010Software\022\n\n\002os\030\001 \001(\t\"T\n\002OS\022\016\n\nUNKNOWN_O"
  "S\020\000\022\007\n\003ANY\020\001\022\t\n\005LINUX\020\002\022\013\n\007WINDOWS\020\003\022\007\n\003"
  "MAC\020\004\022\013\n\007ANDROID\020\005\022\007\n\003IOS\020\006\"\307\035\n\010Language"
  "\022\'\n\010language\030\001 \001(\0162\025.pb.Language.Languag"
  "e\022#\n\006script\030\002 \001(\0162\023.pb.Language.Script\022$"
  "\n\006region\030\003 \001(\0162\024.pb.Location.Country\"\231\014\n"
  "\010Language\022\024\n\020UNKNOWN_LANGUAGE\020\000\022\006\n\002en\020\001\022"
  "\006\n\002aa\020\002\022\006\n\002ab\020\003\022\006\n\002ae\020\004\022\006\n\002af\020\005\022\006\n\002ak\020\006\022"
  "\006\n\002am\020\007\022\006\n\002an\020\010\022\006\n\002ar\020\t\022\006\n\002as\020\n\022\006\n\002av\020\013\022"
  "\006\n\002ay\020\014\022\006\n\002az\020\r\022\006\n\002ba\020\016\022\006\n\002be\020\017\022\006\n\002bg\020\020\022"
  "\006\n\002bh\020\021\022\006\n\002bi\020\022\022\006\n\002bm\020\023\022\006\n\002bn\020\024\022\006\n\002bo\020\025\022"
  "\006\n\002br\020\026\022\006\n\002bs\020\027\022\006\n\002ca\020\030\022\006\n\002ce\020\031\022\006\n\002ch\020\032\022"
  "\006\n\002co\020\033\022\006\n\002cr\020\034\022\006\n\002cs\020\035\022\006\n\002cu\020\036\022\006\n\002cv\020\037\022"
  "\006\n\002cy\020 \022\006\n\002da\020!\022\006\n\002de\020\"\022\006\n\002dv\020#\022\006\n\002dz\020$\022"
  "\006\n\002ee\020%\022\006\n\002el\020&\022\006\n\002eo\020\'\022\006\n\002es\020(\022\006\n\002et\020)\022"
  "\006\n\002eu\020*\022\006\n\002fa\020+\022\006\n\002ff\020,\022\006\n\002fi\020-\022\006\n\002fj\020.\022"
  "\006\n\002fo\020/\022\006\n\002fr\0200\022\006\n\002fy\0201\022\006\n\002ga\0202\022\006\n\002gd\0203\022"
  "\006\n\002gl\0204\022\006\n\002gn\0205\022\006\n\002gu\0206\022\006\n\002gv\0207\022\006\n\002ha\0208\022"
  "\006\n\002he\0209\022\006\n\002hi\020:\022\006\n\002ho\020;\022\006\n\002hr\020<\022\006\n\002ht\020=\022"
  "\006\n\002hu\020>\022\006\n\002hy\020\?\022\006\n\002hz\020@\022\006\n\002ia\020A\022\006\n\002id\020B\022"
  "\006\n\002ie\020C\022\006\n\002ig\020D\022\006\n\002ii\020E\022\006\n\002ik\020F\022\006\n\002io\020G\022"
  "\006\n\002is\020H\022\006\n\002it\020I\022\006\n\002iu\020J\022\006\n\002ja\020K\022\006\n\002jv\020L\022"
  "\006\n\002ka\020M\022\006\n\002kg\020N\022\006\n\002ki\020O\022\006\n\002kj\020P\022\006\n\002kk\020Q\022"
  "\006\n\002kl\020R\022\006\n\002km\020S\022\006\n\002kn\020T\022\006\n\002ko\020U\022\006\n\002kr\020V\022"
  "\006\n\002ks\020W\022\006\n\002ku\020X\022\006\n\002kv\020Y\022\006\n\002kw\020Z\022\006\n\002ky\020[\022"
  "\006\n\002la\020\\\022\006\n\002lb\020]\022\006\n\002lg\020^\022\006\n\002li\020_\022\006\n\002ln\020`\022"
  "\006\n\002lo\020a\022\006\n\002lt\020b\022\006\n\002lu\020c\022\006\n\002lv\020d\022\006\n\002mg\020e\022"
  "\006\n\002mh\020f\022\006\n\002mi\020g\022\006\n\002mk\020h\022\006\n\002ml\020i\022\006\n\002mn\020j\022"
  "\006\n\002mr\020k\022\006\n\002ms\020l\022\006\n\002mt\020m\022\006\n\002my\020n\022\006\n\002na\020o\022"
  "\006\n\002nb\020p\022\006\n\002nd\020q\022\006\n\002ne\020r\022\006\n\002ng\020s\022\006\n\002nl\020t\022"
  "\006\n\002nn\020u\022\006\n\002no\020v\022\006\n\002nr\020w\022\006\n\002nv\020x\022\006\n\002ny\020y\022"
  "\006\n\002oc\020z\022\006\n\002oj\020{\022\006\n\002om\020|\022\006\n\002or\020}\022\006\n\002os\020~\022"
  "\006\n\002pa\020\177\022\007\n\002pi\020\200\001\022\007\n\002pl\020\201\001\022\007\n\002ps\020\202\001\022\007\n\002pt"
  "\020\203\001\022\007\n\002qu\020\204\001\022\007\n\002rm\020\205\001\022\007\n\002rn\020\206\001\022\007\n\002ro\020\207\001\022"
  "\007\n\002ru\020\210\001\022\007\n\002rw\020\211\001\022\007\n\002sa\020\212\001\022\007\n\002sc\020\213\001\022\007\n\002s"
  "d\020\214\001\022\007\n\002se\020\215\001\022\007\n\002sg\020\216\001\022\007\n\002si\020\217\001\022\007\n\002sk\020\220\001"
  "\022\007\n\002sl\020\221\001\022\007\n\002sm\020\222\001\022\007\n\002sn\020\223\001\022\007\n\002so\020\224\001\022\007\n\002"
  "sq\020\225\001\022\007\n\002sr\020\226\001\022\007\n\002ss\020\227\001\022\007\n\002st\020\230\001\022\007\n\002su\020\231"
  "\001\022\007\n\002sv\020\232\001\022\007\n\002sw\020\233\001\022\007\n\002ta\020\234\001\022\007\n\002te\020\235\001\022\007\n"
  "\002tg\020\236\001\022\007\n\002th\020\237\001\022\007\n\002ti\020\240\001\022\007\n\002tk\020\241\001\022\007\n\002tl\020"
  "\242\001\022\007\n\002tn\020\243\001\022\007\n\002to\020\244\001\022\007\n\002tr\020\245\001\022\007\n\002ts\020\246\001\022\007"
  "\n\002tt\020\247\001\022\007\n\002tw\020\250\001\022\007\n\002ty\020\251\001\022\007\n\002ug\020\252\001\022\007\n\002uk"
  "\020\253\001\022\007\n\002ur\020\254\001\022\007\n\002uz\020\255\001\022\007\n\002ve\020\256\001\022\007\n\002vi\020\257\001\022"
  "\007\n\002vo\020\260\001\022\007\n\002wa\020\261\001\022\007\n\002wo\020\262\001\022\007\n\002xh\020\263\001\022\007\n\002y"
  "i\020\264\001\022\007\n\002yo\020\265\001\022\007\n\002za\020\266\001\022\007\n\002zh\020\267\001\022\007\n\002zu\020\270\001"
  "\"\252\020\n\006Script\022\022\n\016UNKNOWN_SCRIPT\020\000\022\010\n\004Adlm\020"
  "\001\022\010\n\004Afak\020\002\022\010\n\004Aghb\020\003\022\010\n\004Ahom\020\004\022\010\n\004Arab\020"
  "\005\022\010\n\004Aran\020\006\022\010\n\004Armi\020\007\022\010\n\004Armn\020\010\022\010\n\004Avst\020"
  "\t\022\010\n\004Bali\020\n\022\010\n\004Bamu\020\013\022\010\n\004Bass\020\014\022\010\n\004Batk\020"
  "\r\022\010\n\004Beng\020\016\022\010\n\004Bhks\020\017\022\010\n\004Blis\020\020\022\010\n\004Bopo\020"
  "\021\022\010\n\004Brah\020\022\022\010\n\004Brai\020\023\022\010\n\004Bugi\020\024\022\010\n\004Buhd\020"
  "\025\022\010\n\004Cakm\020\026\022\010\n\004Cans\020\027\022\010\n\004Cari\020\030\022\010\n\004Cham\020"
  "\031\022\010\n\004Cher\020\032\022\010\n\004Cirt\020\033\022\010\n\004Copt\020\034\022\010\n\004Cpmn\020"
  "\035\022\010\n\004Cprt\020\036\022\010\n\004Cyrl\020\037\022\010\n\004Cyrs\020 \022\010\n\004Deva\020"
  "!\022\010\n\004Dogr\020\"\022\010\n\004Dsrt\020#\022\010\n\004Dupl\020$\022\010\n\004Egyd\020"
  "%\022\010\n\004Egyh\020&\022\010\n\004Egyp\020\'\022\010\n\004Elba\020(\022\010\n\004Elym\020"
  ")\022\010\n\004Ethi\020*\022\010\n\004Geok\020+\022\010\n\004Geor\020,\022\010\n\004Glag\020"
  "-\022\010\n\004Gong\020.\022\010\n\004Gonm\020/\022\010\n\004Goth\0200\022\010\n\004Gran\020"
  "1\022\010\n\004Grek\0202\022\010\n\004Gujr\0203\022\010\n\004Guru\0204\022\010\n\004Hanb\020"
  "5\022\010\n\004Hang\0206\022\010\n\004Hani\0207\022\010\n\004Hano\0208\022\010\n\004Hans\020"
  "9\022\010\n\004Hant\020:\022\010\n\004Hatr\020;\022\010\n\004Hebr\020<\022\010\n\004Hira\020"
  "=\022\010\n\004Hluw\020>\022\010\n\004Hmng\020\?\022\010\n\004Hmnp\020@\022\010\n\004Hrkt\020"
  "A\022\010\n\004Hung\020B\022\010\n\004Inds\020C\022\010\n\004Ital\020D\022\010\n\004Jamo\020"
  "E\022\010\n\004Java\020F\022\010\n\004Jpan\020G\022\010\n\004Jurc\020H\022\010\n\004Kali\020"
  "I\022\010\n\004Kana\020J\022\010\n\004Khar\020K\022\010\n\004Khmr\020L\022\010\n\004Khoj\020"
  "M\022\010\n\004Kitl\020N\022\010\n\004Kits\020O\022\010\n\004Knda\020P\022\010\n\004Kore\020"
  "Q\022\010\n\004Kpel\020R\022\010\n\004Kthi\020S\022\010\n\004Lana\020T\022\010\n\004Laoo\020"
  "U\022\010\n\004Latf\020V\022\010\n\004Latg\020W\022\010\n\004Latn\020X\022\010\n\004Leke\020"
  "Y\022\010\n\004Lepc\020Z\022\010\n\004Limb\020[\022\010\n\004Lina\020\\\022\010\n\004Linb\020"
  "]\022\010\n\004Lisu\020^\022\010\n\004Loma\020_\022\010\n\004Lyci\020`\022\010\n\004Lydi\020"
  "a\022\010\n\004Mahj\020b\022\010\n\004Maka\020c\022\010\n\004Mand\020d\022\010\n\004Mani\020"
  "e\022\010\n\004Marc\020f\022\010\n\004Maya\020g\022\010\n\004Medf\020h\022\010\n\004Mend\020"
  "i\022\010\n\004Merc\020j\022\010\n\004Mero\020k\022\010\n\004Mlym\020l\022\010\n\004Modi\020"
  "m\022\010\n\004Mong\020n\022\010\n\004Moon\020o\022\010\n\004Mroo\020p\022\010\n\004Mtei\020"
  "q\022\010\n\004Mult\020r\022\010\n\004Mymr\020s\022\010\n\004Nand\020t\022\010\n\004Narb\020"
  "u\022\010\n\004Nbat\020v\022\010\n\004Newa\020w\022\010\n\004Nkdb\020x\022\010\n\004Nkgb\020"
  "y\022\010\n\004Nkoo\020z\022\010\n\004Nshu\020{\022\010\n\004Ogam\020|\022\010\n\004Olck\020"
  "}\022\010\n\004Orkh\020~\022\010\n\004Orya\020\177\022\t\n\004Osge\020\200\001\022\t\n\004Osma"
  "\020\201\001\022\t\n\004Palm\020\202\001\022\t\n\004Pauc\020\203\001\022\t\n\004Perm\020\204\001\022\t\n\004"
  "Phag\020\205\001\022\t\n\004Phli\020\206\001\022\t\n\004Phlp\020\207\001\022\t\n\004Phlv\020\210\001"
  "\022\t\n\004Phnx\020\211\001\022\t\n\004Plrd\020\212\001\022\t\n\004Piqd\020\213\001\022\t\n\004Prt"
  "i\020\214\001\022\t\n\004Qaaa\020\215\001\022\t\n\004Qabx\020\216\001\022\t\n\004Rjng\020\217\001\022\t\n"
  "\004Rohg\020\220\001\022\t\n\004Roro\020\221\001\022\t\n\004Runr\020\222\001\022\t\n\004Samr\020\223"
  "\001\022\t\n\004Sara\020\224\001\022\t\n\004Sarb\020\225\001\022\t\n\004Saur\020\226\001\022\t\n\004Sg"
  "nw\020\227\001\022\t\n\004Shaw\020\230\001\022\t\n\004Shrd\020\231\001\022\t\n\004Shui\020\232\001\022\t"
  "\n\004Sidd\020\233\001\022\t\n\004Sind\020\234\001\022\t\n\004Sinh\020\235\001\022\t\n\004Sogd\020"
  "\236\001\022\t\n\004Sogo\020\237\001\022\t\n\004Sora\020\240\001\022\t\n\004Soyo\020\241\001\022\t\n\004S"
  "und\020\242\001\022\t\n\004Sylo\020\243\001\022\t\n\004Syrc\020\244\001\022\t\n\004Syre\020\245\001\022"
  "\t\n\004Syrj\020\246\001\022\t\n\004Syrn\020\247\001\022\t\n\004Tagb\020\250\001\022\t\n\004Takr"
  "\020\251\001\022\t\n\004Tale\020\252\001\022\t\n\004Talu\020\253\001\022\t\n\004Taml\020\254\001\022\t\n\004"
  "Tang\020\255\001\022\t\n\004Tavt\020\256\001\022\t\n\004Telu\020\257\001\022\t\n\004Teng\020\260\001"
  "\022\t\n\004Tfng\020\261\001\022\t\n\004Tglg\020\262\001\022\t\n\004Thaa\020\263\001\022\t\n\004Tha"
  "i\020\264\001\022\t\n\004Tibt\020\265\001\022\t\n\004Tirh\020\266\001\022\t\n\004Ugar\020\267\001\022\t\n"
  "\004Vaii\020\270\001\022\t\n\004Visp\020\271\001\022\t\n\004Wara\020\272\001\022\t\n\004Wcho\020\273"
  "\001\022\t\n\004Wole\020\274\001\022\t\n\004Xpeo\020\275\001\022\t\n\004Xsux\020\276\001\022\t\n\004Yi"
  "ii\020\277\001\022\t\n\004Zanb\020\300\001\022\t\n\004Zinh\020\301\001\022\t\n\004Zmth\020\302\001\022\t"
  "\n\004Zsye\020\303\001\022\t\n\004Zsym\020\304\001\022\t\n\004Zxxx\020\305\001\022\t\n\004Zyyy\020"
  "\306\001\022\t\n\004Zzzz\020\307\001\"\354)\n\010Location\022%\n\007country\030\001 "
  "\001(\0162\024.pb.Location.Country\022\r\n\005state\030\002 \001(\t"
  "\022\014\n\004city\030\003 \001(\t\022\014\n\004code\030\004 \001(\t\022\020\n\010latitude"
  "\030\005 \001(\021\022\021\n\tlongitude\030\006 \001(\021\"\350(\n\007Country\022\023\n"
  "\017UNKNOWN_COUNTRY\020\000\022\006\n\002AF\020\001\022\006\n\002AX\020\002\022\006\n\002AL"
  "\020\003\022\006\n\002DZ\020\004\022\006\n\002AS\020\005\022\006\n\002AD\020\006\022\006\n\002AO\020\007\022\006\n\002AI"
  "\020\010\022\006\n\002AQ\020\t\022\006\n\002AG\020\n\022\006\n\002AR\020\013\022\006\n\002AM\020\014\022\006\n\002AW"
  "\020\r\022\006\n\002AU\020\016\022\006\n\002AT\020\017\022\006\n\002AZ\020\020\022\006\n\002BS\020\021\022\006\n\002BH"
  "\020\022\022\006\n\002BD\020\023\022\006\n\002BB\020\024\022\006\n\002BY\020\025\022\006\n\002BE\020\026\022\006\n\002BZ"
  "\020\027\022\006\n\002BJ\020\030\022\006\n\002BM\020\031\022\006\n\002BT\020\032\022\006\n\002BO\020\033\022\006\n\002BQ"
  "\020\034\022\006\n\002BA\020\035\022\006\n\002BW\020\036\022\006\n\002BV\020\037\022\006\n\002BR\020 \022\006\n\002IO"
  "\020!\022\006\n\002BN\020\"\022\006\n\002BG\020#\022\006\n\002BF\020$\022\006\n\002BI\020%\022\006\n\002KH"
  "\020&\022\006\n\002CM\020\'\022\006\n\002CA\020(\022\006\n\002CV\020)\022\006\n\002KY\020*\022\006\n\002CF"
  "\020+\022\006\n\002TD\020,\022\006\n\002CL\020-\022\006\n\002CN\020.\022\006\n\002CX\020/\022\006\n\002CC"
  "\0200\022\006\n\002CO\0201\022\006\n\002KM\0202\022\006\n\002CG\0203\022\006\n\002CD\0204\022\006\n\002CK"
  "\0205\022\006\n\002CR\0206\022\006\n\002CI\0207\022\006\n\002HR\0208\022\006\n\002CU\0209\022\006\n\002CW"
  "\020:\022\006\n\002CY\020;\022\006\n\002CZ\020<\022\006\n\002DK\020=\022\006\n\002DJ\020>\022\006\n\002DM"
  "\020\?\022\006\n\002DO\020@\022\006\n\002EC\020A\022\006\n\002EG\020B\022\006\n\002SV\020C\022\006\n\002GQ"
  "\020D\022\006\n\002ER\020E\022\006\n\002EE\020F\022\006\n\002ET\020G\022\006\n\002FK\020H\022\006\n\002FO"
  "\020I\022\006\n\002FJ\020J\022\006\n\002FI\020K\022\006\n\002FR\020L\022\006\n\002GF\020M\022\006\n\002PF"
  "\020N\022\006\n\002TF\020O\022\006\n\002GA\020P\022\006\n\002GM\020Q\022\006\n\002GE\020R\022\006\n\002DE"
  "\020S\022\006\n\002GH\020T\022\006\n\002GI\020U\022\006\n\002GR\020V\022\006\n\002GL\020W\022\006\n\002GD"
  "\020X\022\006\n\002GP\020Y\022\006\n\002GU\020Z\022\006\n\002GT\020[\022\006\n\002GG\020\\\022\006\n\002GN"
  "\020]\022\006\n\002GW\020^\022\006\n\002GY\020_\022\006\n\002HT\020`\022\006\n\002HM\020a\022\006\n\002VA"
  "\020b\022\006\n\002HN\020c\022\006\n\002HK\020d\022\006\n\002HU\020e\022\006\n\002IS\020f\022\006\n\002IN"
  "\020g\022\006\n\002ID\020h\022\006\n\002IR\020i\022\006\n\002IQ\020j\022\006\n\002IE\020k\022\006\n\002IM"
  "\020l\022\006\n\002IL\020m\022\006\n\002IT\020n\022\006\n\002JM\020o\022\006\n\002JP\020p\022\006\n\002JE"
  "\020q\022\006\n\002JO\020r\022\006\n\002KZ\020s\022\006\n\002KE\020t\022\006\n\002KI\020u\022\006\n\002KP"
  "\020v\022\006\n\002KR\020w\022\006\n\002KW\020x\022\006\n\002KG\020y\022\006\n\002LA\020z\022\006\n\002LV"
  "\020{\022\006\n\002LB\020|\022\006\n\002LS\020}\022\006\n\002LR\020~\022\006\n\002LY\020\177\022\007\n\002LI"
  "\020\200\001\022\007\n\002LT\020\201\001\022\007\n\002LU\020\202\001\022\007\n\002MO\020\203\001\022\007\n\002MK\020\204\001\022"
  "\007\n\002MG\020\205\001\022\007\n\002MW\020\206\001\022\007\n\002MY\020\207\001\022\007\n\002MV\020\210\001\022\007\n\002M"
  "L\020\211\001\022\007\n\002MT\020\212\001\022\007\n\002MH\020\213\001\022\007\n\002MQ\020\214\001\022\007\n\002MR\020\215\001"
  "\022\007\n\002MU\020\216\001\022\007\n\002YT\020\217\001\022\007\n\002MX\020\220\001\022\007\n\002FM\020\221\001\022\007\n\002"
  "MD\020\222\001\022\007\n\002MC\020\223\001\022\007\n\002MN\020\224\001\022\007\n\002ME\020\225\001\022\007\n\002MS\020\226"
  "\001\022\007\n\002MA\020\227\001\022\007\n\002MZ\020\230\001\022\007\n\002MM\020\231\001\022\007\n\002NA\020\232\001\022\007\n"
  "\002NR\020\233\001\022\007\n\002NP\020\234\001\022\007\n\002NL\020\235\001\022\007\n\002NC\020\236\001\022\007\n\002NZ\020"
  "\237\001\022\007\n\002NI\020\240\001\022\007\n\002NE\020\241\001\022\007\n\002NG\020\242\001\022\007\n\002NU\020\243\001\022\007"
  "\n\002NF\020\244\001\022\007\n\002MP\020\245\001\022\007\n\002NO\020\246\001\022\007\n\002OM\020\247\001\022\007\n\002PK"
  "\020\250\001\022\007\n\002PW\020\251\001\022\007\n\002PS\020\252\001\022\007\n\002PA\020\253\001\022\007\n\002PG\020\254\001\022"
  "\007\n\002PY\020\255\001\022\007\n\002PE\020\256\001\022\007\n\002PH\020\257\001\022\007\n\002PN\020\260\001\022\007\n\002P"
  "L\020\261\001\022\007\n\002PT\020\262\001\022\007\n\002PR\020\263\001\022\007\n\002QA\020\264\001\022\007\n\002RE\020\265\001"
  "\022\007\n\002RO\020\266\001\022\007\n\002RU\020\267\001\022\007\n\002RW\020\270\001\022\007\n\002BL\020\271\001\022\007\n\002"
  "SH\020\272\001\022\007\n\002KN\020\273\001\022\007\n\002LC\020\274\001\022\007\n\002MF\020\275\001\022\007\n\002PM\020\276"
  "\001\022\007\n\002VC\020\277\001\022\007\n\002WS\020\300\001\022\007\n\002SM\020\301\001\022\007\n\002ST\020\302\001\022\007\n"
  "\002SA\020\303\001\022\007\n\002SN\020\304\001\022\007\n\002RS\020\305\001\022\007\n\002SC\020\306\001\022\007\n\002SL\020"
  "\307\001\022\007\n\002SG\020\310\001\022\007\n\002SX\020\311\001\022\007\n\002SK\020\312\001\022\007\n\002SI\020\313\001\022\007"
  "\n\002SB\020\314\001\022\007\n\002SO\020\315\001\022\007\n\002ZA\020\316\001\022\007\n\002GS\020\317\001\022\007\n\002SS"
  "\020\320\001\022\007\n\002ES\020\321\001\022\007\n\002LK\020\322\001\022\007\n\002SD\020\323\001\022\007\n\002SR\020\324\001\022"
  "\007\n\002SJ\020\325\001\022\007\n\002SZ\020\326\001\022\007\n\002SE\020\327\001\022\007\n\002CH\020\330\001\022\007\n\002S"
  "Y\020\331\001\022\007\n\002TW\020\332\001\022\007\n\002TJ\020\333\001\022\007\n\002TZ\020\334\001\022\007\n\002TH\020\335\001"
  "\022\007\n\002TL\020\336\001\022\007\n\002TG\020\337\001\022\007\n\002TK\020\340\001\022\007\n\002TO\020\341\001\022\007\n\002"
  "TT\020\342\001\022\007\n\002TN\020\343\001\022\007\n\002TR\020\344\001\022\007\n\002TM\020\345\001\022\007\n\002TC\020\346"
  "\001\022\007\n\002TV\020\347\001\022\007\n\002UG\020\350\001\022\007\n\002UA\020\351\001\022\007\n\002AE\020\352\001\022\007\n"
  "\002GB\020\353\001\022\007\n\002US\020\354\001\022\007\n\002UM\020\355\001\022\007\n\002UY\020\356\001\022\007\n\002UZ\020"
  "\357\001\022\007\n\002VU\020\360\001\022\007\n\002VE\020\361\001\022\007\n\002VN\020\362\001\022\007\n\002VG\020\363\001\022\007"
  "\n\002VI\020\364\001\022\007\n\002WF\020\365\001\022\007\n\002EH\020\366\001\022\007\n\002YE\020\367\001\022\007\n\002ZM"
  "\020\370\001\022\007\n\002ZW\020\371\001\022\t\n\004R001\020\372\001\022\t\n\004R002\020\373\001\022\t\n\004R0"
  "15\020\374\001\022\t\n\004R012\020\375\001\022\t\n\004R818\020\376\001\022\t\n\004R434\020\377\001\022\t"
  "\n\004R504\020\200\002\022\t\n\004R729\020\201\002\022\t\n\004R788\020\202\002\022\t\n\004R732\020"
  "\203\002\022\t\n\004R202\020\204\002\022\t\n\004R014\020\205\002\022\t\n\004R086\020\206\002\022\t\n\004R"
  "108\020\207\002\022\t\n\004R174\020\210\002\022\t\n\004R262\020\211\002\022\t\n\004R232\020\212\002\022"
  "\t\n\004R231\020\213\002\022\t\n\004R260\020\214\002\022\t\n\004R404\020\215\002\022\t\n\004R450"
  "\020\216\002\022\t\n\004R454\020\217\002\022\t\n\004R480\020\220\002\022\t\n\004R175\020\221\002\022\t\n\004"
  "R508\020\222\002\022\t\n\004R638\020\223\002\022\t\n\004R646\020\224\002\022\t\n\004R690\020\225\002"
  "\022\t\n\004R706\020\226\002\022\t\n\004R728\020\227\002\022\t\n\004R800\020\230\002\022\t\n\004R83"
  "4\020\231\002\022\t\n\004R894\020\232\002\022\t\n\004R716\020\233\002\022\t\n\004R017\020\234\002\022\t\n"
  "\004R024\020\235\002\022\t\n\004R120\020\236\002\022\t\n\004R140\020\237\002\022\t\n\004R148\020\240"
  "\002\022\t\n\004R178\020\241\002\022\t\n\004R180\020\242\002\022\t\n\004R226\020\243\002\022\t\n\004R2"
  "66\020\244\002\022\t\n\004R678\020\245\002\022\t\n\004R018\020\246\002\022\t\n\004R072\020\247\002\022\t"
  "\n\004R748\020\250\002\022\t\n\004R426\020\251\002\022\t\n\004R516\020\252\002\022\t\n\004R710\020"
  "\253\002\022\t\n\004R011\020\254\002\022\t\n\004R204\020\255\002\022\t\n\004R854\020\256\002\022\t\n\004R"
  "132\020\257\002\022\t\n\004R384\020\260\002\022\t\n\004R270\020\261\002\022\t\n\004R288\020\262\002\022"
  "\t\n\004R324\020\263\002\022\t\n\004R624\020\264\002\022\t\n\004R430\020\265\002\022\t\n\004R466"
  "\020\266\002\022\t\n\004R478\020\267\002\022\t\n\004R562\020\270\002\022\t\n\004R566\020\271\002\022\t\n\004"
  "R654\020\272\002\022\t\n\004R686\020\273\002\022\t\n\004R694\020\274\002\022\t\n\004R768\020\275\002"
  "\022\t\n\004R019\020\276\002\022\t\n\004R419\020\277\002\022\t\n\004R029\020\300\002\022\t\n\004R66"
  "0\020\301\002\022\t\n\004R028\020\302\002\022\t\n\004R533\020\303\002\022\t\n\004R044\020\304\002\022\t\n"
  "\004R052\020\305\002\022\t\n\004R535\020\306\002\022\t\n\004R092\020\307\002\022\t\n\004R136\020\310"
  "\002\022\t\n\004R192\020\311\002\022\t\n\004R531\020\312\002\022\t\n\004R212\020\313\002\022\t\n\004R2"
  "14\020\314\002\022\t\n\004R308\020\315\002\022\t\n\004R312\020\316\002\022\t\n\004R332\020\317\002\022\t"
  "\n\004R388\020\320\002\022\t\n\004R474\020\321\002\022\t\n\004R500\020\322\002\022\t\n\004R630\020"
  "\323\002\022\t\n\004R652\020\324\002\022\t\n\004R659\020\325\002\022\t\n\004R662\020\326\002\022\t\n\004R"
  "663\020\327\002\022\t\n\004R670\020\330\002\022\t\n\004R534\020\331\002\022\t\n\004R780\020\332\002\022"
  "\t\n\004R796\020\333\002\022\t\n\004R850\020\334\002\022\t\n\004R013\020\335\002\022\t\n\004R084"
  "\020\336\002\022\t\n\004R188\020\337\002\022\t\n\004R222\020\340\002\022\t\n\004R320\020\341\002\022\t\n\004"
  "R340\020\342\002\022\t\n\004R484\020\343\002\022\t\n\004R558\020\344\002\022\t\n\004R591\020\345\002"
  "\022\t\n\004R005\020\346\002\022\t\n\004R032\020\347\002\022\t\n\004R068\020\350\002\022\t\n\004R07"
  "4\020\351\002\022\t\n\004R076\020\352\002\022\t\n\004R152\020\353\002\022\t\n\004R170\020\354\002\022\t\n"
  "\004R218\020\355\002\022\t\n\004R238\020\356\002\022\t\n\004R254\020\357\002\022\t\n\004R328\020\360"
  "\002\022\t\n\004R600\020\361\002\022\t\n\004R604\020\362\002\022\t\n\004R239\020\363\002\022\t\n\004R7"
  "40\020\364\002\022\t\n\004R858\020\365\002\022\t\n\004R862\020\366\002\022\t\n\004R021\020\367\002\022\t"
  "\n\004R060\020\370\002\022\t\n\004R124\020\371\002\022\t\n\004R304\020\372\002\022\t\n\004R666\020"
  "\373\002\022\t\n\004R840\020\374\002\022\t\n\004R010\020\375\002\022\t\n\004R142\020\376\002\022\t\n\004R"
  "143\020\377\002\022\t\n\004R398\020\200\003\022\t\n\004R417\020\201\003\022\t\n\004R762\020\202\003\022"
  "\t\n\004R795\020\203\003\022\t\n\004R860\020\204\003\022\t\n\004R030\020\205\003\022\t\n\004R156"
  "\020\206\003\022\t\n\004R344\020\207\003\022\t\n\004R446\020\210\003\022\t\n\004R408\020\211\003\022\t\n\004"
  "R392\020\212\003\022\t\n\004R496\020\213\003\022\t\n\004R410\020\214\003\022\t\n\004R035\020\215\003"
  "\022\t\n\004R096\020\216\003\022\t\n\004R116\020\217\003\022\t\n\004R360\020\220\003\022\t\n\004R41"
  "8\020\221\003\022\t\n\004R458\020\222\003\022\t\n\004R104\020\223\003\022\t\n\004R608\020\224\003\022\t\n"
  "\004R702\020\225\003\022\t\n\004R764\020\226\003\022\t\n\004R626\020\227\003\022\t\n\004R704\020\230"
  "\003\022\t\n\004R034\020\231\003\022\t\n\004R004\020\232\003\022\t\n\004R050\020\233\003\022\t\n\004R0"
  "64\020\234\003\022\t\n\004R356\020\235\003\022\t\n\004R364\020\236\003\022\t\n\004R462\020\237\003\022\t"
  "\n\004R524\020\240\003\022\t\n\004R586\020\241\003\022\t\n\004R144\020\242\003\022\t\n\004R145\020"
  "\243\003\022\t\n\004R051\020\244\003\022\t\n\004R031\020\245\003\022\t\n\004R048\020\246\003\022\t\n\004R"
  "196\020\247\003\022\t\n\004R268\020\250\003\022\t\n\004R368\020\251\003\022\t\n\004R376\020\252\003\022"
  "\t\n\004R400\020\253\003\022\t\n\004R414\020\254\003\022\t\n\004R422\020\255\003\022\t\n\004R512"
  "\020\256\003\022\t\n\004R634\020\257\003\022\t\n\004R682\020\260\003\022\t\n\004R275\020\261\003\022\t\n\004"
  "R760\020\262\003\022\t\n\004R792\020\263\003\022\t\n\004R784\020\264\003\022\t\n\004R887\020\265\003"
  "\022\t\n\004R150\020\266\003\022\t\n\004R151\020\267\003\022\t\n\004R112\020\270\003\022\t\n\004R10"
  "0\020\271\003\022\t\n\004R203\020\272\003\022\t\n\004R348\020\273\003\022\t\n\004R616\020\274\003\022\t\n"
  "\004R498\020\275\003\022\t\n\004R642\020\276\003\022\t\n\004R643\020\277\003\022\t\n\004R703\020\300"
  "\003\022\t\n\004R804\020\301\003\022\t\n\004R154\020\302\003\022\t\n\004R248\020\303\003\022\t\n\004R8"
  "30\020\304\003\022\t\n\004R831\020\305\003\022\t\n\004R832\020\306\003\022\t\n\004R680\020\307\003\022\t"
  "\n\004R208\020\310\003\022\t\n\004R233\020\311\003\022\t\n\004R234\020\312\003\022\t\n\004R246\020"
  "\313\003\022\t\n\004R352\020\314\003\022\t\n\004R372\020\315\003\022\t\n\004R833\020\316\003\022\t\n\004R"
  "428\020\317\003\022\t\n\004R440\020\320\003\022\t\n\004R578\020\321\003\022\t\n\004R744\020\322\003\022"
  "\t\n\004R752\020\323\003\022\t\n\004R826\020\324\003\022\t\n\004R039\020\325\003\022\t\n\004R008"
  "\020\326\003\022\t\n\004R020\020\327\003\022\t\n\004R070\020\330\003\022\t\n\004R191\020\331\003\022\t\n\004"
  "R292\020\332\003\022\t\n\004R300\020\333\003\022\t\n\004R336\020\334\003\022\t\n\004R380\020\335\003"
  "\022\t\n\004R470\020\336\003\022\t\n\004R499\020\337\003\022\t\n\004R807\020\340\003\022\t\n\004R62"
  "0\020\341\003\022\t\n\004R674\020\342\003\022\t\n\004R688\020\343\003\022\t\n\004R705\020\344\003\022\t\n"
  "\004R724\020\345\003\022\t\n\004R155\020\346\003\022\t\n\004R040\020\347\003\022\t\n\004R056\020\350"
  "\003\022\t\n\004R250\020\351\003\022\t\n\004R276\020\352\003\022\t\n\004R438\020\353\003\022\t\n\004R4"
  "42\020\354\003\022\t\n\004R492\020\355\003\022\t\n\004R528\020\356\003\022\t\n\004R756\020\357\003\022\t"
  "\n\004R009\020\360\003\022\t\n\004R053\020\361\003\022\t\n\004R036\020\362\003\022\t\n\004R162\020"
  "\363\003\022\t\n\004R166\020\364\003\022\t\n\004R334\020\365\003\022\t\n\004R554\020\366\003\022\t\n\004R"
  "574\020\367\003\022\t\n\004R054\020\370\003\022\t\n\004R242\020\371\003\022\t\n\004R540\020\372\003\022"
  "\t\n\004R598\020\373\003\022\t\n\004R090\020\374\003\022\t\n\004R548\020\375\003\022\t\n\004R057"
  "\020\376\003\022\t\n\004R316\020\377\003\022\t\n\004R296\020\200\004\022\t\n\004R584\020\201\004\022\t\n\004"
  "R583\020\202\004\022\t\n\004R520\020\203\004\022\t\n\004R580\020\204\004\022\t\n\004R585\020\205\004"
  "\022\t\n\004R581\020\206\004\022\t\n\004R061\020\207\004\022\t\n\004R016\020\210\004\022\t\n\004R18"
  "4\020\211\004\022\t\n\004R258\020\212\004\022\t\n\004R570\020\213\004\022\t\n\004R612\020\214\004\022\t\n"
  "\004R882\020\215\004\022\t\n\004R772\020\216\004\022\t\n\004R776\020\217\004\022\t\n\004R798\020\220"
  "\004\022\t\n\004R876\020\221\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_claim_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_claim_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_claim_2eproto = {
    false, false, 11060, descriptor_table_protodef_claim_2eproto,
    "claim.proto",
    &descriptor_table_claim_2eproto_once, descriptor_table_claim_2eproto_deps, 1, 18,
    schemas, file_default_instances, TableStruct_claim_2eproto::offsets,
    file_level_metadata_claim_2eproto, file_level_enum_descriptors_claim_2eproto,
    file_level_service_descriptors_claim_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_claim_2eproto_getter() {
  return &descriptor_table_claim_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_claim_2eproto(&descriptor_table_claim_2eproto);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClaimList_ListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_claim_2eproto);
  return file_level_enum_descriptors_claim_2eproto[0];
}
bool ClaimList_ListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClaimList_ListType ClaimList::COLLECTION;
constexpr ClaimList_ListType ClaimList::DERIVATION;
constexpr ClaimList_ListType ClaimList::ListType_MIN;
constexpr ClaimList_ListType ClaimList::ListType_MAX;
constexpr int ClaimList::ListType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Fee_Currency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_claim_2eproto);
  return file_level_enum_descriptors_claim_2eproto[1];
}
bool Fee_Currency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Fee_Currency Fee::UNKNOWN_CURRENCY;
constexpr Fee_Currency Fee::LBC;
constexpr Fee_Currency Fee::BTC;
constexpr Fee_Currency Fee::USD;
constexpr Fee_Currency Fee::Currency_MIN;
constexpr Fee_Currency Fee::Currency_MAX;
constexpr int Fee::Currency_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Software_OS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_claim_2eproto);
  return file_level_enum_descriptors_claim_2eproto[2];
}
bool Software_OS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Software_OS Software::UNKNOWN_OS;
constexpr Software_OS Software::ANY;
constexpr Software_OS Software::LINUX;
constexpr Software_OS Software::WINDOWS;
constexpr Software_OS Software::MAC;
constexpr Software_OS Software::ANDROID;
constexpr Software_OS Software::IOS;
constexpr Software_OS Software::OS_MIN;
constexpr Software_OS Software::OS_MAX;
constexpr int Software::OS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_claim_2eproto);
  return file_level_enum_descriptors_claim_2eproto[3];
}
bool Language_Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Language_Language Language::UNKNOWN_LANGUAGE;
constexpr Language_Language Language::en;
constexpr Language_Language Language::aa;
constexpr Language_Language Language::ab;
constexpr Language_Language Language::ae;
constexpr Language_Language Language::af;
constexpr Language_Language Language::ak;
constexpr Language_Language Language::am;
constexpr Language_Language Language::an;
constexpr Language_Language Language::ar;
constexpr Language_Language Language::as;
constexpr Language_Language Language::av;
constexpr Language_Language Language::ay;
constexpr Language_Language Language::az;
constexpr Language_Language Language::ba;
constexpr Language_Language Language::be;
constexpr Language_Language Language::bg;
constexpr Language_Language Language::bh;
constexpr Language_Language Language::bi;
constexpr Language_Language Language::bm;
constexpr Language_Language Language::bn;
constexpr Language_Language Language::bo;
constexpr Language_Language Language::br;
constexpr Language_Language Language::bs;
constexpr Language_Language Language::ca;
constexpr Language_Language Language::ce;
constexpr Language_Language Language::ch;
constexpr Language_Language Language::co;
constexpr Language_Language Language::cr;
constexpr Language_Language Language::cs;
constexpr Language_Language Language::cu;
constexpr Language_Language Language::cv;
constexpr Language_Language Language::cy;
constexpr Language_Language Language::da;
constexpr Language_Language Language::de;
constexpr Language_Language Language::dv;
constexpr Language_Language Language::dz;
constexpr Language_Language Language::ee;
constexpr Language_Language Language::el;
constexpr Language_Language Language::eo;
constexpr Language_Language Language::es;
constexpr Language_Language Language::et;
constexpr Language_Language Language::eu;
constexpr Language_Language Language::fa;
constexpr Language_Language Language::ff;
constexpr Language_Language Language::fi;
constexpr Language_Language Language::fj;
constexpr Language_Language Language::fo;
constexpr Language_Language Language::fr;
constexpr Language_Language Language::fy;
constexpr Language_Language Language::ga;
constexpr Language_Language Language::gd;
constexpr Language_Language Language::gl;
constexpr Language_Language Language::gn;
constexpr Language_Language Language::gu;
constexpr Language_Language Language::gv;
constexpr Language_Language Language::ha;
constexpr Language_Language Language::he;
constexpr Language_Language Language::hi;
constexpr Language_Language Language::ho;
constexpr Language_Language Language::hr;
constexpr Language_Language Language::ht;
constexpr Language_Language Language::hu;
constexpr Language_Language Language::hy;
constexpr Language_Language Language::hz;
constexpr Language_Language Language::ia;
constexpr Language_Language Language::id;
constexpr Language_Language Language::ie;
constexpr Language_Language Language::ig;
constexpr Language_Language Language::ii;
constexpr Language_Language Language::ik;
constexpr Language_Language Language::io;
constexpr Language_Language Language::is;
constexpr Language_Language Language::it;
constexpr Language_Language Language::iu;
constexpr Language_Language Language::ja;
constexpr Language_Language Language::jv;
constexpr Language_Language Language::ka;
constexpr Language_Language Language::kg;
constexpr Language_Language Language::ki;
constexpr Language_Language Language::kj;
constexpr Language_Language Language::kk;
constexpr Language_Language Language::kl;
constexpr Language_Language Language::km;
constexpr Language_Language Language::kn;
constexpr Language_Language Language::ko;
constexpr Language_Language Language::kr;
constexpr Language_Language Language::ks;
constexpr Language_Language Language::ku;
constexpr Language_Language Language::kv;
constexpr Language_Language Language::kw;
constexpr Language_Language Language::ky;
constexpr Language_Language Language::la;
constexpr Language_Language Language::lb;
constexpr Language_Language Language::lg;
constexpr Language_Language Language::li;
constexpr Language_Language Language::ln;
constexpr Language_Language Language::lo;
constexpr Language_Language Language::lt;
constexpr Language_Language Language::lu;
constexpr Language_Language Language::lv;
constexpr Language_Language Language::mg;
constexpr Language_Language Language::mh;
constexpr Language_Language Language::mi;
constexpr Language_Language Language::mk;
constexpr Language_Language Language::ml;
constexpr Language_Language Language::mn;
constexpr Language_Language Language::mr;
constexpr Language_Language Language::ms;
constexpr Language_Language Language::mt;
constexpr Language_Language Language::my;
constexpr Language_Language Language::na;
constexpr Language_Language Language::nb;
constexpr Language_Language Language::nd;
constexpr Language_Language Language::ne;
constexpr Language_Language Language::ng;
constexpr Language_Language Language::nl;
constexpr Language_Language Language::nn;
constexpr Language_Language Language::no;
constexpr Language_Language Language::nr;
constexpr Language_Language Language::nv;
constexpr Language_Language Language::ny;
constexpr Language_Language Language::oc;
constexpr Language_Language Language::oj;
constexpr Language_Language Language::om;
constexpr Language_Language Language::or_;
constexpr Language_Language Language::os;
constexpr Language_Language Language::pa;
constexpr Language_Language Language::pi;
constexpr Language_Language Language::pl;
constexpr Language_Language Language::ps;
constexpr Language_Language Language::pt;
constexpr Language_Language Language::qu;
constexpr Language_Language Language::rm;
constexpr Language_Language Language::rn;
constexpr Language_Language Language::ro;
constexpr Language_Language Language::ru;
constexpr Language_Language Language::rw;
constexpr Language_Language Language::sa;
constexpr Language_Language Language::sc;
constexpr Language_Language Language::sd;
constexpr Language_Language Language::se;
constexpr Language_Language Language::sg;
constexpr Language_Language Language::si;
constexpr Language_Language Language::sk;
constexpr Language_Language Language::sl;
constexpr Language_Language Language::sm;
constexpr Language_Language Language::sn;
constexpr Language_Language Language::so;
constexpr Language_Language Language::sq;
constexpr Language_Language Language::sr;
constexpr Language_Language Language::ss;
constexpr Language_Language Language::st;
constexpr Language_Language Language::su;
constexpr Language_Language Language::sv;
constexpr Language_Language Language::sw;
constexpr Language_Language Language::ta;
constexpr Language_Language Language::te;
constexpr Language_Language Language::tg;
constexpr Language_Language Language::th;
constexpr Language_Language Language::ti;
constexpr Language_Language Language::tk;
constexpr Language_Language Language::tl;
constexpr Language_Language Language::tn;
constexpr Language_Language Language::to;
constexpr Language_Language Language::tr;
constexpr Language_Language Language::ts;
constexpr Language_Language Language::tt;
constexpr Language_Language Language::tw;
constexpr Language_Language Language::ty;
constexpr Language_Language Language::ug;
constexpr Language_Language Language::uk;
constexpr Language_Language Language::ur;
constexpr Language_Language Language::uz;
constexpr Language_Language Language::ve;
constexpr Language_Language Language::vi;
constexpr Language_Language Language::vo;
constexpr Language_Language Language::wa;
constexpr Language_Language Language::wo;
constexpr Language_Language Language::xh;
constexpr Language_Language Language::yi;
constexpr Language_Language Language::yo;
constexpr Language_Language Language::za;
constexpr Language_Language Language::zh;
constexpr Language_Language Language::zu;
constexpr Language_Language Language::Language_MIN;
constexpr Language_Language Language::Language_MAX;
constexpr int Language::Language_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_Script_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_claim_2eproto);
  return file_level_enum_descriptors_claim_2eproto[4];
}
bool Language_Script_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Language_Script Language::UNKNOWN_SCRIPT;
constexpr Language_Script Language::Adlm;
constexpr Language_Script Language::Afak;
constexpr Language_Script Language::Aghb;
constexpr Language_Script Language::Ahom;
constexpr Language_Script Language::Arab;
constexpr Language_Script Language::Aran;
constexpr Language_Script Language::Armi;
constexpr Language_Script Language::Armn;
constexpr Language_Script Language::Avst;
constexpr Language_Script Language::Bali;
constexpr Language_Script Language::Bamu;
constexpr Language_Script Language::Bass;
constexpr Language_Script Language::Batk;
constexpr Language_Script Language::Beng;
constexpr Language_Script Language::Bhks;
constexpr Language_Script Language::Blis;
constexpr Language_Script Language::Bopo;
constexpr Language_Script Language::Brah;
constexpr Language_Script Language::Brai;
constexpr Language_Script Language::Bugi;
constexpr Language_Script Language::Buhd;
constexpr Language_Script Language::Cakm;
constexpr Language_Script Language::Cans;
constexpr Language_Script Language::Cari;
constexpr Language_Script Language::Cham;
constexpr Language_Script Language::Cher;
constexpr Language_Script Language::Cirt;
constexpr Language_Script Language::Copt;
constexpr Language_Script Language::Cpmn;
constexpr Language_Script Language::Cprt;
constexpr Language_Script Language::Cyrl;
constexpr Language_Script Language::Cyrs;
constexpr Language_Script Language::Deva;
constexpr Language_Script Language::Dogr;
constexpr Language_Script Language::Dsrt;
constexpr Language_Script Language::Dupl;
constexpr Language_Script Language::Egyd;
constexpr Language_Script Language::Egyh;
constexpr Language_Script Language::Egyp;
constexpr Language_Script Language::Elba;
constexpr Language_Script Language::Elym;
constexpr Language_Script Language::Ethi;
constexpr Language_Script Language::Geok;
constexpr Language_Script Language::Geor;
constexpr Language_Script Language::Glag;
constexpr Language_Script Language::Gong;
constexpr Language_Script Language::Gonm;
constexpr Language_Script Language::Goth;
constexpr Language_Script Language::Gran;
constexpr Language_Script Language::Grek;
constexpr Language_Script Language::Gujr;
constexpr Language_Script Language::Guru;
constexpr Language_Script Language::Hanb;
constexpr Language_Script Language::Hang;
constexpr Language_Script Language::Hani;
constexpr Language_Script Language::Hano;
constexpr Language_Script Language::Hans;
constexpr Language_Script Language::Hant;
constexpr Language_Script Language::Hatr;
constexpr Language_Script Language::Hebr;
constexpr Language_Script Language::Hira;
constexpr Language_Script Language::Hluw;
constexpr Language_Script Language::Hmng;
constexpr Language_Script Language::Hmnp;
constexpr Language_Script Language::Hrkt;
constexpr Language_Script Language::Hung;
constexpr Language_Script Language::Inds;
constexpr Language_Script Language::Ital;
constexpr Language_Script Language::Jamo;
constexpr Language_Script Language::Java;
constexpr Language_Script Language::Jpan;
constexpr Language_Script Language::Jurc;
constexpr Language_Script Language::Kali;
constexpr Language_Script Language::Kana;
constexpr Language_Script Language::Khar;
constexpr Language_Script Language::Khmr;
constexpr Language_Script Language::Khoj;
constexpr Language_Script Language::Kitl;
constexpr Language_Script Language::Kits;
constexpr Language_Script Language::Knda;
constexpr Language_Script Language::Kore;
constexpr Language_Script Language::Kpel;
constexpr Language_Script Language::Kthi;
constexpr Language_Script Language::Lana;
constexpr Language_Script Language::Laoo;
constexpr Language_Script Language::Latf;
constexpr Language_Script Language::Latg;
constexpr Language_Script Language::Latn;
constexpr Language_Script Language::Leke;
constexpr Language_Script Language::Lepc;
constexpr Language_Script Language::Limb;
constexpr Language_Script Language::Lina;
constexpr Language_Script Language::Linb;
constexpr Language_Script Language::Lisu;
constexpr Language_Script Language::Loma;
constexpr Language_Script Language::Lyci;
constexpr Language_Script Language::Lydi;
constexpr Language_Script Language::Mahj;
constexpr Language_Script Language::Maka;
constexpr Language_Script Language::Mand;
constexpr Language_Script Language::Mani;
constexpr Language_Script Language::Marc;
constexpr Language_Script Language::Maya;
constexpr Language_Script Language::Medf;
constexpr Language_Script Language::Mend;
constexpr Language_Script Language::Merc;
constexpr Language_Script Language::Mero;
constexpr Language_Script Language::Mlym;
constexpr Language_Script Language::Modi;
constexpr Language_Script Language::Mong;
constexpr Language_Script Language::Moon;
constexpr Language_Script Language::Mroo;
constexpr Language_Script Language::Mtei;
constexpr Language_Script Language::Mult;
constexpr Language_Script Language::Mymr;
constexpr Language_Script Language::Nand;
constexpr Language_Script Language::Narb;
constexpr Language_Script Language::Nbat;
constexpr Language_Script Language::Newa;
constexpr Language_Script Language::Nkdb;
constexpr Language_Script Language::Nkgb;
constexpr Language_Script Language::Nkoo;
constexpr Language_Script Language::Nshu;
constexpr Language_Script Language::Ogam;
constexpr Language_Script Language::Olck;
constexpr Language_Script Language::Orkh;
constexpr Language_Script Language::Orya;
constexpr Language_Script Language::Osge;
constexpr Language_Script Language::Osma;
constexpr Language_Script Language::Palm;
constexpr Language_Script Language::Pauc;
constexpr Language_Script Language::Perm;
constexpr Language_Script Language::Phag;
constexpr Language_Script Language::Phli;
constexpr Language_Script Language::Phlp;
constexpr Language_Script Language::Phlv;
constexpr Language_Script Language::Phnx;
constexpr Language_Script Language::Plrd;
constexpr Language_Script Language::Piqd;
constexpr Language_Script Language::Prti;
constexpr Language_Script Language::Qaaa;
constexpr Language_Script Language::Qabx;
constexpr Language_Script Language::Rjng;
constexpr Language_Script Language::Rohg;
constexpr Language_Script Language::Roro;
constexpr Language_Script Language::Runr;
constexpr Language_Script Language::Samr;
constexpr Language_Script Language::Sara;
constexpr Language_Script Language::Sarb;
constexpr Language_Script Language::Saur;
constexpr Language_Script Language::Sgnw;
constexpr Language_Script Language::Shaw;
constexpr Language_Script Language::Shrd;
constexpr Language_Script Language::Shui;
constexpr Language_Script Language::Sidd;
constexpr Language_Script Language::Sind;
constexpr Language_Script Language::Sinh;
constexpr Language_Script Language::Sogd;
constexpr Language_Script Language::Sogo;
constexpr Language_Script Language::Sora;
constexpr Language_Script Language::Soyo;
constexpr Language_Script Language::Sund;
constexpr Language_Script Language::Sylo;
constexpr Language_Script Language::Syrc;
constexpr Language_Script Language::Syre;
constexpr Language_Script Language::Syrj;
constexpr Language_Script Language::Syrn;
constexpr Language_Script Language::Tagb;
constexpr Language_Script Language::Takr;
constexpr Language_Script Language::Tale;
constexpr Language_Script Language::Talu;
constexpr Language_Script Language::Taml;
constexpr Language_Script Language::Tang;
constexpr Language_Script Language::Tavt;
constexpr Language_Script Language::Telu;
constexpr Language_Script Language::Teng;
constexpr Language_Script Language::Tfng;
constexpr Language_Script Language::Tglg;
constexpr Language_Script Language::Thaa;
constexpr Language_Script Language::Thai;
constexpr Language_Script Language::Tibt;
constexpr Language_Script Language::Tirh;
constexpr Language_Script Language::Ugar;
constexpr Language_Script Language::Vaii;
constexpr Language_Script Language::Visp;
constexpr Language_Script Language::Wara;
constexpr Language_Script Language::Wcho;
constexpr Language_Script Language::Wole;
constexpr Language_Script Language::Xpeo;
constexpr Language_Script Language::Xsux;
constexpr Language_Script Language::Yiii;
constexpr Language_Script Language::Zanb;
constexpr Language_Script Language::Zinh;
constexpr Language_Script Language::Zmth;
constexpr Language_Script Language::Zsye;
constexpr Language_Script Language::Zsym;
constexpr Language_Script Language::Zxxx;
constexpr Language_Script Language::Zyyy;
constexpr Language_Script Language::Zzzz;
constexpr Language_Script Language::Script_MIN;
constexpr Language_Script Language::Script_MAX;
constexpr int Language::Script_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Location_Country_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_claim_2eproto);
  return file_level_enum_descriptors_claim_2eproto[5];
}
bool Location_Country_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Location_Country Location::UNKNOWN_COUNTRY;
constexpr Location_Country Location::AF;
constexpr Location_Country Location::AX;
constexpr Location_Country Location::AL;
constexpr Location_Country Location::DZ;
constexpr Location_Country Location::AS;
constexpr Location_Country Location::AD;
constexpr Location_Country Location::AO;
constexpr Location_Country Location::AI;
constexpr Location_Country Location::AQ;
constexpr Location_Country Location::AG;
constexpr Location_Country Location::AR;
constexpr Location_Country Location::AM;
constexpr Location_Country Location::AW;
constexpr Location_Country Location::AU;
constexpr Location_Country Location::AT;
constexpr Location_Country Location::AZ;
constexpr Location_Country Location::BS;
constexpr Location_Country Location::BH;
constexpr Location_Country Location::BD;
constexpr Location_Country Location::BB;
constexpr Location_Country Location::BY;
constexpr Location_Country Location::BE;
constexpr Location_Country Location::BZ;
constexpr Location_Country Location::BJ;
constexpr Location_Country Location::BM;
constexpr Location_Country Location::BT;
constexpr Location_Country Location::BO;
constexpr Location_Country Location::BQ;
constexpr Location_Country Location::BA;
constexpr Location_Country Location::BW;
constexpr Location_Country Location::BV;
constexpr Location_Country Location::BR;
constexpr Location_Country Location::IO;
constexpr Location_Country Location::BN;
constexpr Location_Country Location::BG;
constexpr Location_Country Location::BF;
constexpr Location_Country Location::BI;
constexpr Location_Country Location::KH;
constexpr Location_Country Location::CM;
constexpr Location_Country Location::CA;
constexpr Location_Country Location::CV;
constexpr Location_Country Location::KY;
constexpr Location_Country Location::CF;
constexpr Location_Country Location::TD;
constexpr Location_Country Location::CL;
constexpr Location_Country Location::CN;
constexpr Location_Country Location::CX;
constexpr Location_Country Location::CC;
constexpr Location_Country Location::CO;
constexpr Location_Country Location::KM;
constexpr Location_Country Location::CG;
constexpr Location_Country Location::CD;
constexpr Location_Country Location::CK;
constexpr Location_Country Location::CR;
constexpr Location_Country Location::CI;
constexpr Location_Country Location::HR;
constexpr Location_Country Location::CU;
constexpr Location_Country Location::CW;
constexpr Location_Country Location::CY;
constexpr Location_Country Location::CZ;
constexpr Location_Country Location::DK;
constexpr Location_Country Location::DJ;
constexpr Location_Country Location::DM;
constexpr Location_Country Location::DO;
constexpr Location_Country Location::EC;
constexpr Location_Country Location::EG;
constexpr Location_Country Location::SV;
constexpr Location_Country Location::GQ;
constexpr Location_Country Location::ER;
constexpr Location_Country Location::EE;
constexpr Location_Country Location::ET;
constexpr Location_Country Location::FK;
constexpr Location_Country Location::FO;
constexpr Location_Country Location::FJ;
constexpr Location_Country Location::FI;
constexpr Location_Country Location::FR;
constexpr Location_Country Location::GF;
constexpr Location_Country Location::PF;
constexpr Location_Country Location::TF;
constexpr Location_Country Location::GA;
constexpr Location_Country Location::GM;
constexpr Location_Country Location::GE;
constexpr Location_Country Location::DE;
constexpr Location_Country Location::GH;
constexpr Location_Country Location::GI;
constexpr Location_Country Location::GR;
constexpr Location_Country Location::GL;
constexpr Location_Country Location::GD;
constexpr Location_Country Location::GP;
constexpr Location_Country Location::GU;
constexpr Location_Country Location::GT;
constexpr Location_Country Location::GG;
constexpr Location_Country Location::GN;
constexpr Location_Country Location::GW;
constexpr Location_Country Location::GY;
constexpr Location_Country Location::HT;
constexpr Location_Country Location::HM;
constexpr Location_Country Location::VA;
constexpr Location_Country Location::HN;
constexpr Location_Country Location::HK;
constexpr Location_Country Location::HU;
constexpr Location_Country Location::IS;
constexpr Location_Country Location::IN;
constexpr Location_Country Location::ID;
constexpr Location_Country Location::IR;
constexpr Location_Country Location::IQ;
constexpr Location_Country Location::IE;
constexpr Location_Country Location::IM;
constexpr Location_Country Location::IL;
constexpr Location_Country Location::IT;
constexpr Location_Country Location::JM;
constexpr Location_Country Location::JP;
constexpr Location_Country Location::JE;
constexpr Location_Country Location::JO;
constexpr Location_Country Location::KZ;
constexpr Location_Country Location::KE;
constexpr Location_Country Location::KI;
constexpr Location_Country Location::KP;
constexpr Location_Country Location::KR;
constexpr Location_Country Location::KW;
constexpr Location_Country Location::KG;
constexpr Location_Country Location::LA;
constexpr Location_Country Location::LV;
constexpr Location_Country Location::LB;
constexpr Location_Country Location::LS;
constexpr Location_Country Location::LR;
constexpr Location_Country Location::LY;
constexpr Location_Country Location::LI;
constexpr Location_Country Location::LT;
constexpr Location_Country Location::LU;
constexpr Location_Country Location::MO;
constexpr Location_Country Location::MK;
constexpr Location_Country Location::MG;
constexpr Location_Country Location::MW;
constexpr Location_Country Location::MY;
constexpr Location_Country Location::MV;
constexpr Location_Country Location::ML;
constexpr Location_Country Location::MT;
constexpr Location_Country Location::MH;
constexpr Location_Country Location::MQ;
constexpr Location_Country Location::MR;
constexpr Location_Country Location::MU;
constexpr Location_Country Location::YT;
constexpr Location_Country Location::MX;
constexpr Location_Country Location::FM;
constexpr Location_Country Location::MD;
constexpr Location_Country Location::MC;
constexpr Location_Country Location::MN;
constexpr Location_Country Location::ME;
constexpr Location_Country Location::MS;
constexpr Location_Country Location::MA;
constexpr Location_Country Location::MZ;
constexpr Location_Country Location::MM;
constexpr Location_Country Location::NA;
constexpr Location_Country Location::NR;
constexpr Location_Country Location::NP;
constexpr Location_Country Location::NL;
constexpr Location_Country Location::NC;
constexpr Location_Country Location::NZ;
constexpr Location_Country Location::NI;
constexpr Location_Country Location::NE;
constexpr Location_Country Location::NG;
constexpr Location_Country Location::NU;
constexpr Location_Country Location::NF;
constexpr Location_Country Location::MP;
constexpr Location_Country Location::NO;
constexpr Location_Country Location::OM;
constexpr Location_Country Location::PK;
constexpr Location_Country Location::PW;
constexpr Location_Country Location::PS;
constexpr Location_Country Location::PA;
constexpr Location_Country Location::PG;
constexpr Location_Country Location::PY;
constexpr Location_Country Location::PE;
constexpr Location_Country Location::PH;
constexpr Location_Country Location::PN;
constexpr Location_Country Location::PL;
constexpr Location_Country Location::PT;
constexpr Location_Country Location::PR;
constexpr Location_Country Location::QA;
constexpr Location_Country Location::RE;
constexpr Location_Country Location::RO;
constexpr Location_Country Location::RU;
constexpr Location_Country Location::RW;
constexpr Location_Country Location::BL;
constexpr Location_Country Location::SH;
constexpr Location_Country Location::KN;
constexpr Location_Country Location::LC;
constexpr Location_Country Location::MF;
constexpr Location_Country Location::PM;
constexpr Location_Country Location::VC;
constexpr Location_Country Location::WS;
constexpr Location_Country Location::SM;
constexpr Location_Country Location::ST;
constexpr Location_Country Location::SA;
constexpr Location_Country Location::SN;
constexpr Location_Country Location::RS;
constexpr Location_Country Location::SC;
constexpr Location_Country Location::SL;
constexpr Location_Country Location::SG;
constexpr Location_Country Location::SX;
constexpr Location_Country Location::SK;
constexpr Location_Country Location::SI;
constexpr Location_Country Location::SB;
constexpr Location_Country Location::SO;
constexpr Location_Country Location::ZA;
constexpr Location_Country Location::GS;
constexpr Location_Country Location::SS;
constexpr Location_Country Location::ES;
constexpr Location_Country Location::LK;
constexpr Location_Country Location::SD;
constexpr Location_Country Location::SR;
constexpr Location_Country Location::SJ;
constexpr Location_Country Location::SZ;
constexpr Location_Country Location::SE;
constexpr Location_Country Location::CH;
constexpr Location_Country Location::SY;
constexpr Location_Country Location::TW;
constexpr Location_Country Location::TJ;
constexpr Location_Country Location::TZ;
constexpr Location_Country Location::TH;
constexpr Location_Country Location::TL;
constexpr Location_Country Location::TG;
constexpr Location_Country Location::TK;
constexpr Location_Country Location::TO;
constexpr Location_Country Location::TT;
constexpr Location_Country Location::TN;
constexpr Location_Country Location::TR;
constexpr Location_Country Location::TM;
constexpr Location_Country Location::TC;
constexpr Location_Country Location::TV;
constexpr Location_Country Location::UG;
constexpr Location_Country Location::UA;
constexpr Location_Country Location::AE;
constexpr Location_Country Location::GB;
constexpr Location_Country Location::US;
constexpr Location_Country Location::UM;
constexpr Location_Country Location::UY;
constexpr Location_Country Location::UZ;
constexpr Location_Country Location::VU;
constexpr Location_Country Location::VE;
constexpr Location_Country Location::VN;
constexpr Location_Country Location::VG;
constexpr Location_Country Location::VI;
constexpr Location_Country Location::WF;
constexpr Location_Country Location::EH;
constexpr Location_Country Location::YE;
constexpr Location_Country Location::ZM;
constexpr Location_Country Location::ZW;
constexpr Location_Country Location::R001;
constexpr Location_Country Location::R002;
constexpr Location_Country Location::R015;
constexpr Location_Country Location::R012;
constexpr Location_Country Location::R818;
constexpr Location_Country Location::R434;
constexpr Location_Country Location::R504;
constexpr Location_Country Location::R729;
constexpr Location_Country Location::R788;
constexpr Location_Country Location::R732;
constexpr Location_Country Location::R202;
constexpr Location_Country Location::R014;
constexpr Location_Country Location::R086;
constexpr Location_Country Location::R108;
constexpr Location_Country Location::R174;
constexpr Location_Country Location::R262;
constexpr Location_Country Location::R232;
constexpr Location_Country Location::R231;
constexpr Location_Country Location::R260;
constexpr Location_Country Location::R404;
constexpr Location_Country Location::R450;
constexpr Location_Country Location::R454;
constexpr Location_Country Location::R480;
constexpr Location_Country Location::R175;
constexpr Location_Country Location::R508;
constexpr Location_Country Location::R638;
constexpr Location_Country Location::R646;
constexpr Location_Country Location::R690;
constexpr Location_Country Location::R706;
constexpr Location_Country Location::R728;
constexpr Location_Country Location::R800;
constexpr Location_Country Location::R834;
constexpr Location_Country Location::R894;
constexpr Location_Country Location::R716;
constexpr Location_Country Location::R017;
constexpr Location_Country Location::R024;
constexpr Location_Country Location::R120;
constexpr Location_Country Location::R140;
constexpr Location_Country Location::R148;
constexpr Location_Country Location::R178;
constexpr Location_Country Location::R180;
constexpr Location_Country Location::R226;
constexpr Location_Country Location::R266;
constexpr Location_Country Location::R678;
constexpr Location_Country Location::R018;
constexpr Location_Country Location::R072;
constexpr Location_Country Location::R748;
constexpr Location_Country Location::R426;
constexpr Location_Country Location::R516;
constexpr Location_Country Location::R710;
constexpr Location_Country Location::R011;
constexpr Location_Country Location::R204;
constexpr Location_Country Location::R854;
constexpr Location_Country Location::R132;
constexpr Location_Country Location::R384;
constexpr Location_Country Location::R270;
constexpr Location_Country Location::R288;
constexpr Location_Country Location::R324;
constexpr Location_Country Location::R624;
constexpr Location_Country Location::R430;
constexpr Location_Country Location::R466;
constexpr Location_Country Location::R478;
constexpr Location_Country Location::R562;
constexpr Location_Country Location::R566;
constexpr Location_Country Location::R654;
constexpr Location_Country Location::R686;
constexpr Location_Country Location::R694;
constexpr Location_Country Location::R768;
constexpr Location_Country Location::R019;
constexpr Location_Country Location::R419;
constexpr Location_Country Location::R029;
constexpr Location_Country Location::R660;
constexpr Location_Country Location::R028;
constexpr Location_Country Location::R533;
constexpr Location_Country Location::R044;
constexpr Location_Country Location::R052;
constexpr Location_Country Location::R535;
constexpr Location_Country Location::R092;
constexpr Location_Country Location::R136;
constexpr Location_Country Location::R192;
constexpr Location_Country Location::R531;
constexpr Location_Country Location::R212;
constexpr Location_Country Location::R214;
constexpr Location_Country Location::R308;
constexpr Location_Country Location::R312;
constexpr Location_Country Location::R332;
constexpr Location_Country Location::R388;
constexpr Location_Country Location::R474;
constexpr Location_Country Location::R500;
constexpr Location_Country Location::R630;
constexpr Location_Country Location::R652;
constexpr Location_Country Location::R659;
constexpr Location_Country Location::R662;
constexpr Location_Country Location::R663;
constexpr Location_Country Location::R670;
constexpr Location_Country Location::R534;
constexpr Location_Country Location::R780;
constexpr Location_Country Location::R796;
constexpr Location_Country Location::R850;
constexpr Location_Country Location::R013;
constexpr Location_Country Location::R084;
constexpr Location_Country Location::R188;
constexpr Location_Country Location::R222;
constexpr Location_Country Location::R320;
constexpr Location_Country Location::R340;
constexpr Location_Country Location::R484;
constexpr Location_Country Location::R558;
constexpr Location_Country Location::R591;
constexpr Location_Country Location::R005;
constexpr Location_Country Location::R032;
constexpr Location_Country Location::R068;
constexpr Location_Country Location::R074;
constexpr Location_Country Location::R076;
constexpr Location_Country Location::R152;
constexpr Location_Country Location::R170;
constexpr Location_Country Location::R218;
constexpr Location_Country Location::R238;
constexpr Location_Country Location::R254;
constexpr Location_Country Location::R328;
constexpr Location_Country Location::R600;
constexpr Location_Country Location::R604;
constexpr Location_Country Location::R239;
constexpr Location_Country Location::R740;
constexpr Location_Country Location::R858;
constexpr Location_Country Location::R862;
constexpr Location_Country Location::R021;
constexpr Location_Country Location::R060;
constexpr Location_Country Location::R124;
constexpr Location_Country Location::R304;
constexpr Location_Country Location::R666;
constexpr Location_Country Location::R840;
constexpr Location_Country Location::R010;
constexpr Location_Country Location::R142;
constexpr Location_Country Location::R143;
constexpr Location_Country Location::R398;
constexpr Location_Country Location::R417;
constexpr Location_Country Location::R762;
constexpr Location_Country Location::R795;
constexpr Location_Country Location::R860;
constexpr Location_Country Location::R030;
constexpr Location_Country Location::R156;
constexpr Location_Country Location::R344;
constexpr Location_Country Location::R446;
constexpr Location_Country Location::R408;
constexpr Location_Country Location::R392;
constexpr Location_Country Location::R496;
constexpr Location_Country Location::R410;
constexpr Location_Country Location::R035;
constexpr Location_Country Location::R096;
constexpr Location_Country Location::R116;
constexpr Location_Country Location::R360;
constexpr Location_Country Location::R418;
constexpr Location_Country Location::R458;
constexpr Location_Country Location::R104;
constexpr Location_Country Location::R608;
constexpr Location_Country Location::R702;
constexpr Location_Country Location::R764;
constexpr Location_Country Location::R626;
constexpr Location_Country Location::R704;
constexpr Location_Country Location::R034;
constexpr Location_Country Location::R004;
constexpr Location_Country Location::R050;
constexpr Location_Country Location::R064;
constexpr Location_Country Location::R356;
constexpr Location_Country Location::R364;
constexpr Location_Country Location::R462;
constexpr Location_Country Location::R524;
constexpr Location_Country Location::R586;
constexpr Location_Country Location::R144;
constexpr Location_Country Location::R145;
constexpr Location_Country Location::R051;
constexpr Location_Country Location::R031;
constexpr Location_Country Location::R048;
constexpr Location_Country Location::R196;
constexpr Location_Country Location::R268;
constexpr Location_Country Location::R368;
constexpr Location_Country Location::R376;
constexpr Location_Country Location::R400;
constexpr Location_Country Location::R414;
constexpr Location_Country Location::R422;
constexpr Location_Country Location::R512;
constexpr Location_Country Location::R634;
constexpr Location_Country Location::R682;
constexpr Location_Country Location::R275;
constexpr Location_Country Location::R760;
constexpr Location_Country Location::R792;
constexpr Location_Country Location::R784;
constexpr Location_Country Location::R887;
constexpr Location_Country Location::R150;
constexpr Location_Country Location::R151;
constexpr Location_Country Location::R112;
constexpr Location_Country Location::R100;
constexpr Location_Country Location::R203;
constexpr Location_Country Location::R348;
constexpr Location_Country Location::R616;
constexpr Location_Country Location::R498;
constexpr Location_Country Location::R642;
constexpr Location_Country Location::R643;
constexpr Location_Country Location::R703;
constexpr Location_Country Location::R804;
constexpr Location_Country Location::R154;
constexpr Location_Country Location::R248;
constexpr Location_Country Location::R830;
constexpr Location_Country Location::R831;
constexpr Location_Country Location::R832;
constexpr Location_Country Location::R680;
constexpr Location_Country Location::R208;
constexpr Location_Country Location::R233;
constexpr Location_Country Location::R234;
constexpr Location_Country Location::R246;
constexpr Location_Country Location::R352;
constexpr Location_Country Location::R372;
constexpr Location_Country Location::R833;
constexpr Location_Country Location::R428;
constexpr Location_Country Location::R440;
constexpr Location_Country Location::R578;
constexpr Location_Country Location::R744;
constexpr Location_Country Location::R752;
constexpr Location_Country Location::R826;
constexpr Location_Country Location::R039;
constexpr Location_Country Location::R008;
constexpr Location_Country Location::R020;
constexpr Location_Country Location::R070;
constexpr Location_Country Location::R191;
constexpr Location_Country Location::R292;
constexpr Location_Country Location::R300;
constexpr Location_Country Location::R336;
constexpr Location_Country Location::R380;
constexpr Location_Country Location::R470;
constexpr Location_Country Location::R499;
constexpr Location_Country Location::R807;
constexpr Location_Country Location::R620;
constexpr Location_Country Location::R674;
constexpr Location_Country Location::R688;
constexpr Location_Country Location::R705;
constexpr Location_Country Location::R724;
constexpr Location_Country Location::R155;
constexpr Location_Country Location::R040;
constexpr Location_Country Location::R056;
constexpr Location_Country Location::R250;
constexpr Location_Country Location::R276;
constexpr Location_Country Location::R438;
constexpr Location_Country Location::R442;
constexpr Location_Country Location::R492;
constexpr Location_Country Location::R528;
constexpr Location_Country Location::R756;
constexpr Location_Country Location::R009;
constexpr Location_Country Location::R053;
constexpr Location_Country Location::R036;
constexpr Location_Country Location::R162;
constexpr Location_Country Location::R166;
constexpr Location_Country Location::R334;
constexpr Location_Country Location::R554;
constexpr Location_Country Location::R574;
constexpr Location_Country Location::R054;
constexpr Location_Country Location::R242;
constexpr Location_Country Location::R540;
constexpr Location_Country Location::R598;
constexpr Location_Country Location::R090;
constexpr Location_Country Location::R548;
constexpr Location_Country Location::R057;
constexpr Location_Country Location::R316;
constexpr Location_Country Location::R296;
constexpr Location_Country Location::R584;
constexpr Location_Country Location::R583;
constexpr Location_Country Location::R520;
constexpr Location_Country Location::R580;
constexpr Location_Country Location::R585;
constexpr Location_Country Location::R581;
constexpr Location_Country Location::R061;
constexpr Location_Country Location::R016;
constexpr Location_Country Location::R184;
constexpr Location_Country Location::R258;
constexpr Location_Country Location::R570;
constexpr Location_Country Location::R612;
constexpr Location_Country Location::R882;
constexpr Location_Country Location::R772;
constexpr Location_Country Location::R776;
constexpr Location_Country Location::R798;
constexpr Location_Country Location::R876;
constexpr Location_Country Location::Country_MIN;
constexpr Location_Country Location::Country_MAX;
constexpr int Location::Country_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Claim::_Internal {
 public:
  static const ::pb::Stream& stream(const Claim* msg);
  static const ::pb::Channel& channel(const Claim* msg);
  static const ::pb::ClaimList& collection(const Claim* msg);
  static const ::pb::ModifyingClaimReference& repost(const Claim* msg);
  static const ::pb::Source& thumbnail(const Claim* msg);
};

const ::pb::Stream&
Claim::_Internal::stream(const Claim* msg) {
  return *msg->type_.stream_;
}
const ::pb::Channel&
Claim::_Internal::channel(const Claim* msg) {
  return *msg->type_.channel_;
}
const ::pb::ClaimList&
Claim::_Internal::collection(const Claim* msg) {
  return *msg->type_.collection_;
}
const ::pb::ModifyingClaimReference&
Claim::_Internal::repost(const Claim* msg) {
  return *msg->type_.repost_;
}
const ::pb::Source&
Claim::_Internal::thumbnail(const Claim* msg) {
  return *msg->thumbnail_;
}
void Claim::set_allocated_stream(::pb::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    type_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Claim.stream)
}
void Claim::set_allocated_channel(::pb::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    set_has_channel();
    type_.channel_ = channel;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Claim.channel)
}
void Claim::set_allocated_collection(::pb::ClaimList* collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collection);
    if (message_arena != submessage_arena) {
      collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    set_has_collection();
    type_.collection_ = collection;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Claim.collection)
}
void Claim::set_allocated_repost(::pb::ModifyingClaimReference* repost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (repost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(repost);
    if (message_arena != submessage_arena) {
      repost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repost, submessage_arena);
    }
    set_has_repost();
    type_.repost_ = repost;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Claim.repost)
}
Claim::Claim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  languages_(arena),
  locations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Claim)
}
Claim::Claim(const Claim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_),
      languages_(from.languages_),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_thumbnail()) {
    thumbnail_ = new ::pb::Source(*from.thumbnail_);
  } else {
    thumbnail_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kStream: {
      _internal_mutable_stream()->::pb::Stream::MergeFrom(from._internal_stream());
      break;
    }
    case kChannel: {
      _internal_mutable_channel()->::pb::Channel::MergeFrom(from._internal_channel());
      break;
    }
    case kCollection: {
      _internal_mutable_collection()->::pb::ClaimList::MergeFrom(from._internal_collection());
      break;
    }
    case kRepost: {
      _internal_mutable_repost()->::pb::ModifyingClaimReference::MergeFrom(from._internal_repost());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.Claim)
}

inline void Claim::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_ = nullptr;
clear_has_type();
}

Claim::~Claim() {
  // @@protoc_insertion_point(destructor:pb.Claim)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Claim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  description_.Destroy();
  if (this != internal_default_instance()) delete thumbnail_;
  if (has_type()) {
    clear_type();
  }
}

void Claim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Claim::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:pb.Claim)
  switch (type_case()) {
    case kStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.stream_;
      }
      break;
    }
    case kChannel: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.channel_;
      }
      break;
    }
    case kCollection: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.collection_;
      }
      break;
    }
    case kRepost: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.repost_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Claim::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Claim)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  languages_.Clear();
  locations_.Clear();
  title_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && thumbnail_ != nullptr) {
    delete thumbnail_;
  }
  thumbnail_ = nullptr;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Claim::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Stream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Channel channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.ClaimList collection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_collection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.ModifyingClaimReference repost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_repost(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Claim.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Claim.description"));
        } else
          goto handle_unusual;
        continue;
      // .pb.Source thumbnail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "pb.Claim.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.Language languages = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.Location locations = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Claim::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Claim)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Stream stream = 1;
  if (_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // .pb.Channel channel = 2;
  if (_internal_has_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::channel(this),
        _Internal::channel(this).GetCachedSize(), target, stream);
  }

  // .pb.ClaimList collection = 3;
  if (_internal_has_collection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::collection(this),
        _Internal::collection(this).GetCachedSize(), target, stream);
  }

  // .pb.ModifyingClaimReference repost = 4;
  if (_internal_has_repost()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::repost(this),
        _Internal::repost(this).GetCachedSize(), target, stream);
  }

  // string title = 8;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Claim.title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_title(), target);
  }

  // string description = 9;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Claim.description");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_description(), target);
  }

  // .pb.Source thumbnail = 10;
  if (this->_internal_has_thumbnail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::thumbnail(this),
        _Internal::thumbnail(this).GetCachedSize(), target, stream);
  }

  // repeated string tags = 11;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Claim.tags");
    target = stream->WriteString(11, s, target);
  }

  // repeated .pb.Language languages = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_languages_size()); i < n; i++) {
    const auto& repfield = this->_internal_languages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb.Location locations = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Claim)
  return target;
}

size_t Claim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Claim)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated .pb.Language languages = 12;
  total_size += 1UL * this->_internal_languages_size();
  for (const auto& msg : this->languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.Location locations = 13;
  total_size += 1UL * this->_internal_locations_size();
  for (const auto& msg : this->locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 8;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 9;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .pb.Source thumbnail = 10;
  if (this->_internal_has_thumbnail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thumbnail_);
  }

  switch (type_case()) {
    // .pb.Stream stream = 1;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.stream_);
      break;
    }
    // .pb.Channel channel = 2;
    case kChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.channel_);
      break;
    }
    // .pb.ClaimList collection = 3;
    case kCollection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.collection_);
      break;
    }
    // .pb.ModifyingClaimReference repost = 4;
    case kRepost: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.repost_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Claim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Claim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Claim::GetClassData() const { return &_class_data_; }

void Claim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Claim *>(to)->MergeFrom(
      static_cast<const Claim &>(from));
}


void Claim::MergeFrom(const Claim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Claim)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  languages_.MergeFrom(from.languages_);
  locations_.MergeFrom(from.locations_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_thumbnail()) {
    _internal_mutable_thumbnail()->::pb::Source::MergeFrom(from._internal_thumbnail());
  }
  switch (from.type_case()) {
    case kStream: {
      _internal_mutable_stream()->::pb::Stream::MergeFrom(from._internal_stream());
      break;
    }
    case kChannel: {
      _internal_mutable_channel()->::pb::Channel::MergeFrom(from._internal_channel());
      break;
    }
    case kCollection: {
      _internal_mutable_collection()->::pb::ClaimList::MergeFrom(from._internal_collection());
      break;
    }
    case kRepost: {
      _internal_mutable_repost()->::pb::ModifyingClaimReference::MergeFrom(from._internal_repost());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Claim::CopyFrom(const Claim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Claim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Claim::IsInitialized() const {
  return true;
}

void Claim::InternalSwap(Claim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  languages_.InternalSwap(&other->languages_);
  locations_.InternalSwap(&other->locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(thumbnail_, other->thumbnail_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Claim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[0]);
}

// ===================================================================

Stream_ExtensionsEntry_DoNotUse::Stream_ExtensionsEntry_DoNotUse() {}
Stream_ExtensionsEntry_DoNotUse::Stream_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Stream_ExtensionsEntry_DoNotUse::MergeFrom(const Stream_ExtensionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Stream_ExtensionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[1]);
}

// ===================================================================

Stream_Modifiable_ExtensionsEntry_DoNotUse::Stream_Modifiable_ExtensionsEntry_DoNotUse() {}
Stream_Modifiable_ExtensionsEntry_DoNotUse::Stream_Modifiable_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Stream_Modifiable_ExtensionsEntry_DoNotUse::MergeFrom(const Stream_Modifiable_ExtensionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Stream_Modifiable_ExtensionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[2]);
}

// ===================================================================

class Stream_Modifiable::_Internal {
 public:
};

void Stream_Modifiable::clear_extensions() {
  extensions_.Clear();
}
Stream_Modifiable::Stream_Modifiable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extensions_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Stream_Modifiable::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Stream.Modifiable)
}
Stream_Modifiable::Stream_Modifiable(const Stream_Modifiable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extensions_.MergeFrom(from.extensions_);
  // @@protoc_insertion_point(copy_constructor:pb.Stream.Modifiable)
}

inline void Stream_Modifiable::SharedCtor() {
}

Stream_Modifiable::~Stream_Modifiable() {
  // @@protoc_insertion_point(destructor:pb.Stream.Modifiable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Stream_Modifiable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extensions_.Destruct();
}

void Stream_Modifiable::ArenaDtor(void* object) {
  Stream_Modifiable* _this = reinterpret_cast< Stream_Modifiable* >(object);
  _this->extensions_.Destruct();
}
void Stream_Modifiable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stream_Modifiable::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Stream.Modifiable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream_Modifiable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .google.protobuf.Any> extensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extensions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream_Modifiable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Stream.Modifiable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> extensions = 1;
  if (!this->_internal_extensions().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = Stream_Modifiable_ExtensionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_extensions();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "pb.Stream.Modifiable.ExtensionsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Stream.Modifiable)
  return target;
}

size_t Stream_Modifiable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Stream.Modifiable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> extensions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extensions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_extensions().begin();
      it != this->_internal_extensions().end(); ++it) {
    total_size += Stream_Modifiable_ExtensionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream_Modifiable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stream_Modifiable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream_Modifiable::GetClassData() const { return &_class_data_; }

void Stream_Modifiable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stream_Modifiable *>(to)->MergeFrom(
      static_cast<const Stream_Modifiable &>(from));
}


void Stream_Modifiable::MergeFrom(const Stream_Modifiable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Stream.Modifiable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream_Modifiable::CopyFrom(const Stream_Modifiable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Stream.Modifiable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Modifiable::IsInitialized() const {
  return true;
}

void Stream_Modifiable::InternalSwap(Stream_Modifiable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extensions_.InternalSwap(&other->extensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Modifiable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[3]);
}

// ===================================================================

class Stream::_Internal {
 public:
  static const ::pb::Source& source(const Stream* msg);
  static const ::pb::Fee& fee(const Stream* msg);
  static const ::pb::Image& image(const Stream* msg);
  static const ::pb::Video& video(const Stream* msg);
  static const ::pb::Audio& audio(const Stream* msg);
  static const ::pb::Software& software(const Stream* msg);
};

const ::pb::Source&
Stream::_Internal::source(const Stream* msg) {
  return *msg->source_;
}
const ::pb::Fee&
Stream::_Internal::fee(const Stream* msg) {
  return *msg->fee_;
}
const ::pb::Image&
Stream::_Internal::image(const Stream* msg) {
  return *msg->type_.image_;
}
const ::pb::Video&
Stream::_Internal::video(const Stream* msg) {
  return *msg->type_.video_;
}
const ::pb::Audio&
Stream::_Internal::audio(const Stream* msg) {
  return *msg->type_.audio_;
}
const ::pb::Software&
Stream::_Internal::software(const Stream* msg) {
  return *msg->type_.software_;
}
void Stream::set_allocated_image(::pb::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    type_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Stream.image)
}
void Stream::set_allocated_video(::pb::Video* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    set_has_video();
    type_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Stream.video)
}
void Stream::set_allocated_audio(::pb::Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    type_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Stream.audio)
}
void Stream::set_allocated_software(::pb::Software* software) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (software) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(software);
    if (message_arena != submessage_arena) {
      software = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, software, submessage_arena);
    }
    set_has_software();
    type_.software_ = software;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Stream.software)
}
void Stream::clear_extensions() {
  extensions_.Clear();
}
Stream::Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extensions_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Stream::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pb.Stream)
}
Stream::Stream(const Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extensions_.MergeFrom(from.extensions_);
  author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author().empty()) {
    author_.Set(from._internal_author(), 
      GetArenaForAllocation());
  }
  license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    license_.Set(from._internal_license(), 
      GetArenaForAllocation());
  }
  license_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license_url().empty()) {
    license_url_.Set(from._internal_license_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    source_ = new ::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_fee()) {
    fee_ = new ::pb::Fee(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  release_time_ = from.release_time_;
  clear_has_type();
  switch (from.type_case()) {
    case kImage: {
      _internal_mutable_image()->::pb::Image::MergeFrom(from._internal_image());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::pb::Video::MergeFrom(from._internal_video());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::pb::Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kSoftware: {
      _internal_mutable_software()->::pb::Software::MergeFrom(from._internal_software());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.Stream)
}

inline void Stream::SharedCtor() {
author_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  author_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&release_time_) -
    reinterpret_cast<char*>(&source_)) + sizeof(release_time_));
clear_has_type();
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:pb.Stream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extensions_.Destruct();
  author_.Destroy();
  license_.Destroy();
  license_url_.Destroy();
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete fee_;
  if (has_type()) {
    clear_type();
  }
}

void Stream::ArenaDtor(void* object) {
  Stream* _this = reinterpret_cast< Stream* >(object);
  _this->extensions_.Destruct();
}
void Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stream::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:pb.Stream)
  switch (type_case()) {
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.image_;
      }
      break;
    }
    case kVideo: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.video_;
      }
      break;
    }
    case kAudio: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.audio_;
      }
      break;
    }
    case kSoftware: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.software_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Stream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  author_.ClearToEmpty();
  license_.ClearToEmpty();
  license_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  release_time_ = int64_t{0};
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_author();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Stream.author"));
        } else
          goto handle_unusual;
        continue;
      // string license = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Stream.license"));
        } else
          goto handle_unusual;
        continue;
      // string license_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_license_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Stream.license_url"));
        } else
          goto handle_unusual;
        continue;
      // int64 release_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          release_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Fee fee = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Image image = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Video video = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Audio audio = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Software software = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_software(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> extensions = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extensions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Stream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Source source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // string author = 2;
  if (!this->_internal_author().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Stream.author");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_author(), target);
  }

  // string license = 3;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Stream.license");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_license(), target);
  }

  // string license_url = 4;
  if (!this->_internal_license_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license_url().data(), static_cast<int>(this->_internal_license_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Stream.license_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_license_url(), target);
  }

  // int64 release_time = 5;
  if (this->_internal_release_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_release_time(), target);
  }

  // .pb.Fee fee = 6;
  if (this->_internal_has_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fee(this),
        _Internal::fee(this).GetCachedSize(), target, stream);
  }

  // .pb.Image image = 10;
  if (_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // .pb.Video video = 11;
  if (_internal_has_video()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  // .pb.Audio audio = 12;
  if (_internal_has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // .pb.Software software = 13;
  if (_internal_has_software()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::software(this),
        _Internal::software(this).GetCachedSize(), target, stream);
  }

  // map<string, .google.protobuf.Any> extensions = 14;
  if (!this->_internal_extensions().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = Stream_ExtensionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_extensions();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "pb.Stream.ExtensionsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Stream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> extensions = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extensions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_extensions().begin();
      it != this->_internal_extensions().end(); ++it) {
    total_size += Stream_ExtensionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string author = 2;
  if (!this->_internal_author().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string license = 3;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // string license_url = 4;
  if (!this->_internal_license_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license_url());
  }

  // .pb.Source source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .pb.Fee fee = 6;
  if (this->_internal_has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // int64 release_time = 5;
  if (this->_internal_release_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_release_time());
  }

  switch (type_case()) {
    // .pb.Image image = 10;
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.image_);
      break;
    }
    // .pb.Video video = 11;
    case kVideo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.video_);
      break;
    }
    // .pb.Audio audio = 12;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.audio_);
      break;
    }
    // .pb.Software software = 13;
    case kSoftware: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.software_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream::GetClassData() const { return &_class_data_; }

void Stream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stream *>(to)->MergeFrom(
      static_cast<const Stream &>(from));
}


void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  if (!from._internal_author().empty()) {
    _internal_set_author(from._internal_author());
  }
  if (!from._internal_license().empty()) {
    _internal_set_license(from._internal_license());
  }
  if (!from._internal_license_url().empty()) {
    _internal_set_license_url(from._internal_license_url());
  }
  if (from._internal_has_source()) {
    _internal_mutable_source()->::pb::Source::MergeFrom(from._internal_source());
  }
  if (from._internal_has_fee()) {
    _internal_mutable_fee()->::pb::Fee::MergeFrom(from._internal_fee());
  }
  if (from._internal_release_time() != 0) {
    _internal_set_release_time(from._internal_release_time());
  }
  switch (from.type_case()) {
    case kImage: {
      _internal_mutable_image()->::pb::Image::MergeFrom(from._internal_image());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::pb::Video::MergeFrom(from._internal_video());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::pb::Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kSoftware: {
      _internal_mutable_software()->::pb::Software::MergeFrom(from._internal_software());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::InternalSwap(Stream* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extensions_.InternalSwap(&other->extensions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &author_, lhs_arena,
      &other->author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &license_, lhs_arena,
      &other->license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &license_url_, lhs_arena,
      &other->license_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stream, release_time_)
      + sizeof(Stream::release_time_)
      - PROTOBUF_FIELD_OFFSET(Stream, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[4]);
}

// ===================================================================

class ModifyStream::_Internal {
 public:
  static const ::pb::Stream_Modifiable& deletions(const ModifyStream* msg);
  static const ::pb::Stream_Modifiable& edits(const ModifyStream* msg);
};

const ::pb::Stream_Modifiable&
ModifyStream::_Internal::deletions(const ModifyStream* msg) {
  return *msg->deletions_;
}
const ::pb::Stream_Modifiable&
ModifyStream::_Internal::edits(const ModifyStream* msg) {
  return *msg->edits_;
}
ModifyStream::ModifyStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.ModifyStream)
}
ModifyStream::ModifyStream(const ModifyStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deletions()) {
    deletions_ = new ::pb::Stream_Modifiable(*from.deletions_);
  } else {
    deletions_ = nullptr;
  }
  if (from._internal_has_edits()) {
    edits_ = new ::pb::Stream_Modifiable(*from.edits_);
  } else {
    edits_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ModifyStream)
}

inline void ModifyStream::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deletions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edits_) -
    reinterpret_cast<char*>(&deletions_)) + sizeof(edits_));
}

ModifyStream::~ModifyStream() {
  // @@protoc_insertion_point(destructor:pb.ModifyStream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyStream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete deletions_;
  if (this != internal_default_instance()) delete edits_;
}

void ModifyStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyStream::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ModifyStream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && deletions_ != nullptr) {
    delete deletions_;
  }
  deletions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edits_ != nullptr) {
    delete edits_;
  }
  edits_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyStream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Stream.Modifiable deletions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Stream.Modifiable edits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyStream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ModifyStream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Stream.Modifiable deletions = 1;
  if (this->_internal_has_deletions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deletions(this),
        _Internal::deletions(this).GetCachedSize(), target, stream);
  }

  // .pb.Stream.Modifiable edits = 2;
  if (this->_internal_has_edits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::edits(this),
        _Internal::edits(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ModifyStream)
  return target;
}

size_t ModifyStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ModifyStream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Stream.Modifiable deletions = 1;
  if (this->_internal_has_deletions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deletions_);
  }

  // .pb.Stream.Modifiable edits = 2;
  if (this->_internal_has_edits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edits_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModifyStream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyStream::GetClassData() const { return &_class_data_; }

void ModifyStream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModifyStream *>(to)->MergeFrom(
      static_cast<const ModifyStream &>(from));
}


void ModifyStream::MergeFrom(const ModifyStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ModifyStream)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deletions()) {
    _internal_mutable_deletions()->::pb::Stream_Modifiable::MergeFrom(from._internal_deletions());
  }
  if (from._internal_has_edits()) {
    _internal_mutable_edits()->::pb::Stream_Modifiable::MergeFrom(from._internal_edits());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyStream::CopyFrom(const ModifyStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ModifyStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyStream::IsInitialized() const {
  return true;
}

void ModifyStream::InternalSwap(ModifyStream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyStream, edits_)
      + sizeof(ModifyStream::edits_)
      - PROTOBUF_FIELD_OFFSET(ModifyStream, deletions_)>(
          reinterpret_cast<char*>(&deletions_),
          reinterpret_cast<char*>(&other->deletions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[5]);
}

// ===================================================================

class Channel::_Internal {
 public:
  static const ::pb::Source& cover(const Channel* msg);
  static const ::pb::ClaimList& featured(const Channel* msg);
};

const ::pb::Source&
Channel::_Internal::cover(const Channel* msg) {
  return *msg->cover_;
}
const ::pb::ClaimList&
Channel::_Internal::featured(const Channel* msg) {
  return *msg->featured_;
}
Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(from._internal_public_key(), 
      GetArenaForAllocation());
  }
  email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(from._internal_email(), 
      GetArenaForAllocation());
  }
  website_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    website_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_website_url().empty()) {
    website_url_.Set(from._internal_website_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cover()) {
    cover_ = new ::pb::Source(*from.cover_);
  } else {
    cover_ = nullptr;
  }
  if (from._internal_has_featured()) {
    featured_ = new ::pb::ClaimList(*from.featured_);
  } else {
    featured_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.Channel)
}

inline void Channel::SharedCtor() {
public_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
website_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  website_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cover_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&featured_) -
    reinterpret_cast<char*>(&cover_)) + sizeof(featured_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:pb.Channel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.Destroy();
  email_.Destroy();
  website_url_.Destroy();
  if (this != internal_default_instance()) delete cover_;
  if (this != internal_default_instance()) delete featured_;
}

void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Channel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  email_.ClearToEmpty();
  website_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && cover_ != nullptr) {
    delete cover_;
  }
  cover_ = nullptr;
  if (GetArenaForAllocation() == nullptr && featured_ != nullptr) {
    delete featured_;
  }
  featured_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Channel.email"));
        } else
          goto handle_unusual;
        continue;
      // string website_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_website_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Channel.website_url"));
        } else
          goto handle_unusual;
        continue;
      // .pb.Source cover = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.ClaimList featured = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_featured(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Channel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Channel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Channel.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string website_url = 3;
  if (!this->_internal_website_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_website_url().data(), static_cast<int>(this->_internal_website_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Channel.website_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_website_url(), target);
  }

  // .pb.Source cover = 4;
  if (this->_internal_has_cover()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cover(this),
        _Internal::cover(this).GetCachedSize(), target, stream);
  }

  // .pb.ClaimList featured = 5;
  if (this->_internal_has_featured()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::featured(this),
        _Internal::featured(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Channel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string website_url = 3;
  if (!this->_internal_website_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_website_url());
  }

  // .pb.Source cover = 4;
  if (this->_internal_has_cover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cover_);
  }

  // .pb.ClaimList featured = 5;
  if (this->_internal_has_featured()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *featured_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Channel::GetClassData() const { return &_class_data_; }

void Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Channel *>(to)->MergeFrom(
      static_cast<const Channel &>(from));
}


void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_website_url().empty()) {
    _internal_set_website_url(from._internal_website_url());
  }
  if (from._internal_has_cover()) {
    _internal_mutable_cover()->::pb::Source::MergeFrom(from._internal_cover());
  }
  if (from._internal_has_featured()) {
    _internal_mutable_featured()->::pb::ClaimList::MergeFrom(from._internal_featured());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &website_url_, lhs_arena,
      &other->website_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Channel, featured_)
      + sizeof(Channel::featured_)
      - PROTOBUF_FIELD_OFFSET(Channel, cover_)>(
          reinterpret_cast<char*>(&cover_),
          reinterpret_cast<char*>(&other->cover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[6]);
}

// ===================================================================

class ClaimReference::_Internal {
 public:
};

ClaimReference::ClaimReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.ClaimReference)
}
ClaimReference::ClaimReference(const ClaimReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  claim_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    claim_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_claim_hash().empty()) {
    claim_hash_.Set(from._internal_claim_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.ClaimReference)
}

inline void ClaimReference::SharedCtor() {
claim_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  claim_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClaimReference::~ClaimReference() {
  // @@protoc_insertion_point(destructor:pb.ClaimReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClaimReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  claim_hash_.Destroy();
}

void ClaimReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClaimReference::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ClaimReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claim_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClaimReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes claim_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_claim_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClaimReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ClaimReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes claim_hash = 1;
  if (!this->_internal_claim_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_claim_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ClaimReference)
  return target;
}

size_t ClaimReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ClaimReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes claim_hash = 1;
  if (!this->_internal_claim_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_claim_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClaimReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClaimReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClaimReference::GetClassData() const { return &_class_data_; }

void ClaimReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClaimReference *>(to)->MergeFrom(
      static_cast<const ClaimReference &>(from));
}


void ClaimReference::MergeFrom(const ClaimReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ClaimReference)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_claim_hash().empty()) {
    _internal_set_claim_hash(from._internal_claim_hash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClaimReference::CopyFrom(const ClaimReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ClaimReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimReference::IsInitialized() const {
  return true;
}

void ClaimReference::InternalSwap(ClaimReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &claim_hash_, lhs_arena,
      &other->claim_hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[7]);
}

// ===================================================================

class ModifyingClaimReference::_Internal {
 public:
  static const ::pb::ModifyStream& stream(const ModifyingClaimReference* msg);
};

const ::pb::ModifyStream&
ModifyingClaimReference::_Internal::stream(const ModifyingClaimReference* msg) {
  return *msg->type_.stream_;
}
void ModifyingClaimReference::set_allocated_stream(::pb::ModifyStream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    type_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ModifyingClaimReference.stream)
}
ModifyingClaimReference::ModifyingClaimReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.ModifyingClaimReference)
}
ModifyingClaimReference::ModifyingClaimReference(const ModifyingClaimReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  claim_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    claim_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_claim_hash().empty()) {
    claim_hash_.Set(from._internal_claim_hash(), 
      GetArenaForAllocation());
  }
  clear_has_type();
  switch (from.type_case()) {
    case kStream: {
      _internal_mutable_stream()->::pb::ModifyStream::MergeFrom(from._internal_stream());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.ModifyingClaimReference)
}

inline void ModifyingClaimReference::SharedCtor() {
claim_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  claim_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_type();
}

ModifyingClaimReference::~ModifyingClaimReference() {
  // @@protoc_insertion_point(destructor:pb.ModifyingClaimReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyingClaimReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  claim_hash_.Destroy();
  if (has_type()) {
    clear_type();
  }
}

void ModifyingClaimReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyingClaimReference::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:pb.ModifyingClaimReference)
  switch (type_case()) {
    case kStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.stream_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ModifyingClaimReference::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ModifyingClaimReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claim_hash_.ClearToEmpty();
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyingClaimReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes claim_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_claim_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.ModifyStream stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyingClaimReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ModifyingClaimReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes claim_hash = 1;
  if (!this->_internal_claim_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_claim_hash(), target);
  }

  // .pb.ModifyStream stream = 2;
  if (_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ModifyingClaimReference)
  return target;
}

size_t ModifyingClaimReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ModifyingClaimReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes claim_hash = 1;
  if (!this->_internal_claim_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_claim_hash());
  }

  switch (type_case()) {
    // .pb.ModifyStream stream = 2;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.stream_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyingClaimReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModifyingClaimReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyingClaimReference::GetClassData() const { return &_class_data_; }

void ModifyingClaimReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModifyingClaimReference *>(to)->MergeFrom(
      static_cast<const ModifyingClaimReference &>(from));
}


void ModifyingClaimReference::MergeFrom(const ModifyingClaimReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ModifyingClaimReference)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_claim_hash().empty()) {
    _internal_set_claim_hash(from._internal_claim_hash());
  }
  switch (from.type_case()) {
    case kStream: {
      _internal_mutable_stream()->::pb::ModifyStream::MergeFrom(from._internal_stream());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyingClaimReference::CopyFrom(const ModifyingClaimReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ModifyingClaimReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyingClaimReference::IsInitialized() const {
  return true;
}

void ModifyingClaimReference::InternalSwap(ModifyingClaimReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &claim_hash_, lhs_arena,
      &other->claim_hash_, rhs_arena
  );
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyingClaimReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[8]);
}

// ===================================================================

class ClaimList::_Internal {
 public:
};

ClaimList::ClaimList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  claim_references_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.ClaimList)
}
ClaimList::ClaimList(const ClaimList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      claim_references_(from.claim_references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  list_type_ = from.list_type_;
  // @@protoc_insertion_point(copy_constructor:pb.ClaimList)
}

inline void ClaimList::SharedCtor() {
list_type_ = 0;
}

ClaimList::~ClaimList() {
  // @@protoc_insertion_point(destructor:pb.ClaimList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClaimList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClaimList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClaimList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ClaimList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claim_references_.Clear();
  list_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClaimList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.ClaimList.ListType list_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_list_type(static_cast<::pb::ClaimList_ListType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.ClaimReference claim_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_claim_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClaimList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ClaimList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ClaimList.ListType list_type = 1;
  if (this->_internal_list_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_list_type(), target);
  }

  // repeated .pb.ClaimReference claim_references = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_claim_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_claim_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ClaimList)
  return target;
}

size_t ClaimList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ClaimList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ClaimReference claim_references = 2;
  total_size += 1UL * this->_internal_claim_references_size();
  for (const auto& msg : this->claim_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.ClaimList.ListType list_type = 1;
  if (this->_internal_list_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_list_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClaimList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClaimList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClaimList::GetClassData() const { return &_class_data_; }

void ClaimList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClaimList *>(to)->MergeFrom(
      static_cast<const ClaimList &>(from));
}


void ClaimList::MergeFrom(const ClaimList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ClaimList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  claim_references_.MergeFrom(from.claim_references_);
  if (from._internal_list_type() != 0) {
    _internal_set_list_type(from._internal_list_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClaimList::CopyFrom(const ClaimList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ClaimList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimList::IsInitialized() const {
  return true;
}

void ClaimList::InternalSwap(ClaimList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  claim_references_.InternalSwap(&other->claim_references_);
  swap(list_type_, other->list_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[9]);
}

// ===================================================================

class Source::_Internal {
 public:
};

Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(from._internal_hash(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  media_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    media_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_type().empty()) {
    media_type_.Set(from._internal_media_type(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  sd_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sd_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sd_hash().empty()) {
    sd_hash_.Set(from._internal_sd_hash(), 
      GetArenaForAllocation());
  }
  bt_infohash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bt_infohash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bt_infohash().empty()) {
    bt_infohash_.Set(from._internal_bt_infohash(), 
      GetArenaForAllocation());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:pb.Source)
}

inline void Source::SharedCtor() {
hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
media_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  media_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sd_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sd_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bt_infohash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bt_infohash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
size_ = uint64_t{0u};
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:pb.Source)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.Destroy();
  name_.Destroy();
  media_type_.Destroy();
  url_.Destroy();
  sd_hash_.Destroy();
  bt_infohash_.Destroy();
}

void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Source)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  name_.ClearToEmpty();
  media_type_.ClearToEmpty();
  url_.ClearToEmpty();
  sd_hash_.ClearToEmpty();
  bt_infohash_.ClearToEmpty();
  size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Source::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Source.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string media_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_media_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Source.media_type"));
        } else
          goto handle_unusual;
        continue;
      // string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Source.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes sd_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sd_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bt_infohash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_bt_infohash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Source::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Source)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Source.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // string media_type = 4;
  if (!this->_internal_media_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_type().data(), static_cast<int>(this->_internal_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Source.media_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_media_type(), target);
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Source.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // bytes sd_hash = 6;
  if (!this->_internal_sd_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sd_hash(), target);
  }

  // bytes bt_infohash = 7;
  if (!this->_internal_bt_infohash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_bt_infohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Source)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string media_type = 4;
  if (!this->_internal_media_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_type());
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes sd_hash = 6;
  if (!this->_internal_sd_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sd_hash());
  }

  // bytes bt_infohash = 7;
  if (!this->_internal_bt_infohash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bt_infohash());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Source::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Source::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Source::GetClassData() const { return &_class_data_; }

void Source::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Source *>(to)->MergeFrom(
      static_cast<const Source &>(from));
}


void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Source)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_media_type().empty()) {
    _internal_set_media_type(from._internal_media_type());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_sd_hash().empty()) {
    _internal_set_sd_hash(from._internal_sd_hash());
  }
  if (!from._internal_bt_infohash().empty()) {
    _internal_set_bt_infohash(from._internal_bt_infohash());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &media_type_, lhs_arena,
      &other->media_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sd_hash_, lhs_arena,
      &other->sd_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bt_infohash_, lhs_arena,
      &other->bt_infohash_, rhs_arena
  );
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Source::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[10]);
}

// ===================================================================

class Fee::_Internal {
 public:
};

Fee::Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Fee)
}
Fee::Fee(const Fee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:pb.Fee)
}

inline void Fee::SharedCtor() {
address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(currency_));
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:pb.Fee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.Destroy();
}

void Fee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Fee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(currency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Fee.Currency currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_currency(static_cast<::pb::Fee_Currency>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Fee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Fee.Currency currency = 1;
  if (this->_internal_currency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_currency(), target);
  }

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_address(), target);
  }

  // uint64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Fee)
  return target;
}

size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Fee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // .pb.Fee.Currency currency = 1;
  if (this->_internal_currency() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_currency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fee::GetClassData() const { return &_class_data_; }

void Fee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fee *>(to)->MergeFrom(
      static_cast<const Fee &>(from));
}


void Fee::MergeFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_currency() != 0) {
    _internal_set_currency(from._internal_currency());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  return true;
}

void Fee::InternalSwap(Fee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fee, currency_)
      + sizeof(Fee::currency_)
      - PROTOBUF_FIELD_OFFSET(Fee, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[11]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:pb.Image)
}

inline void Image::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:pb.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, height_)
      + sizeof(Image::height_)
      - PROTOBUF_FIELD_OFFSET(Image, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[12]);
}

// ===================================================================

class Video::_Internal {
 public:
  static const ::pb::Audio& audio(const Video* msg);
};

const ::pb::Audio&
Video::_Internal::audio(const Video* msg) {
  return *msg->audio_;
}
Video::Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Video)
}
Video::Video(const Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio()) {
    audio_ = new ::pb::Audio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&width_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:pb.Video)
}

inline void Video::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(duration_));
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:pb.Video)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Video::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete audio_;
}

void Video::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Video::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Video)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&width_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Video::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.Audio audio = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Video::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Video)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // .pb.Audio audio = 15;
  if (this->_internal_has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Video)
  return target;
}

size_t Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Video)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Audio audio = 15;
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Video::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Video::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Video::GetClassData() const { return &_class_data_; }

void Video::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Video *>(to)->MergeFrom(
      static_cast<const Video &>(from));
}


void Video::MergeFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Video)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::pb::Audio::MergeFrom(from._internal_audio());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Video::CopyFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {
  return true;
}

void Video::InternalSwap(Video* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Video, duration_)
      + sizeof(Video::duration_)
      - PROTOBUF_FIELD_OFFSET(Video, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Video::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[13]);
}

// ===================================================================

class Audio::_Internal {
 public:
};

Audio::Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Audio)
}
Audio::Audio(const Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:pb.Audio)
}

inline void Audio::SharedCtor() {
duration_ = 0u;
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:pb.Audio)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Audio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Audio::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Audio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Audio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Audio)
  return target;
}

size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Audio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Audio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Audio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Audio::GetClassData() const { return &_class_data_; }

void Audio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Audio *>(to)->MergeFrom(
      static_cast<const Audio &>(from));
}


void Audio::MergeFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  return true;
}

void Audio::InternalSwap(Audio* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Audio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[14]);
}

// ===================================================================

class Software::_Internal {
 public:
};

Software::Software(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Software)
}
Software::Software(const Software& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    os_.Set(from._internal_os(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.Software)
}

inline void Software::SharedCtor() {
os_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Software::~Software() {
  // @@protoc_insertion_point(destructor:pb.Software)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Software::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  os_.Destroy();
}

void Software::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Software::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Software)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  os_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Software::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Software.os"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Software::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Software)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string os = 1;
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Software.os");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_os(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Software)
  return target;
}

size_t Software::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Software)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string os = 1;
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Software::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Software::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Software::GetClassData() const { return &_class_data_; }

void Software::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Software *>(to)->MergeFrom(
      static_cast<const Software &>(from));
}


void Software::MergeFrom(const Software& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Software)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_os().empty()) {
    _internal_set_os(from._internal_os());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Software::CopyFrom(const Software& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Software)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Software::IsInitialized() const {
  return true;
}

void Software::InternalSwap(Software* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &os_, lhs_arena,
      &other->os_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Software::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[15]);
}

// ===================================================================

class Language::_Internal {
 public:
};

Language::Language(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Language)
}
Language::Language(const Language& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&language_, &from.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&language_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:pb.Language)
}

inline void Language::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&language_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&language_)) + sizeof(region_));
}

Language::~Language() {
  // @@protoc_insertion_point(destructor:pb.Language)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Language::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Language::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Language::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Language)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&language_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&language_)) + sizeof(region_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Language::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Language.Language language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::pb::Language_Language>(val));
        } else
          goto handle_unusual;
        continue;
      // .pb.Language.Script script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_script(static_cast<::pb::Language_Script>(val));
        } else
          goto handle_unusual;
        continue;
      // .pb.Location.Country region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_region(static_cast<::pb::Location_Country>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Language::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Language)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Language.Language language = 1;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_language(), target);
  }

  // .pb.Language.Script script = 2;
  if (this->_internal_script() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_script(), target);
  }

  // .pb.Location.Country region = 3;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Language)
  return target;
}

size_t Language::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Language)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Language.Language language = 1;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  // .pb.Language.Script script = 2;
  if (this->_internal_script() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_script());
  }

  // .pb.Location.Country region = 3;
  if (this->_internal_region() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Language::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Language::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Language::GetClassData() const { return &_class_data_; }

void Language::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Language *>(to)->MergeFrom(
      static_cast<const Language &>(from));
}


void Language::MergeFrom(const Language& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Language)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_script() != 0) {
    _internal_set_script(from._internal_script());
  }
  if (from._internal_region() != 0) {
    _internal_set_region(from._internal_region());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Language::CopyFrom(const Language& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Language)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Language::IsInitialized() const {
  return true;
}

void Language::InternalSwap(Language* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Language, region_)
      + sizeof(Language::region_)
      - PROTOBUF_FIELD_OFFSET(Language, language_)>(
          reinterpret_cast<char*>(&language_),
          reinterpret_cast<char*>(&other->language_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Language::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[16]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    state_.Set(from._internal_state(), 
      GetArenaForAllocation());
  }
  city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city().empty()) {
    city_.Set(from._internal_city(), 
      GetArenaForAllocation());
  }
  code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(from._internal_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&country_, &from.country_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&country_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:pb.Location)
}

inline void Location::SharedCtor() {
state_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  state_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
city_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  city_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&country_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&country_)) + sizeof(longitude_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:pb.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  state_.Destroy();
  city_.Destroy();
  code_.Destroy();
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.ClearToEmpty();
  city_.ClearToEmpty();
  code_.ClearToEmpty();
  ::memset(&country_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&country_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Location.Country country = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_country(static_cast<::pb::Location_Country>(val));
        } else
          goto handle_unusual;
        continue;
      // string state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Location.state"));
        } else
          goto handle_unusual;
        continue;
      // string city = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Location.city"));
        } else
          goto handle_unusual;
        continue;
      // string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Location.code"));
        } else
          goto handle_unusual;
        continue;
      // sint32 latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Location.Country country = 1;
  if (this->_internal_country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_country(), target);
  }

  // string state = 2;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Location.state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state(), target);
  }

  // string city = 3;
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Location.city");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_city(), target);
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Location.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  // sint32 latitude = 5;
  if (this->_internal_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_latitude(), target);
  }

  // sint32 longitude = 6;
  if (this->_internal_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 2;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string city = 3;
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .pb.Location.Country country = 1;
  if (this->_internal_country() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_country());
  }

  // sint32 latitude = 5;
  if (this->_internal_latitude() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_latitude());
  }

  // sint32 longitude = 6;
  if (this->_internal_longitude() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_longitude());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (!from._internal_city().empty()) {
    _internal_set_city(from._internal_city());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_country() != 0) {
    _internal_set_country(from._internal_country());
  }
  if (from._internal_latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &state_, lhs_arena,
      &other->state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &city_, lhs_arena,
      &other->city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, longitude_)
      + sizeof(Location::longitude_)
      - PROTOBUF_FIELD_OFFSET(Location, country_)>(
          reinterpret_cast<char*>(&country_),
          reinterpret_cast<char*>(&other->country_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_claim_2eproto_getter, &descriptor_table_claim_2eproto_once,
      file_level_metadata_claim_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Claim*
Arena::CreateMaybeMessage< ::pb::Claim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Claim >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Stream_ExtensionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pb::Stream_ExtensionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Stream_ExtensionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Stream_Modifiable_ExtensionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Stream_Modifiable*
Arena::CreateMaybeMessage< ::pb::Stream_Modifiable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Stream_Modifiable >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Stream*
Arena::CreateMaybeMessage< ::pb::Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ModifyStream*
Arena::CreateMaybeMessage< ::pb::ModifyStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ModifyStream >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Channel*
Arena::CreateMaybeMessage< ::pb::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ClaimReference*
Arena::CreateMaybeMessage< ::pb::ClaimReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ClaimReference >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ModifyingClaimReference*
Arena::CreateMaybeMessage< ::pb::ModifyingClaimReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ModifyingClaimReference >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ClaimList*
Arena::CreateMaybeMessage< ::pb::ClaimList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ClaimList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Source*
Arena::CreateMaybeMessage< ::pb::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Fee*
Arena::CreateMaybeMessage< ::pb::Fee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Fee >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Image*
Arena::CreateMaybeMessage< ::pb::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Video*
Arena::CreateMaybeMessage< ::pb::Video >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Video >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Audio*
Arena::CreateMaybeMessage< ::pb::Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Software*
Arena::CreateMaybeMessage< ::pb::Software >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Software >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Language*
Arena::CreateMaybeMessage< ::pb::Language >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Language >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Location*
Arena::CreateMaybeMessage< ::pb::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Location >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
