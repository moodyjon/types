// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension.proto

#include "extension.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
PROTOBUF_CONSTEXPR Extension::Extension(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionDefaultTypeInternal() {}
  union {
    Extension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionDefaultTypeInternal _Extension_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_extension_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_extension_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_extension_2eproto = nullptr;

const uint32_t TableStruct_extension_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::Extension, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pb::Extension, type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::Extension)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::_Extension_default_instance_._instance,
};

const char descriptor_table_protodef_extension_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017extension.proto\022\002pb\032\034google/protobuf/s"
  "truct.proto\">\n\tExtension\022)\n\006struct\030\001 \001(\013"
  "2\027.google.protobuf.StructH\000B\006\n\004typeb\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_extension_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_extension_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_extension_2eproto = {
    false, false, 123, descriptor_table_protodef_extension_2eproto,
    "extension.proto",
    &descriptor_table_extension_2eproto_once, descriptor_table_extension_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_extension_2eproto::offsets,
    file_level_metadata_extension_2eproto, file_level_enum_descriptors_extension_2eproto,
    file_level_service_descriptors_extension_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_extension_2eproto_getter() {
  return &descriptor_table_extension_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_extension_2eproto(&descriptor_table_extension_2eproto);
namespace pb {

// ===================================================================

class Extension::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& struct_(const Extension* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
Extension::_Internal::struct_(const Extension* msg) {
  return *msg->type_.struct__;
}
void Extension::set_allocated_struct_(::PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_));
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Extension.struct)
}
void Extension::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.struct__;
    }
    clear_has_type();
  }
}
Extension::Extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.Extension)
}
Extension::Extension(const Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.Extension)
}

inline void Extension::SharedCtor() {
clear_has_type();
}

Extension::~Extension() {
  // @@protoc_insertion_point(destructor:pb.Extension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Extension::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:pb.Extension)
  switch (type_case()) {
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.struct__;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Extension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Extension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Extension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct struct = 1;
  if (_internal_has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Extension)
  return target;
}

size_t Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Extension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .google.protobuf.Struct struct = 1;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.struct__);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Extension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Extension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Extension::GetClassData() const { return &_class_data_; }

void Extension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Extension *>(to)->MergeFrom(
      static_cast<const Extension &>(from));
}


void Extension::MergeFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Extension::CopyFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  return true;
}

void Extension::InternalSwap(Extension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extension_2eproto_getter, &descriptor_table_extension_2eproto_once,
      file_level_metadata_extension_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Extension*
Arena::CreateMaybeMessage< ::pb::Extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Extension >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
