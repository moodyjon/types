// source: claim.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.pb.Audio', null, global);
goog.exportSymbol('proto.pb.Channel', null, global);
goog.exportSymbol('proto.pb.Claim', null, global);
goog.exportSymbol('proto.pb.Claim.TypeCase', null, global);
goog.exportSymbol('proto.pb.ClaimList', null, global);
goog.exportSymbol('proto.pb.ClaimList.ListType', null, global);
goog.exportSymbol('proto.pb.ClaimReference', null, global);
goog.exportSymbol('proto.pb.Fee', null, global);
goog.exportSymbol('proto.pb.Fee.Currency', null, global);
goog.exportSymbol('proto.pb.Image', null, global);
goog.exportSymbol('proto.pb.Language', null, global);
goog.exportSymbol('proto.pb.Language.Language', null, global);
goog.exportSymbol('proto.pb.Language.Script', null, global);
goog.exportSymbol('proto.pb.Location', null, global);
goog.exportSymbol('proto.pb.Location.Country', null, global);
goog.exportSymbol('proto.pb.ModifyStream', null, global);
goog.exportSymbol('proto.pb.ModifyStream.Modifiable', null, global);
goog.exportSymbol('proto.pb.ModifyingClaimReference', null, global);
goog.exportSymbol('proto.pb.ModifyingClaimReference.TypeCase', null, global);
goog.exportSymbol('proto.pb.Software', null, global);
goog.exportSymbol('proto.pb.Software.OS', null, global);
goog.exportSymbol('proto.pb.Source', null, global);
goog.exportSymbol('proto.pb.Stream', null, global);
goog.exportSymbol('proto.pb.Stream.Extension', null, global);
goog.exportSymbol('proto.pb.Stream.TypeCase', null, global);
goog.exportSymbol('proto.pb.Video', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Claim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Claim.repeatedFields_, proto.pb.Claim.oneofGroups_);
};
goog.inherits(proto.pb.Claim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Claim.displayName = 'proto.pb.Claim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Stream.repeatedFields_, proto.pb.Stream.oneofGroups_);
};
goog.inherits(proto.pb.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Stream.displayName = 'proto.pb.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Stream.Extension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Stream.Extension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Stream.Extension.displayName = 'proto.pb.Stream.Extension';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ModifyStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ModifyStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ModifyStream.displayName = 'proto.pb.ModifyStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ModifyStream.Modifiable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ModifyStream.Modifiable.repeatedFields_, null);
};
goog.inherits(proto.pb.ModifyStream.Modifiable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ModifyStream.Modifiable.displayName = 'proto.pb.ModifyStream.Modifiable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Channel.displayName = 'proto.pb.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ClaimReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ClaimReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ClaimReference.displayName = 'proto.pb.ClaimReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ModifyingClaimReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.ModifyingClaimReference.oneofGroups_);
};
goog.inherits(proto.pb.ModifyingClaimReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ModifyingClaimReference.displayName = 'proto.pb.ModifyingClaimReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ClaimList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ClaimList.repeatedFields_, null);
};
goog.inherits(proto.pb.ClaimList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ClaimList.displayName = 'proto.pb.ClaimList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Source.displayName = 'proto.pb.Source';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Fee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Fee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Fee.displayName = 'proto.pb.Fee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Image.displayName = 'proto.pb.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Video.displayName = 'proto.pb.Video';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Audio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Audio.displayName = 'proto.pb.Audio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Software = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Software, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Software.displayName = 'proto.pb.Software';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Language = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Language, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Language.displayName = 'proto.pb.Language';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Location.displayName = 'proto.pb.Location';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Claim.repeatedFields_ = [11,12,13];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Claim.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.pb.Claim.TypeCase = {
  TYPE_NOT_SET: 0,
  STREAM: 1,
  CHANNEL: 2,
  COLLECTION: 3,
  REPOST: 4
};

/**
 * @return {proto.pb.Claim.TypeCase}
 */
proto.pb.Claim.prototype.getTypeCase = function() {
  return /** @type {proto.pb.Claim.TypeCase} */(jspb.Message.computeOneofCase(this, proto.pb.Claim.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Claim.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Claim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Claim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Claim.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.pb.Stream.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.pb.Channel.toObject(includeInstance, f),
    collection: (f = msg.getCollection()) && proto.pb.ClaimList.toObject(includeInstance, f),
    repost: (f = msg.getRepost()) && proto.pb.ModifyingClaimReference.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 8, ""),
    description: jspb.Message.getFieldWithDefault(msg, 9, ""),
    thumbnail: (f = msg.getThumbnail()) && proto.pb.Source.toObject(includeInstance, f),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.pb.Language.toObject, includeInstance),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.pb.Location.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Claim}
 */
proto.pb.Claim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Claim;
  return proto.pb.Claim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Claim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Claim}
 */
proto.pb.Claim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Stream;
      reader.readMessage(value,proto.pb.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.pb.Channel;
      reader.readMessage(value,proto.pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = new proto.pb.ClaimList;
      reader.readMessage(value,proto.pb.ClaimList.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 4:
      var value = new proto.pb.ModifyingClaimReference;
      reader.readMessage(value,proto.pb.ModifyingClaimReference.deserializeBinaryFromReader);
      msg.setRepost(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 10:
      var value = new proto.pb.Source;
      reader.readMessage(value,proto.pb.Source.deserializeBinaryFromReader);
      msg.setThumbnail(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 12:
      var value = new proto.pb.Language;
      reader.readMessage(value,proto.pb.Language.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    case 13:
      var value = new proto.pb.Location;
      reader.readMessage(value,proto.pb.Location.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Claim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Claim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Claim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Claim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Stream.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Channel.serializeBinaryToWriter
    );
  }
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.ClaimList.serializeBinaryToWriter
    );
  }
  f = message.getRepost();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.ModifyingClaimReference.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getThumbnail();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.pb.Source.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.pb.Language.serializeBinaryToWriter
    );
  }
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.pb.Stream}
 */
proto.pb.Claim.prototype.getStream = function() {
  return /** @type{?proto.pb.Stream} */ (
    jspb.Message.getWrapperField(this, proto.pb.Stream, 1));
};


/**
 * @param {?proto.pb.Stream|undefined} value
 * @return {!proto.pb.Claim} returns this
*/
proto.pb.Claim.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.pb.Claim.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Claim.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Channel channel = 2;
 * @return {?proto.pb.Channel}
 */
proto.pb.Claim.prototype.getChannel = function() {
  return /** @type{?proto.pb.Channel} */ (
    jspb.Message.getWrapperField(this, proto.pb.Channel, 2));
};


/**
 * @param {?proto.pb.Channel|undefined} value
 * @return {!proto.pb.Claim} returns this
*/
proto.pb.Claim.prototype.setChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pb.Claim.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Claim.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClaimList collection = 3;
 * @return {?proto.pb.ClaimList}
 */
proto.pb.Claim.prototype.getCollection = function() {
  return /** @type{?proto.pb.ClaimList} */ (
    jspb.Message.getWrapperField(this, proto.pb.ClaimList, 3));
};


/**
 * @param {?proto.pb.ClaimList|undefined} value
 * @return {!proto.pb.Claim} returns this
*/
proto.pb.Claim.prototype.setCollection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.pb.Claim.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Claim.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ModifyingClaimReference repost = 4;
 * @return {?proto.pb.ModifyingClaimReference}
 */
proto.pb.Claim.prototype.getRepost = function() {
  return /** @type{?proto.pb.ModifyingClaimReference} */ (
    jspb.Message.getWrapperField(this, proto.pb.ModifyingClaimReference, 4));
};


/**
 * @param {?proto.pb.ModifyingClaimReference|undefined} value
 * @return {!proto.pb.Claim} returns this
*/
proto.pb.Claim.prototype.setRepost = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.pb.Claim.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearRepost = function() {
  return this.setRepost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Claim.prototype.hasRepost = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string title = 8;
 * @return {string}
 */
proto.pb.Claim.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.pb.Claim.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional Source thumbnail = 10;
 * @return {?proto.pb.Source}
 */
proto.pb.Claim.prototype.getThumbnail = function() {
  return /** @type{?proto.pb.Source} */ (
    jspb.Message.getWrapperField(this, proto.pb.Source, 10));
};


/**
 * @param {?proto.pb.Source|undefined} value
 * @return {!proto.pb.Claim} returns this
*/
proto.pb.Claim.prototype.setThumbnail = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearThumbnail = function() {
  return this.setThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Claim.prototype.hasThumbnail = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated string tags = 11;
 * @return {!Array<string>}
 */
proto.pb.Claim.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated Language languages = 12;
 * @return {!Array<!proto.pb.Language>}
 */
proto.pb.Claim.prototype.getLanguagesList = function() {
  return /** @type{!Array<!proto.pb.Language>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Language, 12));
};


/**
 * @param {!Array<!proto.pb.Language>} value
 * @return {!proto.pb.Claim} returns this
*/
proto.pb.Claim.prototype.setLanguagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.pb.Language=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Language}
 */
proto.pb.Claim.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.pb.Language, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearLanguagesList = function() {
  return this.setLanguagesList([]);
};


/**
 * repeated Location locations = 13;
 * @return {!Array<!proto.pb.Location>}
 */
proto.pb.Claim.prototype.getLocationsList = function() {
  return /** @type{!Array<!proto.pb.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Location, 13));
};


/**
 * @param {!Array<!proto.pb.Location>} value
 * @return {!proto.pb.Claim} returns this
*/
proto.pb.Claim.prototype.setLocationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.pb.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Location}
 */
proto.pb.Claim.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.pb.Location, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Claim} returns this
 */
proto.pb.Claim.prototype.clearLocationsList = function() {
  return this.setLocationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Stream.repeatedFields_ = [14];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Stream.oneofGroups_ = [[10,11,12,13]];

/**
 * @enum {number}
 */
proto.pb.Stream.TypeCase = {
  TYPE_NOT_SET: 0,
  IMAGE: 10,
  VIDEO: 11,
  AUDIO: 12,
  SOFTWARE: 13
};

/**
 * @return {proto.pb.Stream.TypeCase}
 */
proto.pb.Stream.prototype.getTypeCase = function() {
  return /** @type {proto.pb.Stream.TypeCase} */(jspb.Message.computeOneofCase(this, proto.pb.Stream.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.pb.Source.toObject(includeInstance, f),
    author: jspb.Message.getFieldWithDefault(msg, 2, ""),
    license: jspb.Message.getFieldWithDefault(msg, 3, ""),
    licenseUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    releaseTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fee: (f = msg.getFee()) && proto.pb.Fee.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.pb.Image.toObject(includeInstance, f),
    video: (f = msg.getVideo()) && proto.pb.Video.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.pb.Audio.toObject(includeInstance, f),
    software: (f = msg.getSoftware()) && proto.pb.Software.toObject(includeInstance, f),
    extensionsList: jspb.Message.toObjectList(msg.getExtensionsList(),
    proto.pb.Stream.Extension.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Stream}
 */
proto.pb.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Stream;
  return proto.pb.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Stream}
 */
proto.pb.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Source;
      reader.readMessage(value,proto.pb.Source.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicense(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenseUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReleaseTime(value);
      break;
    case 6:
      var value = new proto.pb.Fee;
      reader.readMessage(value,proto.pb.Fee.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 10:
      var value = new proto.pb.Image;
      reader.readMessage(value,proto.pb.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 11:
      var value = new proto.pb.Video;
      reader.readMessage(value,proto.pb.Video.deserializeBinaryFromReader);
      msg.setVideo(value);
      break;
    case 12:
      var value = new proto.pb.Audio;
      reader.readMessage(value,proto.pb.Audio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 13:
      var value = new proto.pb.Software;
      reader.readMessage(value,proto.pb.Software.deserializeBinaryFromReader);
      msg.setSoftware(value);
      break;
    case 14:
      var value = new proto.pb.Stream.Extension;
      reader.readMessage(value,proto.pb.Stream.Extension.deserializeBinaryFromReader);
      msg.addExtensions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Source.serializeBinaryToWriter
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLicense();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLicenseUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReleaseTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pb.Fee.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.pb.Image.serializeBinaryToWriter
    );
  }
  f = message.getVideo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.pb.Video.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.pb.Audio.serializeBinaryToWriter
    );
  }
  f = message.getSoftware();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.pb.Software.serializeBinaryToWriter
    );
  }
  f = message.getExtensionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.pb.Stream.Extension.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Stream.Extension.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Stream.Extension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Stream.Extension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Stream.Extension.toObject = function(includeInstance, msg) {
  var f, obj = {
    any: (f = msg.getAny()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Stream.Extension}
 */
proto.pb.Stream.Extension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Stream.Extension;
  return proto.pb.Stream.Extension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Stream.Extension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Stream.Extension}
 */
proto.pb.Stream.Extension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Stream.Extension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Stream.Extension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Stream.Extension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Stream.Extension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any any = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.pb.Stream.Extension.prototype.getAny = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.pb.Stream.Extension} returns this
*/
proto.pb.Stream.Extension.prototype.setAny = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Stream.Extension} returns this
 */
proto.pb.Stream.Extension.prototype.clearAny = function() {
  return this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Stream.Extension.prototype.hasAny = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Source source = 1;
 * @return {?proto.pb.Source}
 */
proto.pb.Stream.prototype.getSource = function() {
  return /** @type{?proto.pb.Source} */ (
    jspb.Message.getWrapperField(this, proto.pb.Source, 1));
};


/**
 * @param {?proto.pb.Source|undefined} value
 * @return {!proto.pb.Stream} returns this
*/
proto.pb.Stream.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Stream.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string author = 2;
 * @return {string}
 */
proto.pb.Stream.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.setAuthor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string license = 3;
 * @return {string}
 */
proto.pb.Stream.prototype.getLicense = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.setLicense = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string license_url = 4;
 * @return {string}
 */
proto.pb.Stream.prototype.getLicenseUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.setLicenseUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 release_time = 5;
 * @return {number}
 */
proto.pb.Stream.prototype.getReleaseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.setReleaseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Fee fee = 6;
 * @return {?proto.pb.Fee}
 */
proto.pb.Stream.prototype.getFee = function() {
  return /** @type{?proto.pb.Fee} */ (
    jspb.Message.getWrapperField(this, proto.pb.Fee, 6));
};


/**
 * @param {?proto.pb.Fee|undefined} value
 * @return {!proto.pb.Stream} returns this
*/
proto.pb.Stream.prototype.setFee = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.clearFee = function() {
  return this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Stream.prototype.hasFee = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Image image = 10;
 * @return {?proto.pb.Image}
 */
proto.pb.Stream.prototype.getImage = function() {
  return /** @type{?proto.pb.Image} */ (
    jspb.Message.getWrapperField(this, proto.pb.Image, 10));
};


/**
 * @param {?proto.pb.Image|undefined} value
 * @return {!proto.pb.Stream} returns this
*/
proto.pb.Stream.prototype.setImage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.pb.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Stream.prototype.hasImage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Video video = 11;
 * @return {?proto.pb.Video}
 */
proto.pb.Stream.prototype.getVideo = function() {
  return /** @type{?proto.pb.Video} */ (
    jspb.Message.getWrapperField(this, proto.pb.Video, 11));
};


/**
 * @param {?proto.pb.Video|undefined} value
 * @return {!proto.pb.Stream} returns this
*/
proto.pb.Stream.prototype.setVideo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.pb.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.clearVideo = function() {
  return this.setVideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Stream.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Audio audio = 12;
 * @return {?proto.pb.Audio}
 */
proto.pb.Stream.prototype.getAudio = function() {
  return /** @type{?proto.pb.Audio} */ (
    jspb.Message.getWrapperField(this, proto.pb.Audio, 12));
};


/**
 * @param {?proto.pb.Audio|undefined} value
 * @return {!proto.pb.Stream} returns this
*/
proto.pb.Stream.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.pb.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Stream.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Software software = 13;
 * @return {?proto.pb.Software}
 */
proto.pb.Stream.prototype.getSoftware = function() {
  return /** @type{?proto.pb.Software} */ (
    jspb.Message.getWrapperField(this, proto.pb.Software, 13));
};


/**
 * @param {?proto.pb.Software|undefined} value
 * @return {!proto.pb.Stream} returns this
*/
proto.pb.Stream.prototype.setSoftware = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.pb.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.clearSoftware = function() {
  return this.setSoftware(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Stream.prototype.hasSoftware = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated Extension extensions = 14;
 * @return {!Array<!proto.pb.Stream.Extension>}
 */
proto.pb.Stream.prototype.getExtensionsList = function() {
  return /** @type{!Array<!proto.pb.Stream.Extension>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Stream.Extension, 14));
};


/**
 * @param {!Array<!proto.pb.Stream.Extension>} value
 * @return {!proto.pb.Stream} returns this
*/
proto.pb.Stream.prototype.setExtensionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.pb.Stream.Extension=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Stream.Extension}
 */
proto.pb.Stream.prototype.addExtensions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.pb.Stream.Extension, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Stream} returns this
 */
proto.pb.Stream.prototype.clearExtensionsList = function() {
  return this.setExtensionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ModifyStream.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ModifyStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ModifyStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModifyStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    deletions: (f = msg.getDeletions()) && proto.pb.ModifyStream.Modifiable.toObject(includeInstance, f),
    edits: (f = msg.getEdits()) && proto.pb.ModifyStream.Modifiable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ModifyStream}
 */
proto.pb.ModifyStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ModifyStream;
  return proto.pb.ModifyStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ModifyStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ModifyStream}
 */
proto.pb.ModifyStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.ModifyStream.Modifiable;
      reader.readMessage(value,proto.pb.ModifyStream.Modifiable.deserializeBinaryFromReader);
      msg.setDeletions(value);
      break;
    case 2:
      var value = new proto.pb.ModifyStream.Modifiable;
      reader.readMessage(value,proto.pb.ModifyStream.Modifiable.deserializeBinaryFromReader);
      msg.setEdits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ModifyStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ModifyStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ModifyStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModifyStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeletions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.ModifyStream.Modifiable.serializeBinaryToWriter
    );
  }
  f = message.getEdits();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.ModifyStream.Modifiable.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ModifyStream.Modifiable.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ModifyStream.Modifiable.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ModifyStream.Modifiable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ModifyStream.Modifiable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModifyStream.Modifiable.toObject = function(includeInstance, msg) {
  var f, obj = {
    extensionsList: jspb.Message.toObjectList(msg.getExtensionsList(),
    proto.pb.Stream.Extension.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ModifyStream.Modifiable}
 */
proto.pb.ModifyStream.Modifiable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ModifyStream.Modifiable;
  return proto.pb.ModifyStream.Modifiable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ModifyStream.Modifiable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ModifyStream.Modifiable}
 */
proto.pb.ModifyStream.Modifiable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Stream.Extension;
      reader.readMessage(value,proto.pb.Stream.Extension.deserializeBinaryFromReader);
      msg.addExtensions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ModifyStream.Modifiable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ModifyStream.Modifiable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ModifyStream.Modifiable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModifyStream.Modifiable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExtensionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.Stream.Extension.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stream.Extension extensions = 1;
 * @return {!Array<!proto.pb.Stream.Extension>}
 */
proto.pb.ModifyStream.Modifiable.prototype.getExtensionsList = function() {
  return /** @type{!Array<!proto.pb.Stream.Extension>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Stream.Extension, 1));
};


/**
 * @param {!Array<!proto.pb.Stream.Extension>} value
 * @return {!proto.pb.ModifyStream.Modifiable} returns this
*/
proto.pb.ModifyStream.Modifiable.prototype.setExtensionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.Stream.Extension=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Stream.Extension}
 */
proto.pb.ModifyStream.Modifiable.prototype.addExtensions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Stream.Extension, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.ModifyStream.Modifiable} returns this
 */
proto.pb.ModifyStream.Modifiable.prototype.clearExtensionsList = function() {
  return this.setExtensionsList([]);
};


/**
 * optional Modifiable deletions = 1;
 * @return {?proto.pb.ModifyStream.Modifiable}
 */
proto.pb.ModifyStream.prototype.getDeletions = function() {
  return /** @type{?proto.pb.ModifyStream.Modifiable} */ (
    jspb.Message.getWrapperField(this, proto.pb.ModifyStream.Modifiable, 1));
};


/**
 * @param {?proto.pb.ModifyStream.Modifiable|undefined} value
 * @return {!proto.pb.ModifyStream} returns this
*/
proto.pb.ModifyStream.prototype.setDeletions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ModifyStream} returns this
 */
proto.pb.ModifyStream.prototype.clearDeletions = function() {
  return this.setDeletions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ModifyStream.prototype.hasDeletions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Modifiable edits = 2;
 * @return {?proto.pb.ModifyStream.Modifiable}
 */
proto.pb.ModifyStream.prototype.getEdits = function() {
  return /** @type{?proto.pb.ModifyStream.Modifiable} */ (
    jspb.Message.getWrapperField(this, proto.pb.ModifyStream.Modifiable, 2));
};


/**
 * @param {?proto.pb.ModifyStream.Modifiable|undefined} value
 * @return {!proto.pb.ModifyStream} returns this
*/
proto.pb.ModifyStream.prototype.setEdits = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ModifyStream} returns this
 */
proto.pb.ModifyStream.prototype.clearEdits = function() {
  return this.setEdits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ModifyStream.prototype.hasEdits = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    websiteUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cover: (f = msg.getCover()) && proto.pb.Source.toObject(includeInstance, f),
    featured: (f = msg.getFeatured()) && proto.pb.ClaimList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Channel}
 */
proto.pb.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Channel;
  return proto.pb.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Channel}
 */
proto.pb.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsiteUrl(value);
      break;
    case 4:
      var value = new proto.pb.Source;
      reader.readMessage(value,proto.pb.Source.deserializeBinaryFromReader);
      msg.setCover(value);
      break;
    case 5:
      var value = new proto.pb.ClaimList;
      reader.readMessage(value,proto.pb.ClaimList.deserializeBinaryFromReader);
      msg.setFeatured(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWebsiteUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCover();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.Source.serializeBinaryToWriter
    );
  }
  f = message.getFeatured();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pb.ClaimList.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Channel.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.pb.Channel.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.pb.Channel.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Channel} returns this
 */
proto.pb.Channel.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.pb.Channel.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Channel} returns this
 */
proto.pb.Channel.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string website_url = 3;
 * @return {string}
 */
proto.pb.Channel.prototype.getWebsiteUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Channel} returns this
 */
proto.pb.Channel.prototype.setWebsiteUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Source cover = 4;
 * @return {?proto.pb.Source}
 */
proto.pb.Channel.prototype.getCover = function() {
  return /** @type{?proto.pb.Source} */ (
    jspb.Message.getWrapperField(this, proto.pb.Source, 4));
};


/**
 * @param {?proto.pb.Source|undefined} value
 * @return {!proto.pb.Channel} returns this
*/
proto.pb.Channel.prototype.setCover = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Channel} returns this
 */
proto.pb.Channel.prototype.clearCover = function() {
  return this.setCover(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Channel.prototype.hasCover = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ClaimList featured = 5;
 * @return {?proto.pb.ClaimList}
 */
proto.pb.Channel.prototype.getFeatured = function() {
  return /** @type{?proto.pb.ClaimList} */ (
    jspb.Message.getWrapperField(this, proto.pb.ClaimList, 5));
};


/**
 * @param {?proto.pb.ClaimList|undefined} value
 * @return {!proto.pb.Channel} returns this
*/
proto.pb.Channel.prototype.setFeatured = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Channel} returns this
 */
proto.pb.Channel.prototype.clearFeatured = function() {
  return this.setFeatured(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Channel.prototype.hasFeatured = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ClaimReference.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ClaimReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ClaimReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClaimReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimHash: msg.getClaimHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ClaimReference}
 */
proto.pb.ClaimReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ClaimReference;
  return proto.pb.ClaimReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ClaimReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ClaimReference}
 */
proto.pb.ClaimReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ClaimReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ClaimReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ClaimReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClaimReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes claim_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.ClaimReference.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes claim_hash = 1;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.pb.ClaimReference.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.pb.ClaimReference.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.ClaimReference} returns this
 */
proto.pb.ClaimReference.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.ModifyingClaimReference.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.pb.ModifyingClaimReference.TypeCase = {
  TYPE_NOT_SET: 0,
  STREAM: 2
};

/**
 * @return {proto.pb.ModifyingClaimReference.TypeCase}
 */
proto.pb.ModifyingClaimReference.prototype.getTypeCase = function() {
  return /** @type {proto.pb.ModifyingClaimReference.TypeCase} */(jspb.Message.computeOneofCase(this, proto.pb.ModifyingClaimReference.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ModifyingClaimReference.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ModifyingClaimReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ModifyingClaimReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModifyingClaimReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimHash: msg.getClaimHash_asB64(),
    stream: (f = msg.getStream()) && proto.pb.ModifyStream.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ModifyingClaimReference}
 */
proto.pb.ModifyingClaimReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ModifyingClaimReference;
  return proto.pb.ModifyingClaimReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ModifyingClaimReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ModifyingClaimReference}
 */
proto.pb.ModifyingClaimReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 2:
      var value = new proto.pb.ModifyStream;
      reader.readMessage(value,proto.pb.ModifyStream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ModifyingClaimReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ModifyingClaimReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ModifyingClaimReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModifyingClaimReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.ModifyStream.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes claim_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.ModifyingClaimReference.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes claim_hash = 1;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.pb.ModifyingClaimReference.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.pb.ModifyingClaimReference.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.ModifyingClaimReference} returns this
 */
proto.pb.ModifyingClaimReference.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ModifyStream stream = 2;
 * @return {?proto.pb.ModifyStream}
 */
proto.pb.ModifyingClaimReference.prototype.getStream = function() {
  return /** @type{?proto.pb.ModifyStream} */ (
    jspb.Message.getWrapperField(this, proto.pb.ModifyStream, 2));
};


/**
 * @param {?proto.pb.ModifyStream|undefined} value
 * @return {!proto.pb.ModifyingClaimReference} returns this
*/
proto.pb.ModifyingClaimReference.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pb.ModifyingClaimReference.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ModifyingClaimReference} returns this
 */
proto.pb.ModifyingClaimReference.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ModifyingClaimReference.prototype.hasStream = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ClaimList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ClaimList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ClaimList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ClaimList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClaimList.toObject = function(includeInstance, msg) {
  var f, obj = {
    listType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    claimReferencesList: jspb.Message.toObjectList(msg.getClaimReferencesList(),
    proto.pb.ClaimReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ClaimList}
 */
proto.pb.ClaimList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ClaimList;
  return proto.pb.ClaimList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ClaimList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ClaimList}
 */
proto.pb.ClaimList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.ClaimList.ListType} */ (reader.readEnum());
      msg.setListType(value);
      break;
    case 2:
      var value = new proto.pb.ClaimReference;
      reader.readMessage(value,proto.pb.ClaimReference.deserializeBinaryFromReader);
      msg.addClaimReferences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ClaimList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ClaimList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ClaimList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClaimList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getClaimReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.ClaimReference.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.ClaimList.ListType = {
  COLLECTION: 0,
  DERIVATION: 2
};

/**
 * optional ListType list_type = 1;
 * @return {!proto.pb.ClaimList.ListType}
 */
proto.pb.ClaimList.prototype.getListType = function() {
  return /** @type {!proto.pb.ClaimList.ListType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.ClaimList.ListType} value
 * @return {!proto.pb.ClaimList} returns this
 */
proto.pb.ClaimList.prototype.setListType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ClaimReference claim_references = 2;
 * @return {!Array<!proto.pb.ClaimReference>}
 */
proto.pb.ClaimList.prototype.getClaimReferencesList = function() {
  return /** @type{!Array<!proto.pb.ClaimReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.ClaimReference, 2));
};


/**
 * @param {!Array<!proto.pb.ClaimReference>} value
 * @return {!proto.pb.ClaimList} returns this
*/
proto.pb.ClaimList.prototype.setClaimReferencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.ClaimReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.ClaimReference}
 */
proto.pb.ClaimList.prototype.addClaimReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.ClaimReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.ClaimList} returns this
 */
proto.pb.ClaimList.prototype.clearClaimReferencesList = function() {
  return this.setClaimReferencesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mediaType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sdHash: msg.getSdHash_asB64(),
    btInfohash: msg.getBtInfohash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Source}
 */
proto.pb.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Source;
  return proto.pb.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Source}
 */
proto.pb.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediaType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSdHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBtInfohash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMediaType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSdHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBtInfohash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Source.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.pb.Source.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.pb.Source.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Source} returns this
 */
proto.pb.Source.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.Source.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Source} returns this
 */
proto.pb.Source.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.pb.Source.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Source} returns this
 */
proto.pb.Source.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string media_type = 4;
 * @return {string}
 */
proto.pb.Source.prototype.getMediaType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Source} returns this
 */
proto.pb.Source.prototype.setMediaType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.pb.Source.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Source} returns this
 */
proto.pb.Source.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes sd_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Source.prototype.getSdHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes sd_hash = 6;
 * This is a type-conversion wrapper around `getSdHash()`
 * @return {string}
 */
proto.pb.Source.prototype.getSdHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSdHash()));
};


/**
 * optional bytes sd_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSdHash()`
 * @return {!Uint8Array}
 */
proto.pb.Source.prototype.getSdHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSdHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Source} returns this
 */
proto.pb.Source.prototype.setSdHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes bt_infohash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Source.prototype.getBtInfohash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes bt_infohash = 7;
 * This is a type-conversion wrapper around `getBtInfohash()`
 * @return {string}
 */
proto.pb.Source.prototype.getBtInfohash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBtInfohash()));
};


/**
 * optional bytes bt_infohash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBtInfohash()`
 * @return {!Uint8Array}
 */
proto.pb.Source.prototype.getBtInfohash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBtInfohash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Source} returns this
 */
proto.pb.Source.prototype.setBtInfohash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Fee.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Fee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Fee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Fee.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: msg.getAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Fee}
 */
proto.pb.Fee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Fee;
  return proto.pb.Fee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Fee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Fee}
 */
proto.pb.Fee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.Fee.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Fee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Fee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Fee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Fee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Fee.Currency = {
  UNKNOWN_CURRENCY: 0,
  LBC: 1,
  BTC: 2,
  USD: 3
};

/**
 * optional Currency currency = 1;
 * @return {!proto.pb.Fee.Currency}
 */
proto.pb.Fee.prototype.getCurrency = function() {
  return /** @type {!proto.pb.Fee.Currency} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.Fee.Currency} value
 * @return {!proto.pb.Fee} returns this
 */
proto.pb.Fee.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Fee.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.pb.Fee.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.pb.Fee.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Fee} returns this
 */
proto.pb.Fee.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.pb.Fee.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Fee} returns this
 */
proto.pb.Fee.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Image}
 */
proto.pb.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Image;
  return proto.pb.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Image}
 */
proto.pb.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.pb.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Image} returns this
 */
proto.pb.Image.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.pb.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Image} returns this
 */
proto.pb.Image.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Video.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Video.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    audio: (f = msg.getAudio()) && proto.pb.Audio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Video}
 */
proto.pb.Video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Video;
  return proto.pb.Video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Video}
 */
proto.pb.Video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 15:
      var value = new proto.pb.Audio;
      reader.readMessage(value,proto.pb.Audio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.pb.Audio.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.pb.Video.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Video} returns this
 */
proto.pb.Video.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.pb.Video.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Video} returns this
 */
proto.pb.Video.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 duration = 3;
 * @return {number}
 */
proto.pb.Video.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Video} returns this
 */
proto.pb.Video.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Audio audio = 15;
 * @return {?proto.pb.Audio}
 */
proto.pb.Video.prototype.getAudio = function() {
  return /** @type{?proto.pb.Audio} */ (
    jspb.Message.getWrapperField(this, proto.pb.Audio, 15));
};


/**
 * @param {?proto.pb.Audio|undefined} value
 * @return {!proto.pb.Video} returns this
*/
proto.pb.Video.prototype.setAudio = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Video} returns this
 */
proto.pb.Video.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Video.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Audio.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Audio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Audio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Audio.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Audio}
 */
proto.pb.Audio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Audio;
  return proto.pb.Audio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Audio}
 */
proto.pb.Audio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Audio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Audio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 duration = 1;
 * @return {number}
 */
proto.pb.Audio.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Audio} returns this
 */
proto.pb.Audio.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Software.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Software.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Software} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Software.toObject = function(includeInstance, msg) {
  var f, obj = {
    os: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Software}
 */
proto.pb.Software.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Software;
  return proto.pb.Software.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Software} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Software}
 */
proto.pb.Software.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Software.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Software.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Software} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Software.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Software.OS = {
  UNKNOWN_OS: 0,
  ANY: 1,
  LINUX: 2,
  WINDOWS: 3,
  MAC: 4,
  ANDROID: 5,
  IOS: 6
};

/**
 * optional string os = 1;
 * @return {string}
 */
proto.pb.Software.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Software} returns this
 */
proto.pb.Software.prototype.setOs = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Language.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Language.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Language} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Language.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, 0),
    script: jspb.Message.getFieldWithDefault(msg, 2, 0),
    region: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Language}
 */
proto.pb.Language.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Language;
  return proto.pb.Language.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Language} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Language}
 */
proto.pb.Language.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.Language.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.Language.Script} */ (reader.readEnum());
      msg.setScript(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.Location.Country} */ (reader.readEnum());
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Language.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Language.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Language} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Language.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScript();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Language.Language = {
  UNKNOWN_LANGUAGE: 0,
  EN: 1,
  AA: 2,
  AB: 3,
  AE: 4,
  AF: 5,
  AK: 6,
  AM: 7,
  AN: 8,
  AR: 9,
  AS: 10,
  AV: 11,
  AY: 12,
  AZ: 13,
  BA: 14,
  BE: 15,
  BG: 16,
  BH: 17,
  BI: 18,
  BM: 19,
  BN: 20,
  BO: 21,
  BR: 22,
  BS: 23,
  CA: 24,
  CE: 25,
  CH: 26,
  CO: 27,
  CR: 28,
  CS: 29,
  CU: 30,
  CV: 31,
  CY: 32,
  DA: 33,
  DE: 34,
  DV: 35,
  DZ: 36,
  EE: 37,
  EL: 38,
  EO: 39,
  ES: 40,
  ET: 41,
  EU: 42,
  FA: 43,
  FF: 44,
  FI: 45,
  FJ: 46,
  FO: 47,
  FR: 48,
  FY: 49,
  GA: 50,
  GD: 51,
  GL: 52,
  GN: 53,
  GU: 54,
  GV: 55,
  HA: 56,
  HE: 57,
  HI: 58,
  HO: 59,
  HR: 60,
  HT: 61,
  HU: 62,
  HY: 63,
  HZ: 64,
  IA: 65,
  ID: 66,
  IE: 67,
  IG: 68,
  II: 69,
  IK: 70,
  IO: 71,
  IS: 72,
  IT: 73,
  IU: 74,
  JA: 75,
  JV: 76,
  KA: 77,
  KG: 78,
  KI: 79,
  KJ: 80,
  KK: 81,
  KL: 82,
  KM: 83,
  KN: 84,
  KO: 85,
  KR: 86,
  KS: 87,
  KU: 88,
  KV: 89,
  KW: 90,
  KY: 91,
  LA: 92,
  LB: 93,
  LG: 94,
  LI: 95,
  LN: 96,
  LO: 97,
  LT: 98,
  LU: 99,
  LV: 100,
  MG: 101,
  MH: 102,
  MI: 103,
  MK: 104,
  ML: 105,
  MN: 106,
  MR: 107,
  MS: 108,
  MT: 109,
  MY: 110,
  NA: 111,
  NB: 112,
  ND: 113,
  NE: 114,
  NG: 115,
  NL: 116,
  NN: 117,
  NO: 118,
  NR: 119,
  NV: 120,
  NY: 121,
  OC: 122,
  OJ: 123,
  OM: 124,
  OR: 125,
  OS: 126,
  PA: 127,
  PI: 128,
  PL: 129,
  PS: 130,
  PT: 131,
  QU: 132,
  RM: 133,
  RN: 134,
  RO: 135,
  RU: 136,
  RW: 137,
  SA: 138,
  SC: 139,
  SD: 140,
  SE: 141,
  SG: 142,
  SI: 143,
  SK: 144,
  SL: 145,
  SM: 146,
  SN: 147,
  SO: 148,
  SQ: 149,
  SR: 150,
  SS: 151,
  ST: 152,
  SU: 153,
  SV: 154,
  SW: 155,
  TA: 156,
  TE: 157,
  TG: 158,
  TH: 159,
  TI: 160,
  TK: 161,
  TL: 162,
  TN: 163,
  TO: 164,
  TR: 165,
  TS: 166,
  TT: 167,
  TW: 168,
  TY: 169,
  UG: 170,
  UK: 171,
  UR: 172,
  UZ: 173,
  VE: 174,
  VI: 175,
  VO: 176,
  WA: 177,
  WO: 178,
  XH: 179,
  YI: 180,
  YO: 181,
  ZA: 182,
  ZH: 183,
  ZU: 184
};

/**
 * @enum {number}
 */
proto.pb.Language.Script = {
  UNKNOWN_SCRIPT: 0,
  ADLM: 1,
  AFAK: 2,
  AGHB: 3,
  AHOM: 4,
  ARAB: 5,
  ARAN: 6,
  ARMI: 7,
  ARMN: 8,
  AVST: 9,
  BALI: 10,
  BAMU: 11,
  BASS: 12,
  BATK: 13,
  BENG: 14,
  BHKS: 15,
  BLIS: 16,
  BOPO: 17,
  BRAH: 18,
  BRAI: 19,
  BUGI: 20,
  BUHD: 21,
  CAKM: 22,
  CANS: 23,
  CARI: 24,
  CHAM: 25,
  CHER: 26,
  CIRT: 27,
  COPT: 28,
  CPMN: 29,
  CPRT: 30,
  CYRL: 31,
  CYRS: 32,
  DEVA: 33,
  DOGR: 34,
  DSRT: 35,
  DUPL: 36,
  EGYD: 37,
  EGYH: 38,
  EGYP: 39,
  ELBA: 40,
  ELYM: 41,
  ETHI: 42,
  GEOK: 43,
  GEOR: 44,
  GLAG: 45,
  GONG: 46,
  GONM: 47,
  GOTH: 48,
  GRAN: 49,
  GREK: 50,
  GUJR: 51,
  GURU: 52,
  HANB: 53,
  HANG: 54,
  HANI: 55,
  HANO: 56,
  HANS: 57,
  HANT: 58,
  HATR: 59,
  HEBR: 60,
  HIRA: 61,
  HLUW: 62,
  HMNG: 63,
  HMNP: 64,
  HRKT: 65,
  HUNG: 66,
  INDS: 67,
  ITAL: 68,
  JAMO: 69,
  JAVA: 70,
  JPAN: 71,
  JURC: 72,
  KALI: 73,
  KANA: 74,
  KHAR: 75,
  KHMR: 76,
  KHOJ: 77,
  KITL: 78,
  KITS: 79,
  KNDA: 80,
  KORE: 81,
  KPEL: 82,
  KTHI: 83,
  LANA: 84,
  LAOO: 85,
  LATF: 86,
  LATG: 87,
  LATN: 88,
  LEKE: 89,
  LEPC: 90,
  LIMB: 91,
  LINA: 92,
  LINB: 93,
  LISU: 94,
  LOMA: 95,
  LYCI: 96,
  LYDI: 97,
  MAHJ: 98,
  MAKA: 99,
  MAND: 100,
  MANI: 101,
  MARC: 102,
  MAYA: 103,
  MEDF: 104,
  MEND: 105,
  MERC: 106,
  MERO: 107,
  MLYM: 108,
  MODI: 109,
  MONG: 110,
  MOON: 111,
  MROO: 112,
  MTEI: 113,
  MULT: 114,
  MYMR: 115,
  NAND: 116,
  NARB: 117,
  NBAT: 118,
  NEWA: 119,
  NKDB: 120,
  NKGB: 121,
  NKOO: 122,
  NSHU: 123,
  OGAM: 124,
  OLCK: 125,
  ORKH: 126,
  ORYA: 127,
  OSGE: 128,
  OSMA: 129,
  PALM: 130,
  PAUC: 131,
  PERM: 132,
  PHAG: 133,
  PHLI: 134,
  PHLP: 135,
  PHLV: 136,
  PHNX: 137,
  PLRD: 138,
  PIQD: 139,
  PRTI: 140,
  QAAA: 141,
  QABX: 142,
  RJNG: 143,
  ROHG: 144,
  RORO: 145,
  RUNR: 146,
  SAMR: 147,
  SARA: 148,
  SARB: 149,
  SAUR: 150,
  SGNW: 151,
  SHAW: 152,
  SHRD: 153,
  SHUI: 154,
  SIDD: 155,
  SIND: 156,
  SINH: 157,
  SOGD: 158,
  SOGO: 159,
  SORA: 160,
  SOYO: 161,
  SUND: 162,
  SYLO: 163,
  SYRC: 164,
  SYRE: 165,
  SYRJ: 166,
  SYRN: 167,
  TAGB: 168,
  TAKR: 169,
  TALE: 170,
  TALU: 171,
  TAML: 172,
  TANG: 173,
  TAVT: 174,
  TELU: 175,
  TENG: 176,
  TFNG: 177,
  TGLG: 178,
  THAA: 179,
  THAI: 180,
  TIBT: 181,
  TIRH: 182,
  UGAR: 183,
  VAII: 184,
  VISP: 185,
  WARA: 186,
  WCHO: 187,
  WOLE: 188,
  XPEO: 189,
  XSUX: 190,
  YIII: 191,
  ZANB: 192,
  ZINH: 193,
  ZMTH: 194,
  ZSYE: 195,
  ZSYM: 196,
  ZXXX: 197,
  ZYYY: 198,
  ZZZZ: 199
};

/**
 * optional Language language = 1;
 * @return {!proto.pb.Language.Language}
 */
proto.pb.Language.prototype.getLanguage = function() {
  return /** @type {!proto.pb.Language.Language} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.Language.Language} value
 * @return {!proto.pb.Language} returns this
 */
proto.pb.Language.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Script script = 2;
 * @return {!proto.pb.Language.Script}
 */
proto.pb.Language.prototype.getScript = function() {
  return /** @type {!proto.pb.Language.Script} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.Language.Script} value
 * @return {!proto.pb.Language} returns this
 */
proto.pb.Language.prototype.setScript = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Location.Country region = 3;
 * @return {!proto.pb.Location.Country}
 */
proto.pb.Language.prototype.getRegion = function() {
  return /** @type {!proto.pb.Location.Country} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.pb.Location.Country} value
 * @return {!proto.pb.Language} returns this
 */
proto.pb.Language.prototype.setRegion = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, ""),
    city: jspb.Message.getFieldWithDefault(msg, 3, ""),
    code: jspb.Message.getFieldWithDefault(msg, 4, ""),
    latitude: jspb.Message.getFieldWithDefault(msg, 5, 0),
    longitude: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Location}
 */
proto.pb.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Location;
  return proto.pb.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Location}
 */
proto.pb.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.Location.Country} */ (reader.readEnum());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLatitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Location.Country = {
  UNKNOWN_COUNTRY: 0,
  AF: 1,
  AX: 2,
  AL: 3,
  DZ: 4,
  AS: 5,
  AD: 6,
  AO: 7,
  AI: 8,
  AQ: 9,
  AG: 10,
  AR: 11,
  AM: 12,
  AW: 13,
  AU: 14,
  AT: 15,
  AZ: 16,
  BS: 17,
  BH: 18,
  BD: 19,
  BB: 20,
  BY: 21,
  BE: 22,
  BZ: 23,
  BJ: 24,
  BM: 25,
  BT: 26,
  BO: 27,
  BQ: 28,
  BA: 29,
  BW: 30,
  BV: 31,
  BR: 32,
  IO: 33,
  BN: 34,
  BG: 35,
  BF: 36,
  BI: 37,
  KH: 38,
  CM: 39,
  CA: 40,
  CV: 41,
  KY: 42,
  CF: 43,
  TD: 44,
  CL: 45,
  CN: 46,
  CX: 47,
  CC: 48,
  CO: 49,
  KM: 50,
  CG: 51,
  CD: 52,
  CK: 53,
  CR: 54,
  CI: 55,
  HR: 56,
  CU: 57,
  CW: 58,
  CY: 59,
  CZ: 60,
  DK: 61,
  DJ: 62,
  DM: 63,
  DO: 64,
  EC: 65,
  EG: 66,
  SV: 67,
  GQ: 68,
  ER: 69,
  EE: 70,
  ET: 71,
  FK: 72,
  FO: 73,
  FJ: 74,
  FI: 75,
  FR: 76,
  GF: 77,
  PF: 78,
  TF: 79,
  GA: 80,
  GM: 81,
  GE: 82,
  DE: 83,
  GH: 84,
  GI: 85,
  GR: 86,
  GL: 87,
  GD: 88,
  GP: 89,
  GU: 90,
  GT: 91,
  GG: 92,
  GN: 93,
  GW: 94,
  GY: 95,
  HT: 96,
  HM: 97,
  VA: 98,
  HN: 99,
  HK: 100,
  HU: 101,
  IS: 102,
  IN: 103,
  ID: 104,
  IR: 105,
  IQ: 106,
  IE: 107,
  IM: 108,
  IL: 109,
  IT: 110,
  JM: 111,
  JP: 112,
  JE: 113,
  JO: 114,
  KZ: 115,
  KE: 116,
  KI: 117,
  KP: 118,
  KR: 119,
  KW: 120,
  KG: 121,
  LA: 122,
  LV: 123,
  LB: 124,
  LS: 125,
  LR: 126,
  LY: 127,
  LI: 128,
  LT: 129,
  LU: 130,
  MO: 131,
  MK: 132,
  MG: 133,
  MW: 134,
  MY: 135,
  MV: 136,
  ML: 137,
  MT: 138,
  MH: 139,
  MQ: 140,
  MR: 141,
  MU: 142,
  YT: 143,
  MX: 144,
  FM: 145,
  MD: 146,
  MC: 147,
  MN: 148,
  ME: 149,
  MS: 150,
  MA: 151,
  MZ: 152,
  MM: 153,
  NA: 154,
  NR: 155,
  NP: 156,
  NL: 157,
  NC: 158,
  NZ: 159,
  NI: 160,
  NE: 161,
  NG: 162,
  NU: 163,
  NF: 164,
  MP: 165,
  NO: 166,
  OM: 167,
  PK: 168,
  PW: 169,
  PS: 170,
  PA: 171,
  PG: 172,
  PY: 173,
  PE: 174,
  PH: 175,
  PN: 176,
  PL: 177,
  PT: 178,
  PR: 179,
  QA: 180,
  RE: 181,
  RO: 182,
  RU: 183,
  RW: 184,
  BL: 185,
  SH: 186,
  KN: 187,
  LC: 188,
  MF: 189,
  PM: 190,
  VC: 191,
  WS: 192,
  SM: 193,
  ST: 194,
  SA: 195,
  SN: 196,
  RS: 197,
  SC: 198,
  SL: 199,
  SG: 200,
  SX: 201,
  SK: 202,
  SI: 203,
  SB: 204,
  SO: 205,
  ZA: 206,
  GS: 207,
  SS: 208,
  ES: 209,
  LK: 210,
  SD: 211,
  SR: 212,
  SJ: 213,
  SZ: 214,
  SE: 215,
  CH: 216,
  SY: 217,
  TW: 218,
  TJ: 219,
  TZ: 220,
  TH: 221,
  TL: 222,
  TG: 223,
  TK: 224,
  TO: 225,
  TT: 226,
  TN: 227,
  TR: 228,
  TM: 229,
  TC: 230,
  TV: 231,
  UG: 232,
  UA: 233,
  AE: 234,
  GB: 235,
  US: 236,
  UM: 237,
  UY: 238,
  UZ: 239,
  VU: 240,
  VE: 241,
  VN: 242,
  VG: 243,
  VI: 244,
  WF: 245,
  EH: 246,
  YE: 247,
  ZM: 248,
  ZW: 249,
  R001: 250,
  R002: 251,
  R015: 252,
  R012: 253,
  R818: 254,
  R434: 255,
  R504: 256,
  R729: 257,
  R788: 258,
  R732: 259,
  R202: 260,
  R014: 261,
  R086: 262,
  R108: 263,
  R174: 264,
  R262: 265,
  R232: 266,
  R231: 267,
  R260: 268,
  R404: 269,
  R450: 270,
  R454: 271,
  R480: 272,
  R175: 273,
  R508: 274,
  R638: 275,
  R646: 276,
  R690: 277,
  R706: 278,
  R728: 279,
  R800: 280,
  R834: 281,
  R894: 282,
  R716: 283,
  R017: 284,
  R024: 285,
  R120: 286,
  R140: 287,
  R148: 288,
  R178: 289,
  R180: 290,
  R226: 291,
  R266: 292,
  R678: 293,
  R018: 294,
  R072: 295,
  R748: 296,
  R426: 297,
  R516: 298,
  R710: 299,
  R011: 300,
  R204: 301,
  R854: 302,
  R132: 303,
  R384: 304,
  R270: 305,
  R288: 306,
  R324: 307,
  R624: 308,
  R430: 309,
  R466: 310,
  R478: 311,
  R562: 312,
  R566: 313,
  R654: 314,
  R686: 315,
  R694: 316,
  R768: 317,
  R019: 318,
  R419: 319,
  R029: 320,
  R660: 321,
  R028: 322,
  R533: 323,
  R044: 324,
  R052: 325,
  R535: 326,
  R092: 327,
  R136: 328,
  R192: 329,
  R531: 330,
  R212: 331,
  R214: 332,
  R308: 333,
  R312: 334,
  R332: 335,
  R388: 336,
  R474: 337,
  R500: 338,
  R630: 339,
  R652: 340,
  R659: 341,
  R662: 342,
  R663: 343,
  R670: 344,
  R534: 345,
  R780: 346,
  R796: 347,
  R850: 348,
  R013: 349,
  R084: 350,
  R188: 351,
  R222: 352,
  R320: 353,
  R340: 354,
  R484: 355,
  R558: 356,
  R591: 357,
  R005: 358,
  R032: 359,
  R068: 360,
  R074: 361,
  R076: 362,
  R152: 363,
  R170: 364,
  R218: 365,
  R238: 366,
  R254: 367,
  R328: 368,
  R600: 369,
  R604: 370,
  R239: 371,
  R740: 372,
  R858: 373,
  R862: 374,
  R021: 375,
  R060: 376,
  R124: 377,
  R304: 378,
  R666: 379,
  R840: 380,
  R010: 381,
  R142: 382,
  R143: 383,
  R398: 384,
  R417: 385,
  R762: 386,
  R795: 387,
  R860: 388,
  R030: 389,
  R156: 390,
  R344: 391,
  R446: 392,
  R408: 393,
  R392: 394,
  R496: 395,
  R410: 396,
  R035: 397,
  R096: 398,
  R116: 399,
  R360: 400,
  R418: 401,
  R458: 402,
  R104: 403,
  R608: 404,
  R702: 405,
  R764: 406,
  R626: 407,
  R704: 408,
  R034: 409,
  R004: 410,
  R050: 411,
  R064: 412,
  R356: 413,
  R364: 414,
  R462: 415,
  R524: 416,
  R586: 417,
  R144: 418,
  R145: 419,
  R051: 420,
  R031: 421,
  R048: 422,
  R196: 423,
  R268: 424,
  R368: 425,
  R376: 426,
  R400: 427,
  R414: 428,
  R422: 429,
  R512: 430,
  R634: 431,
  R682: 432,
  R275: 433,
  R760: 434,
  R792: 435,
  R784: 436,
  R887: 437,
  R150: 438,
  R151: 439,
  R112: 440,
  R100: 441,
  R203: 442,
  R348: 443,
  R616: 444,
  R498: 445,
  R642: 446,
  R643: 447,
  R703: 448,
  R804: 449,
  R154: 450,
  R248: 451,
  R830: 452,
  R831: 453,
  R832: 454,
  R680: 455,
  R208: 456,
  R233: 457,
  R234: 458,
  R246: 459,
  R352: 460,
  R372: 461,
  R833: 462,
  R428: 463,
  R440: 464,
  R578: 465,
  R744: 466,
  R752: 467,
  R826: 468,
  R039: 469,
  R008: 470,
  R020: 471,
  R070: 472,
  R191: 473,
  R292: 474,
  R300: 475,
  R336: 476,
  R380: 477,
  R470: 478,
  R499: 479,
  R807: 480,
  R620: 481,
  R674: 482,
  R688: 483,
  R705: 484,
  R724: 485,
  R155: 486,
  R040: 487,
  R056: 488,
  R250: 489,
  R276: 490,
  R438: 491,
  R442: 492,
  R492: 493,
  R528: 494,
  R756: 495,
  R009: 496,
  R053: 497,
  R036: 498,
  R162: 499,
  R166: 500,
  R334: 501,
  R554: 502,
  R574: 503,
  R054: 504,
  R242: 505,
  R540: 506,
  R598: 507,
  R090: 508,
  R548: 509,
  R057: 510,
  R316: 511,
  R296: 512,
  R584: 513,
  R583: 514,
  R520: 515,
  R580: 516,
  R585: 517,
  R581: 518,
  R061: 519,
  R016: 520,
  R184: 521,
  R258: 522,
  R570: 523,
  R612: 524,
  R882: 525,
  R772: 526,
  R776: 527,
  R798: 528,
  R876: 529
};

/**
 * optional Country country = 1;
 * @return {!proto.pb.Location.Country}
 */
proto.pb.Location.prototype.getCountry = function() {
  return /** @type {!proto.pb.Location.Country} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.Location.Country} value
 * @return {!proto.pb.Location} returns this
 */
proto.pb.Location.prototype.setCountry = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string state = 2;
 * @return {string}
 */
proto.pb.Location.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Location} returns this
 */
proto.pb.Location.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string city = 3;
 * @return {string}
 */
proto.pb.Location.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Location} returns this
 */
proto.pb.Location.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string code = 4;
 * @return {string}
 */
proto.pb.Location.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Location} returns this
 */
proto.pb.Location.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional sint32 latitude = 5;
 * @return {number}
 */
proto.pb.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Location} returns this
 */
proto.pb.Location.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 longitude = 6;
 * @return {number}
 */
proto.pb.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Location} returns this
 */
proto.pb.Location.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto.pb);
