// source: result.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.pb.Blocked', null, global);
goog.exportSymbol('proto.pb.ClaimMeta', null, global);
goog.exportSymbol('proto.pb.Error', null, global);
goog.exportSymbol('proto.pb.Error.Code', null, global);
goog.exportSymbol('proto.pb.Output', null, global);
goog.exportSymbol('proto.pb.Output.MetaCase', null, global);
goog.exportSymbol('proto.pb.Outputs', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Outputs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Outputs.repeatedFields_, null);
};
goog.inherits(proto.pb.Outputs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Outputs.displayName = 'proto.pb.Outputs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.Output.oneofGroups_);
};
goog.inherits(proto.pb.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Output.displayName = 'proto.pb.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ClaimMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ClaimMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ClaimMeta.displayName = 'proto.pb.ClaimMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Error.displayName = 'proto.pb.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Blocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Blocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Blocked.displayName = 'proto.pb.Blocked';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Outputs.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Outputs.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Outputs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Outputs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Outputs.toObject = function(includeInstance, msg) {
  var f, obj = {
    txosList: jspb.Message.toObjectList(msg.getTxosList(),
    proto.pb.Output.toObject, includeInstance),
    extraTxosList: jspb.Message.toObjectList(msg.getExtraTxosList(),
    proto.pb.Output.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockedList: jspb.Message.toObjectList(msg.getBlockedList(),
    proto.pb.Blocked.toObject, includeInstance),
    blockedTotal: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Outputs}
 */
proto.pb.Outputs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Outputs;
  return proto.pb.Outputs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Outputs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Outputs}
 */
proto.pb.Outputs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Output;
      reader.readMessage(value,proto.pb.Output.deserializeBinaryFromReader);
      msg.addTxos(value);
      break;
    case 2:
      var value = new proto.pb.Output;
      reader.readMessage(value,proto.pb.Output.deserializeBinaryFromReader);
      msg.addExtraTxos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 5:
      var value = new proto.pb.Blocked;
      reader.readMessage(value,proto.pb.Blocked.deserializeBinaryFromReader);
      msg.addBlocked(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockedTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Outputs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Outputs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Outputs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Outputs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.Output.serializeBinaryToWriter
    );
  }
  f = message.getExtraTxosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.Output.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBlockedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pb.Blocked.serializeBinaryToWriter
    );
  }
  f = message.getBlockedTotal();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * repeated Output txos = 1;
 * @return {!Array<!proto.pb.Output>}
 */
proto.pb.Outputs.prototype.getTxosList = function() {
  return /** @type{!Array<!proto.pb.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Output, 1));
};


/**
 * @param {!Array<!proto.pb.Output>} value
 * @return {!proto.pb.Outputs} returns this
*/
proto.pb.Outputs.prototype.setTxosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Output}
 */
proto.pb.Outputs.prototype.addTxos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Output, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Outputs} returns this
 */
proto.pb.Outputs.prototype.clearTxosList = function() {
  return this.setTxosList([]);
};


/**
 * repeated Output extra_txos = 2;
 * @return {!Array<!proto.pb.Output>}
 */
proto.pb.Outputs.prototype.getExtraTxosList = function() {
  return /** @type{!Array<!proto.pb.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Output, 2));
};


/**
 * @param {!Array<!proto.pb.Output>} value
 * @return {!proto.pb.Outputs} returns this
*/
proto.pb.Outputs.prototype.setExtraTxosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Output}
 */
proto.pb.Outputs.prototype.addExtraTxos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.Output, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Outputs} returns this
 */
proto.pb.Outputs.prototype.clearExtraTxosList = function() {
  return this.setExtraTxosList([]);
};


/**
 * optional uint32 total = 3;
 * @return {number}
 */
proto.pb.Outputs.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Outputs} returns this
 */
proto.pb.Outputs.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 offset = 4;
 * @return {number}
 */
proto.pb.Outputs.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Outputs} returns this
 */
proto.pb.Outputs.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Blocked blocked = 5;
 * @return {!Array<!proto.pb.Blocked>}
 */
proto.pb.Outputs.prototype.getBlockedList = function() {
  return /** @type{!Array<!proto.pb.Blocked>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Blocked, 5));
};


/**
 * @param {!Array<!proto.pb.Blocked>} value
 * @return {!proto.pb.Outputs} returns this
*/
proto.pb.Outputs.prototype.setBlockedList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pb.Blocked=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Blocked}
 */
proto.pb.Outputs.prototype.addBlocked = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pb.Blocked, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Outputs} returns this
 */
proto.pb.Outputs.prototype.clearBlockedList = function() {
  return this.setBlockedList([]);
};


/**
 * optional uint32 blocked_total = 6;
 * @return {number}
 */
proto.pb.Outputs.prototype.getBlockedTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Outputs} returns this
 */
proto.pb.Outputs.prototype.setBlockedTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Output.oneofGroups_ = [[7,15]];

/**
 * @enum {number}
 */
proto.pb.Output.MetaCase = {
  META_NOT_SET: 0,
  CLAIM: 7,
  ERROR: 15
};

/**
 * @return {proto.pb.Output.MetaCase}
 */
proto.pb.Output.prototype.getMetaCase = function() {
  return /** @type {proto.pb.Output.MetaCase} */(jspb.Message.computeOneofCase(this, proto.pb.Output.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHash: msg.getTxHash_asB64(),
    nout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    claim: (f = msg.getClaim()) && proto.pb.ClaimMeta.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Output}
 */
proto.pb.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Output;
  return proto.pb.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Output}
 */
proto.pb.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 7:
      var value = new proto.pb.ClaimMeta;
      reader.readMessage(value,proto.pb.ClaimMeta.deserializeBinaryFromReader);
      msg.setClaim(value);
      break;
    case 15:
      var value = new proto.pb.Error;
      reader.readMessage(value,proto.pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNout();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getClaim();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.pb.ClaimMeta.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes tx_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Output.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx_hash = 1;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.pb.Output.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.pb.Output.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Output} returns this
 */
proto.pb.Output.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 nout = 2;
 * @return {number}
 */
proto.pb.Output.prototype.getNout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Output} returns this
 */
proto.pb.Output.prototype.setNout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.pb.Output.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Output} returns this
 */
proto.pb.Output.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ClaimMeta claim = 7;
 * @return {?proto.pb.ClaimMeta}
 */
proto.pb.Output.prototype.getClaim = function() {
  return /** @type{?proto.pb.ClaimMeta} */ (
    jspb.Message.getWrapperField(this, proto.pb.ClaimMeta, 7));
};


/**
 * @param {?proto.pb.ClaimMeta|undefined} value
 * @return {!proto.pb.Output} returns this
*/
proto.pb.Output.prototype.setClaim = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.pb.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Output} returns this
 */
proto.pb.Output.prototype.clearClaim = function() {
  return this.setClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Output.prototype.hasClaim = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Error error = 15;
 * @return {?proto.pb.Error}
 */
proto.pb.Output.prototype.getError = function() {
  return /** @type{?proto.pb.Error} */ (
    jspb.Message.getWrapperField(this, proto.pb.Error, 15));
};


/**
 * @param {?proto.pb.Error|undefined} value
 * @return {!proto.pb.Output} returns this
*/
proto.pb.Output.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.pb.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Output} returns this
 */
proto.pb.Output.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Output.prototype.hasError = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ClaimMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ClaimMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ClaimMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClaimMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.getChannel()) && proto.pb.Output.toObject(includeInstance, f),
    repost: (f = msg.getRepost()) && proto.pb.Output.toObject(includeInstance, f),
    shortUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    canonicalUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isControlling: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    takeOverHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    creationHeight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    activationHeight: jspb.Message.getFieldWithDefault(msg, 8, 0),
    expirationHeight: jspb.Message.getFieldWithDefault(msg, 9, 0),
    claimsInChannel: jspb.Message.getFieldWithDefault(msg, 10, 0),
    reposted: jspb.Message.getFieldWithDefault(msg, 11, 0),
    effectiveAmount: jspb.Message.getFieldWithDefault(msg, 20, 0),
    supportAmount: jspb.Message.getFieldWithDefault(msg, 21, 0),
    trendingGroup: jspb.Message.getFieldWithDefault(msg, 22, 0),
    trendingMixed: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0),
    trendingLocal: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0),
    trendingGlobal: jspb.Message.getFloatingPointFieldWithDefault(msg, 25, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ClaimMeta}
 */
proto.pb.ClaimMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ClaimMeta;
  return proto.pb.ClaimMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ClaimMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ClaimMeta}
 */
proto.pb.ClaimMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Output;
      reader.readMessage(value,proto.pb.Output.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 2:
      var value = new proto.pb.Output;
      reader.readMessage(value,proto.pb.Output.deserializeBinaryFromReader);
      msg.setRepost(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCanonicalUrl(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsControlling(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTakeOverHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreationHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActivationHeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpirationHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClaimsInChannel(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReposted(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEffectiveAmount(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSupportAmount(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrendingGroup(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrendingMixed(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrendingLocal(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrendingGlobal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ClaimMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ClaimMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ClaimMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClaimMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Output.serializeBinaryToWriter
    );
  }
  f = message.getRepost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Output.serializeBinaryToWriter
    );
  }
  f = message.getShortUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCanonicalUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsControlling();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTakeOverHeight();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCreationHeight();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getActivationHeight();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getExpirationHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getClaimsInChannel();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getReposted();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getEffectiveAmount();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getSupportAmount();
  if (f !== 0) {
    writer.writeUint64(
      21,
      f
    );
  }
  f = message.getTrendingGroup();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getTrendingMixed();
  if (f !== 0.0) {
    writer.writeFloat(
      23,
      f
    );
  }
  f = message.getTrendingLocal();
  if (f !== 0.0) {
    writer.writeFloat(
      24,
      f
    );
  }
  f = message.getTrendingGlobal();
  if (f !== 0.0) {
    writer.writeFloat(
      25,
      f
    );
  }
};


/**
 * optional Output channel = 1;
 * @return {?proto.pb.Output}
 */
proto.pb.ClaimMeta.prototype.getChannel = function() {
  return /** @type{?proto.pb.Output} */ (
    jspb.Message.getWrapperField(this, proto.pb.Output, 1));
};


/**
 * @param {?proto.pb.Output|undefined} value
 * @return {!proto.pb.ClaimMeta} returns this
*/
proto.pb.ClaimMeta.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ClaimMeta.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Output repost = 2;
 * @return {?proto.pb.Output}
 */
proto.pb.ClaimMeta.prototype.getRepost = function() {
  return /** @type{?proto.pb.Output} */ (
    jspb.Message.getWrapperField(this, proto.pb.Output, 2));
};


/**
 * @param {?proto.pb.Output|undefined} value
 * @return {!proto.pb.ClaimMeta} returns this
*/
proto.pb.ClaimMeta.prototype.setRepost = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.clearRepost = function() {
  return this.setRepost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ClaimMeta.prototype.hasRepost = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string short_url = 3;
 * @return {string}
 */
proto.pb.ClaimMeta.prototype.getShortUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setShortUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string canonical_url = 4;
 * @return {string}
 */
proto.pb.ClaimMeta.prototype.getCanonicalUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setCanonicalUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_controlling = 5;
 * @return {boolean}
 */
proto.pb.ClaimMeta.prototype.getIsControlling = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setIsControlling = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 take_over_height = 6;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getTakeOverHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setTakeOverHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 creation_height = 7;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getCreationHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setCreationHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 activation_height = 8;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getActivationHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setActivationHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 expiration_height = 9;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getExpirationHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setExpirationHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 claims_in_channel = 10;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getClaimsInChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setClaimsInChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 reposted = 11;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getReposted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setReposted = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 effective_amount = 20;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getEffectiveAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setEffectiveAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional uint64 support_amount = 21;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getSupportAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setSupportAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 trending_group = 22;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getTrendingGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setTrendingGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional float trending_mixed = 23;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getTrendingMixed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setTrendingMixed = function(value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional float trending_local = 24;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getTrendingLocal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setTrendingLocal = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional float trending_global = 25;
 * @return {number}
 */
proto.pb.ClaimMeta.prototype.getTrendingGlobal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ClaimMeta} returns this
 */
proto.pb.ClaimMeta.prototype.setTrendingGlobal = function(value) {
  return jspb.Message.setProto3FloatField(this, 25, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blocked: (f = msg.getBlocked()) && proto.pb.Blocked.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Error}
 */
proto.pb.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Error;
  return proto.pb.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Error}
 */
proto.pb.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = new proto.pb.Blocked;
      reader.readMessage(value,proto.pb.Blocked.deserializeBinaryFromReader);
      msg.setBlocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlocked();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Blocked.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Error.Code = {
  UNKNOWN_CODE: 0,
  NOT_FOUND: 1,
  INVALID: 2,
  BLOCKED: 3
};

/**
 * optional Code code = 1;
 * @return {!proto.pb.Error.Code}
 */
proto.pb.Error.prototype.getCode = function() {
  return /** @type {!proto.pb.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.Error.Code} value
 * @return {!proto.pb.Error} returns this
 */
proto.pb.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.pb.Error.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Error} returns this
 */
proto.pb.Error.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Blocked blocked = 3;
 * @return {?proto.pb.Blocked}
 */
proto.pb.Error.prototype.getBlocked = function() {
  return /** @type{?proto.pb.Blocked} */ (
    jspb.Message.getWrapperField(this, proto.pb.Blocked, 3));
};


/**
 * @param {?proto.pb.Blocked|undefined} value
 * @return {!proto.pb.Error} returns this
*/
proto.pb.Error.prototype.setBlocked = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Error} returns this
 */
proto.pb.Error.prototype.clearBlocked = function() {
  return this.setBlocked(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Error.prototype.hasBlocked = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Blocked.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Blocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Blocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Blocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: (f = msg.getChannel()) && proto.pb.Output.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Blocked}
 */
proto.pb.Blocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Blocked;
  return proto.pb.Blocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Blocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Blocked}
 */
proto.pb.Blocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 2:
      var value = new proto.pb.Output;
      reader.readMessage(value,proto.pb.Output.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Blocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Blocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Blocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Blocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Output.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 count = 1;
 * @return {number}
 */
proto.pb.Blocked.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Blocked} returns this
 */
proto.pb.Blocked.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Output channel = 2;
 * @return {?proto.pb.Output}
 */
proto.pb.Blocked.prototype.getChannel = function() {
  return /** @type{?proto.pb.Output} */ (
    jspb.Message.getWrapperField(this, proto.pb.Output, 2));
};


/**
 * @param {?proto.pb.Output|undefined} value
 * @return {!proto.pb.Blocked} returns this
*/
proto.pb.Blocked.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Blocked} returns this
 */
proto.pb.Blocked.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Blocked.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.pb);
